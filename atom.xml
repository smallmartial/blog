<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smallmartial&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://github.com/smallmartial/blog.git/"/>
  <updated>2019-04-30T14:10:00.720Z</updated>
  <id>https://github.com/smallmartial/blog.git/</id>
  
  <author>
    <name>小武</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java基础知识学习（六）-多线程机制</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/30/java-7/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/30/java-7/</id>
    <published>2019-04-30T14:06:47.000Z</published>
    <updated>2019-04-30T14:10:00.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java基础知识学习（六）-多线程机制"><a href="#java基础知识学习（六）-多线程机制" class="headerlink" title="java基础知识学习（六）-多线程机制"></a>java基础知识学习（六）-多线程机制</h1><h2 id="1-线程的基本概念"><a href="#1-线程的基本概念" class="headerlink" title="1 .线程的基本概念"></a>1 .线程的基本概念</h2><ul><li>线程是一个程序内部的顺序控制流</li><li>线程和进程的区别：<ul><li>每个进程都有独立的代码和数据空间（进程上下文），进程间的切换有较大的开销</li><li>线程可以看成轻量级的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换的开销小。</li><li>多进程：在操作系统中能同时运行多个任务。</li><li>多线程：在同一个应用的程序中有多个顺序流同时执行</li></ul></li><li>java的线程是通过java.lang.Thread类实现的</li><li>VM启动时会有一个由主方法所定义的线程</li><li>可以通过创建Thread的实例来创建新的线程</li><li>每个线程都是通过某个特定的Thread对象所对应的方法run()来完成其操作的，方法run()称之为线程体</li><li>通过调用Thread类的start方法来启动一个线程</li></ul><blockquote><p>线程是一个程序里面不同的执行路径</p><p>每一个分支都叫做一个线程，main()叫做主分支，也叫做主线程</p></blockquote><p><img src="http://img.smallmartial.cn/1556541278334.png" alt="image"></p><h2 id="2-进程与线程的区别"><a href="#2-进程与线程的区别" class="headerlink" title="2.进程与线程的区别"></a>2.进程与线程的区别</h2><ul><li>进程：<strong>进程是一个</strong>具有一定独立功能的程序关于某个数据集合的一次运行活动。 它<strong>是</strong>操作系统动态执行的基本单元，在传统的操作系统中，<strong>进程</strong>既是基本的分配单元，也是基本的执行单元。 程序<strong>是</strong>指令和数据的有序集合，其本身没有任何运行的含义，<strong>是一个静态的概念</strong>。 而<strong>进程是</strong>程序在处理机上的一次执行过程，它<strong>是一个</strong>动态的概念。</li><li>线程：一个进程里面有一个主线程叫main()方法，是一个程序里面的，一个进程里面不同的执行路径。</li><li>在同一个时间点上，一个CPU只能支持一个线程在执行。因为CPU运行的速度很快，因此我们看起来的感觉就像是多线程一样</li></ul><h2 id="3-线程的创建和启动"><a href="#3-线程的创建和启动" class="headerlink" title="3.线程的创建和启动"></a>3.线程的创建和启动</h2><p><img src="http://img.smallmartial.cn/1556542026769.png" alt="image"></p><blockquote><p>使用Runable接口来从创建和启动线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Runner1 r1 = <span class="keyword">new</span> Runner1();<span class="comment">//这里new了一个线程类的对象出来</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r1);<span class="comment">//要启动一个新的线程就必须new一个Thread对象出来</span></span><br><span class="line">        t.start();<span class="comment">//启动新开辟的线程，新线程执行的是run()方法，新线程与主线程会一起并行执行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"maintheod："</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义一个类用来实现Runnable接口，实现Runnable接口就表示这个类是一个线程类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Runner1："</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556542317439.png" alt="image"></p><blockquote><p>继承Thread类，并重写run()方法创建和启动线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Runner1 r1 = <span class="keyword">new</span> Runner1();<span class="comment">//这里new了一个线程类的对象出来</span></span><br><span class="line">        r1.start();</span><br><span class="line">        <span class="comment">//Thread t = new Thread(r1);//要启动一个新的线程就必须new一个Thread对象出来</span></span><br><span class="line">        <span class="comment">//r1.run();</span></span><br><span class="line">      <span class="comment">//  t.start();//启动新开辟的线程，新线程执行的是run()方法，新线程与主线程会一起并行执行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"maintheod："</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义一个类用来实现Runnable接口，实现Runnable接口就表示这个类是一个线程类*/</span></span><br><span class="line"><span class="comment">//class Runner1 implements Runnable&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Runner1："</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556542765737.png" alt="image"></p><h2 id="4-线程状态转换"><a href="#4-线程状态转换" class="headerlink" title="4.线程状态转换"></a>4.线程状态转换</h2><blockquote><p>操作系统三态模型</p></blockquote><p><img src="http://img.smallmartial.cn/1556542812741.png" alt="image"></p><blockquote><p>线程控制的基本方法</p></blockquote><p><img src="http://img.smallmartial.cn/1556542926177.png" alt="image"></p><blockquote><p>sleep/join/yield方法</p></blockquote><p><img src="http://img.smallmartial.cn/1556543020493.png" alt="image"></p><blockquote><p>sleep方法应用范例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    thread.start();<span class="comment">//调用start()方法启动新开辟的线程</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        MyThread.sleep(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">"主线程睡眠了10秒种后再次启动了"</span>);</span><br><span class="line">   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    thread.flag=<span class="keyword">false</span>;<span class="comment">//改变循环条件，结束死循环</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">// 定义一个标记，用来控制循环的条件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">        System.out.println(<span class="string">"=========="</span> + <span class="keyword">new</span> Date().toLocaleString() + <span class="string">"==========="</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            sleep(<span class="number">1000</span>);<span class="comment">//睡眠的时如果被打断就会抛出InterruptedException异常</span></span><br><span class="line">    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556543320165.png" alt="image"></p><blockquote><p>join方法使用范例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    MyThread2 thread2 = <span class="keyword">new</span> MyThread2(<span class="string">"mythread"</span>);</span><br><span class="line">    <span class="comment">// 在创建一个新的线程对象的同时给这个线程对象命名为mythread</span></span><br><span class="line">    thread2.start();<span class="comment">// 启动线程</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        thread2.join();<span class="comment">// 调用join()方法合并线程，将子线程mythread合并到主线程里面</span></span><br><span class="line">        <span class="comment">// 合并线程后，程序的执行的过程就相当于是方法的调用的执行过程</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"I am main Thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">MyThread2(String s) &#123;</span><br><span class="line">    <span class="keyword">super</span>(s);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"I am a\t"</span> + getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">1000</span>);<span class="comment">// 让子线程每执行一次就睡眠1秒钟</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="http://img.smallmartial.cn/1556543800538.png" alt="image"></p><blockquote><p>yeild方法使用范例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        MyThread3 t1 = <span class="keyword">new</span> MyThread3(<span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        MyThread3 t2 = <span class="keyword">new</span> MyThread3(<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();<span class="comment">// 启动子线程t1</span></span><br><span class="line">        t2.start();<span class="comment">// 启动子线程t2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"I am main Thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    MyThread3(String s) &#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">"："</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                yield();<span class="comment">// 当执行到i能被2整除时当前执行的线程就让出来让另一个在执行run()方法的线程来优先执行</span></span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556543981376.png" alt="image"></p><h2 id="5-线程的优先级"><a href="#5-线程的优先级" class="headerlink" title="5.线程的优先级"></a>5.线程的优先级</h2><p><img src="http://img.smallmartial.cn/1556544021939.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        MyThread4 t4 = <span class="keyword">new</span> MyThread4();</span><br><span class="line">        MyThread5 t5 = <span class="keyword">new</span> MyThread5();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(t4);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(t5);</span><br><span class="line">        t1.setPriority(Thread.NORM_PRIORITY + <span class="number">3</span>);<span class="comment">// 使用setPriority()方法设置线程的优先级别，这里把t1线程的优先级别进行设置</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 把线程t1的优先级(priority)在正常优先级(NORM_PRIORITY)的基础上再提高3级 </span></span><br><span class="line"><span class="comment">         * 这样t1的执行一次的时间就会比t2的多很多 　　　　</span></span><br><span class="line"><span class="comment">         * 默认情况下NORM_PRIORITY的值为5</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        System.out.println(<span class="string">"t1线程的优先级是："</span> + t1.getPriority());</span><br><span class="line">        <span class="comment">// 使用getPriority()方法取得线程的优先级别，打印出t1的优先级别为8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"T1："</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread5</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"===============T2："</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-线程同步"><a href="#6-线程同步" class="headerlink" title="6.线程同步"></a>6.线程同步</h2><p><img src="http://img.smallmartial.cn/1556549650485.png" alt="image"></p><blockquote><p>synchronized关键字的使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(test);</span><br><span class="line">        t1.setName(<span class="string">"t1"</span>);<span class="comment">// 设置t1线程的名字</span></span><br><span class="line">        t2.setName(<span class="string">"t2"</span>);<span class="comment">// 设置t2线程的名字</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        timer.add(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;<span class="comment">// 在声明方法时加入synchronized时表示在执行这个方法的过程之中当前对象被锁定</span></span><br><span class="line">       <span class="comment">// synchronized (this) &#123;</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 使用synchronized(this)来锁定当前对象，这样就不会再出现两个不同的线程同时访问同一个对象资源的问题了 只有当一个线程访问结束后才会轮到下一个线程来访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">"：你是第"</span> + num + <span class="string">"个使用timer的线程"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程死锁问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这个小程序模拟的是线程死锁的问题*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> Object o1 = <span class="keyword">new</span> Object(), o2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"的flag="</span> + flag);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 运行程序后发现程序执行到这里打印出flag以后就再也不往下执行后面的if语句了 </span></span><br><span class="line"><span class="comment">         * 程序也就死在了这里，既不往下执行也不退出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 这是flag=1这个线程 */</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="comment">/* 使用synchronized关键字把对象01锁定了 */</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 前面已经锁住了对象o1，只要再能锁住o2，那么就能执行打印出1的操作了 </span></span><br><span class="line"><span class="comment">                     * 可是这里无法锁定对象o2，因为在另外一个flag=0这个线程里面已经把对象o1给锁住了 </span></span><br><span class="line"><span class="comment">                     * 尽管锁住o2这个对象的线程会每隔500毫秒睡眠一次，可是在睡眠的时候仍然是锁住o2不放的</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    System.out.println(<span class="string">"1"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这里的两个if语句都将无法执行，因为已经造成了线程死锁的问题 </span></span><br><span class="line"><span class="comment">         * flag=1这个线程在等待flag=0这个线程把对象o2的锁解开， </span></span><br><span class="line"><span class="comment">         * 而flag=0这个线程也在等待flag=1这个线程把对象o1的锁解开 </span></span><br><span class="line"><span class="comment">         * 然而这两个线程都不愿意解开锁住的对象，所以就造成了线程死锁的问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 这是flag=0这个线程 */</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                <span class="comment">/* 这里先使用synchronized锁住对象o2 */</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 前面已经锁住了对象o2，只要再能锁住o1，那么就能执行打印出0的操作了 可是这里无法锁定对象o1，因为在另外一个flag=1这个线程里面已经把对象o1给锁住了 尽管锁住o1这个对象的线程会每隔500毫秒睡眠一次，可是在睡眠的时候仍然是锁住o1不放的</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    System.out.println(<span class="string">"0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        TestDeadLock td1 = <span class="keyword">new</span> TestDeadLock();</span><br><span class="line">        TestDeadLock td2 = <span class="keyword">new</span> TestDeadLock();</span><br><span class="line">        td1.flag = <span class="number">1</span>;</span><br><span class="line">        td2.flag = <span class="number">0</span>;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(td1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(td2);</span><br><span class="line">        t1.setName(<span class="string">"线程td1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程td2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556550810939.png" alt="image"></p><blockquote><p>生产者消费者问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.regexp.joni.exception.InternalException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SyncStack ss = <span class="keyword">new</span> SyncStack();</span><br><span class="line">        Producer p = <span class="keyword">new</span>  Producer(ss);</span><br><span class="line">        Consumer c = <span class="keyword">new</span> Consumer(ss);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(p).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(c).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WoTou</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    WoTou(<span class="keyword">int</span> id)&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"WoToU:"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncStack</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span> ;</span><br><span class="line">    WoTou[] arrWT = <span class="keyword">new</span> WoTou[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(WoTou wt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(index == arrWT.length)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.notify();<span class="comment">//唤醒一个正在等待的进程</span></span><br><span class="line">        arrWT[index] = wt;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> WoTou <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        index--;</span><br><span class="line">        <span class="keyword">return</span> arrWT[index];</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">     SyncStack ss = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     Producer(SyncStack ss)&#123;</span><br><span class="line">         <span class="keyword">this</span>.ss = ss;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">             WoTou wt = <span class="keyword">new</span> WoTou(i);</span><br><span class="line">             ss.push(wt);</span><br><span class="line">             System.out.println(<span class="string">"生产了："</span>+wt);</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep((<span class="keyword">int</span>)(Math.random()*<span class="number">1000</span>));</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    SyncStack ss = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Consumer(SyncStack ss)&#123;</span><br><span class="line">        <span class="keyword">this</span>.ss = ss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            WoTou wt = ss.pop();</span><br><span class="line">            System.out.println(<span class="string">"消费了："</span>+wt);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep((<span class="keyword">int</span>)(Math.random()*<span class="number">1000</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556586785600.png" alt="image"></p><h2 id="7-Socket"><a href="#7-Socket" class="headerlink" title="7.Socket"></a>7.Socket</h2><p><img src="http://img.smallmartial.cn/1556602974956.png" alt="image"></p><ul><li>tcp端口 udp端口分开</li><li>每一个端口65536个</li></ul><blockquote><p>server</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.corba.se.spi.activation.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.objects.annotations.Where;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">            System.out.println(dis.readUTF());</span><br><span class="line">            dis.close();</span><br><span class="line">            <span class="comment">//System.out.println("hello world");</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println("hello world");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>client</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">6666</span>);</span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line">        dos.writeUTF(<span class="string">"hello server"</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">        dos.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="http://img.smallmartial.cn/1556608078260.png" alt="image"></p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java基础知识学习（六）-多线程机制&quot;&gt;&lt;a href=&quot;#java基础知识学习（六）-多线程机制&quot; class=&quot;headerlink&quot; title=&quot;java基础知识学习（六）-多线程机制&quot;&gt;&lt;/a&gt;java基础知识学习（六）-多线程机制&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java 基础知识学习（五）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/30/java-6/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/30/java-6/</id>
    <published>2019-04-30T14:02:40.000Z</published>
    <updated>2019-04-30T14:06:15.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-基础知识学习（五）"><a href="#java-基础知识学习（五）" class="headerlink" title="java 基础知识学习（五）"></a>java 基础知识学习（五）</h1><h2 id="1-java流输入输出原理"><a href="#1-java流输入输出原理" class="headerlink" title="1.java流输入输出原理"></a>1.java流输入输出原理</h2><p><img src="http://img.smallmartial.cn/1556520571328.png" alt="image"></p><h2 id="2-输入和输出流分类"><a href="#2-输入和输出流分类" class="headerlink" title="2.输入和输出流分类"></a>2.输入和输出流分类</h2><ul><li>java.io包中定义了多个流类型来实现输入和输出功能<ul><li>按数据流的方向不同可以分为输入流和输chuliu</li><li>按处理数据单位的不同可以分为字节流和字符流</li><li>按照功能不同可以分为节点流和处理流</li></ul></li><li>java sdk所提供的所有流的类型位于java.io包，分别继承自以下四种抽象流<ul><li>字节流 InputStream OutputStream</li><li>字符流  Reader Writer</li></ul></li></ul><h2 id="3-节点流和处理流"><a href="#3-节点流和处理流" class="headerlink" title="3.节点流和处理流"></a>3.节点流和处理流</h2><p><img src="http://img.smallmartial.cn/1556521139890.png" alt="image"></p><ul><li>节点流类型</li></ul><p><img src="http://img.smallmartial.cn/1556522696783.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;<span class="comment">// 使用变量b来装调用read()方法时返回的整数</span></span><br><span class="line">        FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 使用FileInputStream流来读取有中文的内容时，读出来的是乱码，因为使用InputStream流里面的read()方法读取内容时是一个字节一个字节地读取的，而一个汉字是占用两个字节的，所以读取出来的汉字无法正确显示。</span></span><br><span class="line">        <span class="comment">// FileReader in = null;//使用FileReader流来读取内容时，中英文都可以正确显示，因为Reader流里面的read()方法是一个字符一个字符地读取的，这样每次读取出来的都是一个完整的汉字，这样就可以正确显示了。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\Administrator\\Desktop\\img\\day5\\Test.java"</span>);</span><br><span class="line">            <span class="comment">// in = new FileReader("D:/java/io/TestFileInputStream.java");</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"系统找不到指定文件！"</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);<span class="comment">// 系统非正常退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> num = <span class="number">0</span>;<span class="comment">// 使用变量num来记录读取到的字符数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 调用read()方法时会抛异常，所以需要捕获异常</span></span><br><span class="line">            <span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 调用int read() throws Exception方法时，返回的是一个int类型的整数</span></span><br><span class="line">                <span class="comment">// 循环结束的条件就是返回一个值-1，表示此时已经读取到文件的末尾了。</span></span><br><span class="line">                <span class="comment">// System.out.print(b+"\t");//如果没有使用“(char)b”进行转换，那么直接打印出来的b就是数字，而不是英文和中文了</span></span><br><span class="line">                System.out.print((<span class="keyword">char</span>) b);</span><br><span class="line">                <span class="comment">// “char(b)”把使用数字表示的汉字和英文字母转换成字符输入</span></span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();<span class="comment">// 关闭输入流</span></span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">"总共读取了"</span> + num + <span class="string">"个字节的文件"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件读取错误！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-InputStream"><a href="#4-InputStream" class="headerlink" title="4.InputStream"></a>4.InputStream</h2><ul><li><p>继承自InputStream的流都是用于向程序中输入数据，且数据的单位为字节（8bit）;</p></li><li><p>基本方法</p></li></ul><p><img src="http://img.smallmartial.cn/1556521580649.png" alt="image"></p><h2 id="5-OutputSream"><a href="#5-OutputSream" class="headerlink" title="5.OutputSream"></a>5.OutputSream</h2><ul><li><p>继承自OutputSteam的流是用于程序中输入数据，且数据的单位为字节。</p></li><li><p>基本方法</p></li></ul><p><img src="http://img.smallmartial.cn/1556521829975.png" alt="image"></p><h2 id="6-Reader"><a href="#6-Reader" class="headerlink" title="6.Reader"></a>6.Reader</h2><ul><li>继承自Reader的流都是用于向程序中输入数据，且数据的单位为字符（16bit)</li><li>基本方法</li></ul><p><img src="http://img.smallmartial.cn/1556522016140.png" alt="image"></p><h2 id="7-Writer"><a href="#7-Writer" class="headerlink" title="7.Writer"></a>7.Writer</h2><ul><li>继承自Writer的流都是用于程序的输出数据，且数据单位为字符（16bit）</li><li>基本方法</li></ul><p><img src="http://img.smallmartial.cn/1556522126981.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">/*使用FileWriter输出流从程序把数据写入到Uicode.dat文件中</span></span><br><span class="line"><span class="comment">        使用FileWriter流向文件写入数据时是一个字符一个字符写入的*/</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">                fw = <span class="keyword">new</span> FileWriter(<span class="string">"D:/java/Uicode.dat"</span>);</span><br><span class="line">                <span class="comment">//字符的本质是一个无符号的16位整数</span></span><br><span class="line">                <span class="comment">//字符在计算机内部占用2个字节</span></span><br><span class="line">                <span class="comment">//这里使用for循环把0～60000里面的所有整数都输出</span></span><br><span class="line">                <span class="comment">//这里相当于是把全世界各个国家的文字都0～60000内的整数的形式来表示</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=<span class="number">60000</span>;c++)&#123;</span><br><span class="line">                    fw.write(c);</span><br><span class="line">                    <span class="comment">//使用write(int c)把0～60000内的整数写入到指定文件内</span></span><br><span class="line">                    <span class="comment">//调用write()方法时，我认为在执行的过程中应该使用了“(char)c”进行强制转换，即把整数转换成字符来显示</span></span><br><span class="line">                    <span class="comment">//因为打开写入数据的文件可以看到，里面显示的数据并不是0～60000内的整数，而是不同国家的文字的表示方式</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*使用FileReader(字符流)读取指定文件里面的内容</span></span><br><span class="line"><span class="comment">            读取内容时是以一个字符为单位进行读取的*/</span></span><br><span class="line">                <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">                FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">                fr = <span class="keyword">new</span> FileReader(<span class="string">"D:/java/Uicode.dat"</span>);</span><br><span class="line">                <span class="keyword">while</span>((b = fr.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>)b + <span class="string">"\t"</span>);</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">                System.out.println(<span class="string">"总共读取了"</span>+num+<span class="string">"个字符"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-缓存流"><a href="#8-缓存流" class="headerlink" title="8.缓存流"></a>8.缓存流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBufferStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:/java/TestFileInputStream.java"</span>);</span><br><span class="line">            <span class="comment">// 在FileInputStream节点流的外面套接一层处理流BufferedInputStream</span></span><br><span class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) bis.read());</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) bis.read());</span><br><span class="line">            bis.mark(<span class="number">100</span>);<span class="comment">// 在第100个字符处做一个标记</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span> &amp;&amp; (c = bis.read()) != -<span class="number">1</span>; i++) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            bis.reset();<span class="comment">// 重新回到原来标记的地方</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span> &amp;&amp; (c = bis.read()) != -<span class="number">1</span>; i++) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-转换流"><a href="#9-转换流" class="headerlink" title="9.转换流"></a>9.转换流</h2><p><img src="http://img.smallmartial.cn/1556537569771.png" alt="image"></p><blockquote><p>转换流非常的有用，它可以把一个字节流转换成一个字符流，转换流有两种，一种叫InputStreamReader，另一种叫OutputStreamWriter。InputStream是字节流，Reader是字符流，InputStreamReader就是把InputStream转换成Reader。OutputStream是字节流，Writer是字符流，OutputStreamWriter就是把OutputStream转换成Writer。把OutputStream转换成Writer之后就可以一个字符一个字符地通过管道写入数据了，而且还可以写入字符串。我们如果用一个FileOutputStream流往文件里面写东西，得要一个字节一个字节地写进去，但是如果我们在FileOutputStream流上面套上一个字符转换流，那我们就可以一个字符串一个字符串地写进去。</p></blockquote><p>转换流代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransform1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">                    <span class="keyword">new</span> FileOutputStream(<span class="string">"D:/java/char.txt"</span>));</span><br><span class="line">            osw.write(<span class="string">"MircosoftsunIBMOracleApplet"</span>);</span><br><span class="line">            System.out.println(osw.getEncoding());</span><br><span class="line">            osw.close();</span><br><span class="line">            osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                    <span class="string">"D:\\java\\char.txt"</span>, <span class="keyword">true</span>), <span class="string">"ISO8859_1"</span>);</span><br><span class="line">            </span><br><span class="line">            osw.write(<span class="string">"MircosoftsunIBMOracleApplet"</span>);</span><br><span class="line">            System.out.println(osw.getEncoding());</span><br><span class="line">            osw.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556538143376.png" alt="image"></p><h2 id="10-数据流"><a href="#10-数据流" class="headerlink" title="10.数据流"></a>10.数据流</h2><p><img src="http://img.smallmartial.cn/1556538453175.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="comment">//在调用构造方法时，首先会在内存里面创建一个ByteArray字节数组</span></span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">        <span class="comment">//在输出流的外面套上一层数据流，用来处理int，double类型的数</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            dos.writeDouble(Math.random());<span class="comment">//把产生的随机数直接写入到字节数组ByteArray中</span></span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);<span class="comment">//布尔类型的数据在内存中就只占一个字节</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">            System.out.println(bais.available());</span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(bais);</span><br><span class="line">            System.out.println(dis.readDouble());<span class="comment">//先写进去的就先读出来，调用readDouble()方法读取出写入的随机数</span></span><br><span class="line">            System.out.println(dis.readBoolean());<span class="comment">//后写进去的就后读出来，这里面的读取顺序不能更改位置，否则会打印出不正确的结果</span></span><br><span class="line">            dos.close();</span><br><span class="line">            bais.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556539103939.png" alt="image"></p><h2 id="11-Print流"><a href="#11-Print流" class="headerlink" title="11.Print流"></a>11.Print流</h2><p><img src="http://img.smallmartial.cn/1556539169667.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:/java/log.txt"</span>);</span><br><span class="line">                ps = <span class="keyword">new</span> PrintStream(fos);<span class="comment">//在输出流的外面套接一层打印流，用来控制打印输出</span></span><br><span class="line">                <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.setOut(ps);<span class="comment">//这里调用setOut()方法改变了输出窗口，以前写System.out.print()默认的输出窗口就是命令行窗口.</span></span><br><span class="line">                    <span class="comment">//但现在使用System.setOut(ps)将打印输出窗口改成了由ps指定的文件里面，通过这样设置以后，打印输出时都会在指定的文件内打印输出</span></span><br><span class="line">                    <span class="comment">//在这里将打印输出窗口设置到了log.txt这个文件里面，所以打印出来的内容会在log.txt这个文件里面看到</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="number">0</span>;c&lt;=<span class="number">60000</span>;c++)&#123;</span><br><span class="line">                    System.out.print(c+<span class="string">"\t"</span>);<span class="comment">//把世界各国的文字打印到log.txt这个文件中去</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556539516704.png" alt="image"></p><h2 id="12-Object流"><a href="#12-Object流" class="headerlink" title="12.Object流"></a>12.Object流</h2><p><img src="http://img.smallmartial.cn/1556539955525.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        t.k = <span class="number">8</span>;<span class="comment">// 把k的值修改为8</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(</span><br><span class="line">                    <span class="string">"D:/java/TestObjectIo.txt"</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">            <span class="comment">// ObjectOutputStream流专门用来处理Object的，在fos流的外面套接ObjectOutputStream流就可以直接把一个Object写进去</span></span><br><span class="line">            oos.writeObject(t);<span class="comment">// 直接把一个t对象写入到指定的文件里面</span></span><br><span class="line">            oos.flush();</span><br><span class="line">            oos.close();</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(</span><br><span class="line">                    <span class="string">"D:/java/TestObjectIo.txt"</span>);</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">            <span class="comment">// ObjectInputStream专门用来读一个Object的</span></span><br><span class="line">            T tRead = (T) ois.readObject();</span><br><span class="line">            <span class="comment">// 直接把文件里面的内容全部读取出来然后分解成一个Object对象，并使用强制转换成指定类型T</span></span><br><span class="line">            System.out.print(tRead.i + <span class="string">"\t"</span> + tRead.j + <span class="string">"\t"</span> + tRead.d + <span class="string">"\t"</span></span><br><span class="line">                    + tRead.k);</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 凡是要将一个类的对象序列化成一个字节流就必须实现Serializable接口</span></span><br><span class="line"><span class="comment"> * Serializable接口中没有定义方法，Serializable接口是一个标记性接口，用来给类作标记，只是起到一个标记作用。</span></span><br><span class="line"><span class="comment"> * 这个标记是给编译器看的，编译器看到这个标记之后就可以知道这个类可以被序列化 如果想把某个类的对象序列化，就必须得实现Serializable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Serializable的意思是可以被序列化的</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">2.3</span>;</span><br><span class="line">    <span class="comment">//int k = 15;</span></span><br><span class="line">     <span class="keyword">transient</span> <span class="keyword">int</span> k = <span class="number">15</span>;</span><br><span class="line">    <span class="comment">// 在声明变量时如果加上transient关键字，那么这个变量就会被当作是透明的，即不存在。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556540327738.png" alt="image"></p><blockquote><p>总结</p></blockquote><p><img src="http://img.smallmartial.cn/1556540449795.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-基础知识学习（五）&quot;&gt;&lt;a href=&quot;#java-基础知识学习（五）&quot; class=&quot;headerlink&quot; title=&quot;java 基础知识学习（五）&quot;&gt;&lt;/a&gt;java 基础知识学习（五）&lt;/h1&gt;&lt;h2 id=&quot;1-java流输入输出原理&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识学习（四）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/29/java-5/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/29/java-5/</id>
    <published>2019-04-29T06:25:58.000Z</published>
    <updated>2019-04-29T06:31:48.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java基础知识学习（四）"><a href="#java基础知识学习（四）" class="headerlink" title="java基础知识学习（四）"></a>java基础知识学习（四）</h1><h2 id="1-容器API"><a href="#1-容器API" class="headerlink" title="1.容器API"></a>1.容器API</h2><p><img src="http://img.smallmartial.cn/1556454659472.png" alt="1556454659472"></p><ul><li>Collection接口定义了存储一组对象的方法，其子接口的Set和List分别定义了储存方式<ul><li>Set中的数据对象没有顺序且不可以重复</li><li>List中的数据对象有顺序且可以重复</li></ul></li><li>Map接口 定义了存储<code>key-value</code>键值对的方法</li></ul><blockquote><p>Collection接口中所定义的方法</p></blockquote><p><img src="http://img.smallmartial.cn/1556455158642.png" alt="1556455158642"></p><p><img src="http://img.smallmartial.cn/1556455208657.png" alt="1556455208657"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//可以放入不同类型的对象</span></span><br><span class="line">        c.add(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="comment">//  c.add(new Name("f1","l1"));</span></span><br><span class="line">        c.add(<span class="keyword">new</span> Integer(<span class="number">100</span>));</span><br><span class="line">        System.out.println(c.size());</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://img.smallmartial.cn/1556455524872.png" alt="1556455524872"></p><blockquote><p>重写equals()方法为什么要重写hashcode()方法?</p></blockquote><ol><li>hashCode是不是重写需要看业务，开放开发人员可以重写这个方法，可能有这种情况，比如我们仅仅对比object的部分属性，就认为两者相等，而不对比其其他属性。</li><li>重写java object hashCode方法，是为了在一些算法中避免我们不想要的冲突和碰撞。比如其HashMap，HashSet的使用中。</li></ol><h2 id="2-Iterator接口"><a href="#2-Iterator接口" class="headerlink" title="2.Iterator接口"></a>2.Iterator接口</h2><ul><li><p>所有实现了Collection接口的容器类中都有一个iterator方法以返回一个实现了Iterator接口的对象</p></li><li><p>Iterator对象称作为为迭代器，用以方便的实现对容器内的遍历操作</p></li><li><p>Iterator定义以下的方法：</p><p><img src="http://img.smallmartial.cn/1556457060888.png" alt="1556457060888"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//List&lt;String&gt; list=new ArrayList&lt;&gt;();</span></span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"edf"</span>);</span><br><span class="line">        list.add(<span class="string">"ghi"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;String&gt; it=list.iterator();it.hasNext();)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-List接口"><a href="#3-List接口" class="headerlink" title="3.List接口"></a>3.List接口</h2><ul><li>List接口是Collection的子接口，实现List接口的容器类中元素是有序的，而且可以重复操作。</li><li>List容器中的元素都对应一个整数型的序号记载在其容器的位置，可以根据序号存取容器中的元素。</li><li>List容器类有ArrayList,LinkedList;</li></ul><h2 id="4-List常用算法"><a href="#4-List常用算法" class="headerlink" title="4.List常用算法"></a>4.List常用算法</h2><ul><li>类·<code>java.util.Collections</code>提供了一些静态方法实现了基于List容器的一些常用算法</li></ul><p><img src="http://img.smallmartial.cn/1556508714556.png" alt="1556508714556"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List l1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List l2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            l1.add(<span class="string">"a"</span> +i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        Collections.shuffle(l1);<span class="comment">//随机排序</span></span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        Collections.reverse(l1);<span class="comment">//逆序</span></span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        Collections.sort(l1);<span class="comment">//排序</span></span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        <span class="comment">//折半查找</span></span><br><span class="line">        System.out.println(Collections.binarySearch(l1, <span class="string">"a5"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://img.smallmartial.cn/1556509264014.png" alt="1556509264014"></p><h2 id="5-Comparable接口"><a href="#5-Comparable接口" class="headerlink" title="5.Comparable接口"></a>5.Comparable接口</h2><ul><li>所有可以<code>排序</code>的类都实现了java.lang.Comparable接口，Comparable接口中只有一个方法：<code>public int compareTo(Object obj)</code>;<ul><li>返回 0 表示this == obj</li><li>返回正数表示 this &gt; obj</li><li>返回负数表示 this &lt; obj</li></ul></li><li>实现了Compareable接口的类通过实现compareTo方法而确定该类的排序方式</li></ul><h2 id="6-数据结构读写效率比较"><a href="#6-数据结构读写效率比较" class="headerlink" title="6.数据结构读写效率比较"></a>6.数据结构读写效率比较</h2><p><img src="http://img.smallmartial.cn/1556516061646.png" alt="1556516061646"></p><h2 id="7-Map接口"><a href="#7-Map接口" class="headerlink" title="7.Map接口"></a>7.Map接口</h2><ul><li><p>实现map接口的类用来存储键值对</p></li><li><p>Map接口中实现类有HashMap和TreeMap等</p></li><li><p>Map类中存储键值对通过键来标识，所以键值不能重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map m1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map m2 = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        m1.put(<span class="string">"one"</span>,<span class="number">1</span>);</span><br><span class="line">        m1.put(<span class="string">"two"</span>,<span class="number">2</span>);</span><br><span class="line">        m1.put(<span class="string">"three"</span>,<span class="number">3</span>);</span><br><span class="line">        m2.put(<span class="string">"A"</span>,<span class="number">1</span>);</span><br><span class="line">        m2.put(<span class="string">"B"</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(m1.size());</span><br><span class="line">        System.out.println(m1.containsKey(<span class="string">"one"</span>));</span><br><span class="line">        <span class="keyword">if</span>(m1.containsKey(<span class="string">"two"</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> i = (Integer) m1.get(<span class="string">"two"</span>);</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://img.smallmartial.cn/1556517635796.png" alt="1556517635796"></p></li></ul><h2 id="8-泛型"><a href="#8-泛型" class="headerlink" title="8.泛型"></a>8.泛型</h2><p><img src="http://img.smallmartial.cn/1556518018251.png" alt="1556518018251"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//改写为泛型</span></span><br><span class="line">        Map&lt;String, Integer&gt; m1 = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class="line">        Map m2 = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        m1.put(<span class="string">"one"</span>,<span class="number">1</span>);</span><br><span class="line">        m1.put(<span class="string">"two"</span>,<span class="number">2</span>);</span><br><span class="line">        m1.put(<span class="string">"three"</span>,<span class="number">3</span>);</span><br><span class="line">        m2.put(<span class="string">"A"</span>,<span class="number">1</span>);</span><br><span class="line">        m2.put(<span class="string">"B"</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(m1.size());</span><br><span class="line">        System.out.println(m1.containsKey(<span class="string">"one"</span>));</span><br><span class="line">        <span class="keyword">if</span>(m1.containsKey(<span class="string">"two"</span>))&#123;</span><br><span class="line">            <span class="comment">//int i = (Integer) m1.get("two");</span></span><br><span class="line">            <span class="keyword">int</span> i = m1.get(<span class="string">"two"</span>);</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.smallmartial.cn/1556518644638.png" alt="1556518644638"></p><blockquote><p> 总结</p></blockquote><p><img src="http://img.smallmartial.cn/1556518860787.png" alt="1556518860787"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java基础知识学习（四）&quot;&gt;&lt;a href=&quot;#java基础知识学习（四）&quot; class=&quot;headerlink&quot; title=&quot;java基础知识学习（四）&quot;&gt;&lt;/a&gt;java基础知识学习（四）&lt;/h1&gt;&lt;h2 id=&quot;1-容器API&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识学习（三）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/29/java-4/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/29/java-4/</id>
    <published>2019-04-29T06:25:49.000Z</published>
    <updated>2019-04-29T06:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础知识学习（三）"><a href="#Java基础知识学习（三）" class="headerlink" title="Java基础知识学习（三）"></a>Java基础知识学习（三）</h1><h2 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1.抽象类"></a>1.抽象类</h2><ul><li>用abstract关键字修饰一个类时，这个类叫做抽象类，用abstract修饰一个方法时，该方法叫做抽象方法</li><li>含有抽象方法的类必须声明为抽象类，抽象类必须被继承，抽象方法必须被重新</li><li>抽象类不能被实例化</li><li>抽象方法只需声明，而不需实现</li></ul><h2 id="2-final关键字"><a href="#2-final关键字" class="headerlink" title="2.final关键字"></a>2.final关键字</h2><ul><li>final的变量值不能够被改变<ul><li>final的成员变量</li><li>final的局部变量</li></ul></li><li>final的方法不能够被重写</li><li>final的类不能够被继承</li></ul><h2 id="3-接口"><a href="#3-接口" class="headerlink" title="3.接口"></a>3.接口</h2><ul><li>接口是抽象方法和常量值的定义的集合</li><li><p>从本质上将，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现</p></li><li><p>接口特性</p><ul><li>接口可以多重实现：</li><li>接口中声明的属性默认为public static final 的，也只能是public static final的</li><li>接口中只能定义抽象方法，而且这些方法默认为public的，也只能是public的</li><li>接口可以继承其他的接口，并添加新的属性和抽象方法</li></ul></li><li>多个无关的类可以实现同一个接口</li><li>一个类可以实现多个无关的接口</li><li>与继承关系类似，接口与实现类之间存在多态性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java中定义接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JavaInterfaces</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-异常的概念"><a href="#4-异常的概念" class="headerlink" title="4.异常的概念"></a>4.异常的概念</h2><p><img src="http://img.smallmartial.cn/1556440216844.png" alt="1556440216844"></p><blockquote><p>异常分类图</p></blockquote><p><img src="http://img.smallmartial.cn/1556442724711.png" alt="1556442724711"></p><ul><li>Error:称为错误，由java虚拟机产生并抛出，包括动态链接失败，虚拟机报错等，程序对其不做处理。</li><li>Exception:所有异常类的父类，其子类对应了各种各样可能出现的异常事件，一般需要用户显示的声明或者捕获（如IOException）</li><li>Runtime Exception: 特殊的异常，系统自动检测并交由他们的缺省的异常程序处理。</li></ul><blockquote><p>异常捕获处理</p></blockquote><p><img src="http://img.smallmartial.cn/1556441486621.png" alt="1556441486621"></p><p><img src="http://img.smallmartial.cn/1556442808822.png" alt="1556442808822"></p><blockquote><p>使用自定义的异常</p></blockquote><ul><li>通过继承java.lang.Exception类声明自己的异常类</li><li>在方法适当的位置生成自定义异常的实例，并用throw语句抛出</li><li>在方法的声明部分用throws语句声明该方法可能抛出的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的一个异常类MyException，且是从Exception类继承而来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常类的构造方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);<span class="comment">//调用父类Exception的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取异常的代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>声明并抛出异常</p></blockquote><ul><li>重写方法需要抛出与原方法所抛出的异常类型一致的异常或者不抛出</li></ul><p><img src="http://img.smallmartial.cn/1556443036878.png" alt="1556443036878"></p><blockquote><p>异常处理总结</p></blockquote><p><img src="http://img.smallmartial.cn/1556443148687.png" alt="1556443148687"></p><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h2><blockquote><p>数据基本概念</p></blockquote><ul><li>数组可以看成是多个相同类型数据组合，对这些数据的统一管理。</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</li><li>数组的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>C和C++中的数组都可以分配在栈上面，而JAVA中的数组是只能分配在堆上面的，因为JAVA中的数组是引用类型。</li></ul><blockquote><p>一维数组</p></blockquote><p>一维数组的声明方式有2种：</p><ul><li>格式一：数组元素类型  数组名[ ];  即type var[ ];</li><li>格式二：数组元素类型[ ] 数组名; 即type[ ] var;</li><li>格式二声明数组的方法与C#上声明一维数组的方法一样。</li></ul><p>例如：int a1[ ];   int[ ] a2;</p><p>​       double b[ ];</p><p>​       person[ ] p1;  String s1[ ];</p><p><strong>注意JAVA语言中声明数组时不能指定其长度</strong>(数组中的元素个数）</p><p>​       如：int a[5]; 这样声明一维数组是非法的。</p><blockquote><p>元素为引用类型的数据</p></blockquote><p><code>注意: 元素为引用数据类型的数组中的每一个元素都需要实例化</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year; <span class="keyword">int</span> month; <span class="keyword">int</span> day;</span><br><span class="line">    Date(<span class="keyword">int</span> y, <span class="keyword">int</span> m ,<span class="keyword">int</span> d )&#123;</span><br><span class="line">        year = y;</span><br><span class="line">        month = m;</span><br><span class="line">        day = d ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.smallmartial.cn/1556443878997.png" alt="1556443878997"></p><blockquote><p>数组初始化</p></blockquote><ul><li>动态初始化，数组定义与数组元素分配空间和赋值的操作分开进行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[ ];  <span class="comment">//定义数组，即声明一个int类型的数组a[ ]</span></span><br><span class="line">    a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];  <span class="comment">//给数组元素分配内存空间。</span></span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">3</span>; a[<span class="number">1</span>]=<span class="number">9</span>; a[<span class="number">2</span>]=<span class="number">8</span>;  <span class="comment">//给数组元素赋值。</span></span><br><span class="line">    Date days[ ];</span><br><span class="line">    days=<span class="keyword">new</span> Date[<span class="number">3</span>];</span><br><span class="line">    days[<span class="number">0</span>]=<span class="keyword">new</span> Date(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2004</span>);</span><br><span class="line">    days[<span class="number">1</span>]=<span class="keyword">new</span> Date(<span class="number">2</span>, <span class="number">4</span>, <span class="number">2004</span>);</span><br><span class="line">    days[<span class="number">2</span>]=<span class="keyword">new</span> Date(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2004</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year, month, day;</span><br><span class="line">    Date(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)&#123;</span><br><span class="line">        year = y ;</span><br><span class="line">        month = m ;</span><br><span class="line">        day = d ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组元素的引用</p></blockquote><ul><li><p>定义并用运算符new为之分配内存空间后，才可以引用数组中的每个元素，数组元素的引用方式为：<strong>arrayName[index]，</strong> index为数组元素下标，可以是整型常量或整型表达式。如a[3], b[i], c[6*i]。</p></li><li><p>数组元素下标从0开始；长度为n的数组的合法下标取值范围为0 ～ n—1。</p></li><li><p>每个数组都有一个属性length指明它的长度，例如：a.length的值为数组a的长度(元素个数)。</p></li></ul><blockquote><p>二维数组</p></blockquote><p><img src="http://img.smallmartial.cn/1556448675260.png" alt="1556448675260"></p><p><img src="http://img.smallmartial.cn/1556448834542.png" alt="1556448834542"></p><blockquote><p>理解java中各个维度的数据模型</p></blockquote><p><img src="http://img.smallmartial.cn/1556449453947.png" alt="1556449453947"></p><h2 id="6-String-类"><a href="#6-String-类" class="headerlink" title="6.String 类"></a>6.String 类</h2><ul><li><p>java.lang.String类代表<code>不可变</code>的字符序列</p></li><li><p>“xxx”为该类的一个对象</p></li><li><p>String类常见的构造方法</p><p><img src="http://img.smallmartial.cn/1556450066957.png" alt="1556450066957"></p></li></ul><blockquote><p>静态重载方法:valueOf 可以将基本类型转换为字符类型</p></blockquote><p><img src="http://img.smallmartial.cn/1556450845308.png" alt="1556450845308"></p><h2 id="6-StringBuffer类"><a href="#6-StringBuffer类" class="headerlink" title="6.StringBuffer类"></a>6.StringBuffer类</h2><ul><li><p>java.lang.StringBuffer代表可变的字符序列</p></li><li><p>StringBuffer和String类似，但是StringBuffer可以对其字符串进行改变</p></li><li><p>常见的构造方法</p><p><img src="http://img.smallmartial.cn/1556451418039.png" alt="1556451418039"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    StringBuffer sBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">"菜鸟教程官网："</span>);</span><br><span class="line">    sBuffer.append(<span class="string">"www"</span>);</span><br><span class="line">    sBuffer.append(<span class="string">".smallmartial"</span>);</span><br><span class="line">    sBuffer.append(<span class="string">".cn"</span>);</span><br><span class="line">    System.out.println(sBuffer);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Math类"><a href="#7-Math类" class="headerlink" title="7. Math类"></a>7. Math类</h2><p><img src="http://img.smallmartial.cn/1556451978671.png" alt="1556451978671"></p><h2 id="8-File类"><a href="#8-File类" class="headerlink" title="8.File类"></a>8.File类</h2><p><img src="http://img.smallmartial.cn/1556452093681.png" alt="1556452093681"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/A"</span>);</span><br><span class="line">        System.out.println(f.getName());</span><br><span class="line">        tree(f,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tree</span><span class="params">(File f,<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        String preStr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++ )&#123;</span><br><span class="line">            preStr +=<span class="string">"    "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        File[] childs = f.listFiles()；</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;childs.length;i++)&#123;</span><br><span class="line">            System.out.println(preStr + Childs[i].getName());</span><br><span class="line">            <span class="keyword">if</span>(childs[i].isDirectory())&#123;</span><br><span class="line">                tree(childs[i],level + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-Enum类型"><a href="#9-Enum类型" class="headerlink" title="9.Enum类型"></a>9.Enum类型</h2><ul><li>只能够取特定的值的一个</li><li>使用enum关键字</li><li>是java.lang.Enum类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnum</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> MyColor&#123; red, green ,blue&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyColor m = MyColor.red;</span><br><span class="line">        <span class="keyword">switch</span> (m) &#123;</span><br><span class="line">            <span class="keyword">case</span> red:</span><br><span class="line">                System.out.println(<span class="string">"red"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> green:   </span><br><span class="line">                System.out.println(<span class="string">"green"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> blue:</span><br><span class="line">                System.out.println(<span class="string">"blue"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础知识学习（三）&quot;&gt;&lt;a href=&quot;#Java基础知识学习（三）&quot; class=&quot;headerlink&quot; title=&quot;Java基础知识学习（三）&quot;&gt;&lt;/a&gt;Java基础知识学习（三）&lt;/h1&gt;&lt;h2 id=&quot;1-抽象类&quot;&gt;&lt;a href=&quot;#1-抽象
      
    
    </summary>
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识点（二）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/28/java-3/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/28/java-3/</id>
    <published>2019-04-28T05:31:17.000Z</published>
    <updated>2019-04-28T05:39:54.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-方法的重写"><a href="#1-方法的重写" class="headerlink" title="1.方法的重写"></a>1.方法的重写</h2><ul><li>在子类中可以根据需求对基类中继承的方法进行重写</li><li>重写方法必须和被重写方法具有相同的方法名称，参数列表和返回类型</li><li>重写方法不能使用比被重写方法更严格的访问权限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Name is:"</span>+name+<span class="string">",Age is "</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Name is:"</span>+getName()+<span class="string">",Age is "</span>+getAge()+<span class="string">",School is:"</span>+school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverRide</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setAge(<span class="number">1000</span>);</span><br><span class="line">        person.setName(<span class="string">"lili"</span>);</span><br><span class="line">        </span><br><span class="line">        student.setAge(<span class="number">23</span>);</span><br><span class="line">        student.setName(<span class="string">"vic"</span>);</span><br><span class="line">        student.setSchool(<span class="string">"shnu"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(person.getInfo());</span><br><span class="line">        System.out.println(student.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-super关键字"><a href="#2-super关键字" class="headerlink" title="2.super关键字"></a>2.super关键字</h2><ul><li>在java中使用<code>super</code>来引用基类的成分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"动物可以移动"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.move(); <span class="comment">// 应用super类的方法</span></span><br><span class="line">      System.out.println(<span class="string">"狗可以跑和走"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line">      b.move(); <span class="comment">//执行 Dog类的方法</span></span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-继承中的构造方法"><a href="#3-继承中的构造方法" class="headerlink" title="3.继承中的构造方法"></a>3.继承中的构造方法</h2><ul><li>子类的构造的过程中必须使用其基类的构造方法</li><li>子类可以在自己的构造方法中使用super调用其基本的构造方法<ul><li>使用this调用本类中的另外构造方法</li><li>如果调用super,必须写在子类构造方法的第一行</li></ul></li><li>如果子类的构造方法中没有显示的调用基类的构造方法，则系统默认调用的基类无参数的构造方法</li><li>如果子类的构造方法中既没有显示的调用基类的构造方法，而基类中又没有无参的构造方法，则编译出错</li></ul><h2 id="4-Object类"><a href="#4-Object类" class="headerlink" title="4.Object类"></a>4.Object类</h2><ul><li>Object类是所有java类的根基类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-toString方法"><a href="#5-toString方法" class="headerlink" title="5.toString方法"></a>5.toString方法</h2><ul><li>Object类中定义有<code>public String toString()的方法，其返回值是String类型，描述当前对象的有关信息</code></li><li>在进行String与其他类型连接操作时，将自动调用该对象类的toString方法。</li><li>可以根据需要在用户自定义类中重写toString()方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">      Dog d = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line">      System.out.println(<span class="string">"d:="</span>+d);</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对toString方法进行重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"I'm a cool Dog"</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-equals方法"><a href="#6-equals方法" class="headerlink" title="6.equals方法"></a>6.equals方法</h2><ul><li><code>public boolean equals(Object object)</code>方法，提供定义对象是否相等的逻辑。</li><li>Object的equals方法定义为：x.equals(y)当x和y是同一个对象时应该返回true,否则返回false.</li><li>可以根据需要在用户自定义的类型中重写equals方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEquals</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       Cat c1 = <span class="keyword">new</span> Cat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">       Cat c2 = <span class="keyword">new</span> Cat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">       System.out.println(c1.equals(c2));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">int</span> color ,<span class="keyword">int</span> height, <span class="keyword">int</span> weight)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>,weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> cat)&#123;</span><br><span class="line">                Cat c = (Cat) obj;</span><br><span class="line">                <span class="keyword">if</span>(c.color == <span class="keyword">this</span>.color &amp;&amp;c.height == <span class="keyword">this</span>.height &amp;&amp; c.weight == <span class="keyword">this</span>.weight)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-对象转型（casting）"><a href="#7-对象转型（casting）" class="headerlink" title="7.对象转型（casting）"></a>7.对象转型（casting）</h2><ul><li>一个基类的引用类型变量可以指向其子类的对象</li><li>一个基类的引用不可以访问其子类对象新增的成员（属性和方法）</li><li>可以使用引用变量instanceof类名来判断引用型变量所指向的对象是否属于该类或者该类的子类。</li><li>子类的对象可以当作基类的对象来使用称作为向上转型，反之称作为向下转型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类Animal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gacl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类Cat继承Animal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gacl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cat添加自己独有的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String eyeColor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String n, String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(n);<span class="comment">//调用父类Animal的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.eyeColor = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类Dog继承Animal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gacl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Dog类添加自己特有的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String furColor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(n);<span class="comment">//调用父类Animal的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.furColor = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面是这三个类的测试程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gacl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassCast</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(<span class="string">"name"</span>);</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat(<span class="string">"catname"</span>,<span class="string">"blue"</span>);</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="string">"dogname"</span>, <span class="string">"black"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * a instanceof Animal这句话的意思是a是一只动物吗？</span></span><br><span class="line"><span class="comment">         * a是Animal这个类里面的是一个实例对象，所以a当然是一只动物，其结果为true。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"a instanceof Animal的结果是%s"</span>,a <span class="keyword">instanceof</span> Animal));<span class="comment">//true</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * c是Cat类的实例对象的引用，即c代表的就是这个实例对象，</span></span><br><span class="line"><span class="comment">         * 所以“c是一只动物”打印出来的结果也是true。</span></span><br><span class="line"><span class="comment">         * d也一样，所以“d是一只动物”打印出来的结果也是true。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"c instanceof Animal的结果是%s"</span>,c <span class="keyword">instanceof</span> Animal));<span class="comment">//true</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"d instanceof Animal的结果是%s"</span>,d <span class="keyword">instanceof</span> Animal));<span class="comment">//true</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里判断说“动物是一只猫”，不符合逻辑，所以打印出来的结果是false。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"a instanceof Cat的结果是%s"</span>,a <span class="keyword">instanceof</span> Cat));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这句话比较有意思了，a本身是Animal类的实例对象的引用，</span></span><br><span class="line"><span class="comment">         * 但现在这个引用不指向Animal类的实例对象了，而是指向了Dog这个类的一个实例对象了，</span></span><br><span class="line"><span class="comment">         * 这里也就是父类对象的引用指向了子类的一个实例对象。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        a = <span class="keyword">new</span> Dog(<span class="string">"bigyellow"</span>, <span class="string">"yellow"</span>);</span><br><span class="line">        System.out.println(a.name);<span class="comment">//bigyellow</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里的furColor属性是子类在继承父类的基础上新增加的一个属性，是父类没有的。</span></span><br><span class="line"><span class="comment">         * 因此这里使用父类的引用对象a去访问子类对象里面新增加的成员变量是不允许的，</span></span><br><span class="line"><span class="comment">         * 因为在编译器眼里，你a就是Animal类对象的一个引用对象，你只能去访问Animal类对象里面所具有的name属性，</span></span><br><span class="line"><span class="comment">         * 除了Animal类里面的属性可以访问以外，其它类里面的成员变量a都没办法访问。</span></span><br><span class="line"><span class="comment">         * 这里furColor属性是Dog类里面的属性，因此你一个Animal类的引用是无法去访问Dog类里面的成员变量的，</span></span><br><span class="line"><span class="comment">         * 尽管你a指向的是子类Dog的一个实例对象，但因为子类Dog从父类Animal继承下来，</span></span><br><span class="line"><span class="comment">         * 所以new出一个子类对象的时候，这个子类对象里面会包含有一个父类对象，</span></span><br><span class="line"><span class="comment">         * 因此这个a指向的正是这个子类对象里面的父类对象，因此尽管a是指向Dog类对象的一个引用，</span></span><br><span class="line"><span class="comment">         * 但是在编译器眼里你a就是只是一个Animal类的引用对象，你a就是只能访问Animal类里面所具有的成员变量，</span></span><br><span class="line"><span class="comment">         * 别的你都访问不了。</span></span><br><span class="line"><span class="comment">         * 因此一个父类(基类)对象的引用是不可以访问其子类对象新增加的成员(属性和方法)的。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//System.out.println(a.furColor);</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"a指向了Dog，a instanceof Animal的结果是%s"</span>,a <span class="keyword">instanceof</span> Animal));<span class="comment">//true</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里判断说“a是一只Dog”是true。</span></span><br><span class="line"><span class="comment">         * 因为instanceof探索的是实际当中你整个对象到底是什么东西，</span></span><br><span class="line"><span class="comment">         * 并不是根据你的引用把对象看出什么样来判断的。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"a instanceof Dog的结果是%s"</span>,a <span class="keyword">instanceof</span> Dog));<span class="comment">//true</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里使用强制转换，把指向Animal类的引用对象a转型成指向Dog类对象的引用，</span></span><br><span class="line"><span class="comment">         * 这样转型后的引用对象d1就可以直接访问Dog类对象里面的新增的成员了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Dog d1 = (Dog)a;</span><br><span class="line">        System.out.println(d1.furColor);<span class="comment">//yellow</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存模型<img src="http://img.smallmartial.cn/001.PNG" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassCast</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">f</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        System.out.println(a.name);</span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">            Cat cat = (Cat)a;</span><br><span class="line">            System.out.println(cat.eyeColor+<span class="string">" eye"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            Dog dog = (Dog)a;</span><br><span class="line">            System.out.println(dog.furColor+<span class="string">" fur"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(<span class="string">"name"</span>);</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat(<span class="string">"catname"</span>,<span class="string">"blue"</span>);</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="string">"dogname"</span>, <span class="string">"black"</span>);</span><br><span class="line">        TestClassCast testClassCast = <span class="keyword">new</span> TestClassCast();</span><br><span class="line">        testClassCast.f(a);</span><br><span class="line">        testClassCast.f(c);</span><br><span class="line">        testClassCast.f(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>对象转型可以使父类对象的引用可以指向子类对象，给程序带来了比较好的可扩展性：我们可以在一个方法的参数里面定义父类的引用，然后实际当中传的时候传的是子类的对象，然后我们再在方法里面判断这个传过来的子类对象到底属于哪个子类，然后再去执行这个子类里面的方法或者调用这个子类里面的成员变量，因此程序的可扩展性比单独定义好多个方法要好一些。</strong>不过这个可扩展性还没有达到最好，使用多态就可以让程序的扩展性达到极致。</p></blockquote><h2 id="8-多态和动态绑定"><a href="#8-多态和动态绑定" class="headerlink" title="8.多态和动态绑定"></a>8.多态和动态绑定</h2><ul><li>动态绑定是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法</li><li>多态3个必要条件<ul><li>要用继承</li><li>要有重写</li><li>父类引用指向子类对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy.summary;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    Animal(String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enjoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物的叫声……"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String eyesColor;</span><br><span class="line"></span><br><span class="line">    Cat(String n, String c) &#123;</span><br><span class="line">        <span class="keyword">super</span>(n);</span><br><span class="line">        eyesColor = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enjoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我养的猫高兴地叫了一声……"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String furColor;</span><br><span class="line"></span><br><span class="line">    Dog(String n, String c) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(n);</span><br><span class="line">        furColor = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enjoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我养的狗高兴地叫了一声……"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Bird() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"bird"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enjoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我养的鸟高兴地叫了一声……"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lady</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Animal pet;</span><br><span class="line"></span><br><span class="line">    Lady(String name, Animal pet) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pet = pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPetEnjoy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pet.enjoy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPolymoph</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat(<span class="string">"Catname"</span>, <span class="string">"blue"</span>);</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="string">"Dogname"</span>, <span class="string">"black"</span>);</span><br><span class="line">        Bird b = <span class="keyword">new</span> Bird();</span><br><span class="line"></span><br><span class="line">        Lady l1 = <span class="keyword">new</span> Lady(<span class="string">"l1"</span>, c);</span><br><span class="line">        Lady l2 = <span class="keyword">new</span> Lady(<span class="string">"l2"</span>, d);</span><br><span class="line">        Lady l3 = <span class="keyword">new</span> Lady(<span class="string">"l3"</span>, b);</span><br><span class="line"></span><br><span class="line">        l1.myPetEnjoy();</span><br><span class="line">        l2.myPetEnjoy();</span><br><span class="line">        l3.myPetEnjoy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>图解多态</p></blockquote><p>　首先从main方法的第一句话开始分析：Cat c = new Cat(“Catname”,”blue”);</p><p><img src="http://img.smallmartial.cn/002.PNG" alt></p><p>接着看这句话：Lady l1 = new Lady(“l1”,c);</p><p><img src="http://img.smallmartial.cn//1556423737940.png" alt></p><blockquote><p>动态绑定是面向对象的核心，如果没有动态绑定，那么面向对象绝对不可能发展得像现在这么流行，所以动态绑定是面向对象核心中的核心</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-方法的重写&quot;&gt;&lt;a href=&quot;#1-方法的重写&quot; class=&quot;headerlink&quot; title=&quot;1.方法的重写&quot;&gt;&lt;/a&gt;1.方法的重写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在子类中可以根据需求对基类中继承的方法进行重写&lt;/li&gt;
&lt;li&gt;重写方法必须和被重写方
      
    
    </summary>
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础知识点学习（一）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/28/java-2/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/28/java-2/</id>
    <published>2019-04-28T05:27:00.000Z</published>
    <updated>2019-04-28T05:30:59.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java面向对象基本概念-引用"><a href="#1-Java面向对象基本概念-引用" class="headerlink" title="1. Java面向对象基本概念 - 引用"></a>1. Java面向对象基本概念 - 引用</h2><ul><li><p>java 语言中除基本类型之外的变量类型都称之为引用类型。</p></li><li><p>java中的对象通常通过引用其操作的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明了一个String类型的引用变量，但是并没有指向对象</span></span><br><span class="line">String  s;</span><br><span class="line"><span class="comment">//使用new语句创建一个String类型的对象,并用s指向他，以后可以通过s完成对其操作</span></span><br><span class="line"> s = <span class="keyword">new</span> String(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-如何区分类和对象"><a href="#2-如何区分类和对象" class="headerlink" title="2.如何区分类和对象"></a>2.如何区分类和对象</h2><ul><li>类是静态的概念</li><li>对象是new出来的，位于堆内存，类的每个成员变量在不同的 对象中都有不同的值，而方法只有一份，执行时才占用。</li></ul><h2 id="3-递归调用"><a href="#3-递归调用" class="headerlink" title="3.递归调用"></a>3.递归调用</h2><blockquote><p>斐波那契数列指的是这样一个数列 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368。</p><p>公式： f1= 1,f2=1. fn=f(n-1)+f(n-2)</p><p>这个数列从第3项开始，每一项都等于前两项之和。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testFibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> test3(n-<span class="number">1</span>) + test3(n-<span class="number">2</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>递归调用示例图：</p><p><img src="http://img.smallmartial.cn/1556332700135.png" alt="1556332700135"></p><h2 id="4-方法重载"><a href="#4-方法重载" class="headerlink" title="4.方法重载"></a>4.方法重载</h2><p>方法的重载是指一个类中可以定义相同的名字，但是参数不同的多个方法。调用时，会根据不同的参数选择对应的方法。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">(String t)</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"hello"</span>+ t);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">        d.info();</span><br><span class="line">        d.info(<span class="string">"smallmartial"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-this关键字"><a href="#5-this关键字" class="headerlink" title="5.this关键字"></a>5.this关键字</h2><ul><li>在类的方法定义中使用this关键字代表使用该方法的对象的引用。</li><li>当必须指出使用当前使用方法的对象是谁时要使用this</li><li>有时可以用this处理方法中的成员变量和参数的重名</li><li>this可以看作是一个变量，他的值是当前对象的引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Leaf(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Leaf <span class="title">increament</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"i"</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    Leaf leaf = <span class="keyword">new</span> Leaf(<span class="number">100</span>);</span><br><span class="line">        leaf.increament().increament().print();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//result： 102</span></span><br></pre></td></tr></table></figure><h2 id="6-static关键字"><a href="#6-static关键字" class="headerlink" title="6.static关键字"></a>6.static关键字</h2><ul><li>在类中，用static声明的成员变量为静态成员方法变量，它为该类的公用变量，在第一使用时被初始化，对于该类的对象，static成员变量只用一份。</li><li>用static 声明的方法为静态方法，在调用时，不会将对象的引用传递给它，所以在static方法中不可以访问非static方法。</li><li>可以通过对象引用或者类名，访问静态成员。</li></ul><h2 id="7-类的继承"><a href="#7-类的继承" class="headerlink" title="7.类的继承"></a>7.类的继承</h2><ul><li><p>Java通过 extends关键字实现类的继承</p></li><li><p>通过继承子类自动拥有基类的所有成员变量</p></li><li><p>java只支持单继承,不允许多继承。</p></li><li><p>一个子类只能有一个基类，一个基类可以派生多个子类</p><blockquote><p>父类</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123; </span><br><span class="line">        name = myName; </span><br><span class="line">        id = myid;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">"正在吃"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"正在睡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"大家好！我是"</span>         + id + <span class="string">"号"</span> + name + <span class="string">"."</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 子类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Penguin</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(myName, myid); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(myName, myid); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-访问控制"><a href="#8-访问控制" class="headerlink" title="8.访问控制"></a>8.访问控制</h2><p><img src="http://img.smallmartial.cn/1556367386217.png" alt="1556367386217"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Java面向对象基本概念-引用&quot;&gt;&lt;a href=&quot;#1-Java面向对象基本概念-引用&quot; class=&quot;headerlink&quot; title=&quot;1. Java面向对象基本概念 - 引用&quot;&gt;&lt;/a&gt;1. Java面向对象基本概念 - 引用&lt;/h2&gt;&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/categories/java/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记二十六-购物车（二）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/27/lyshop-27/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/27/lyshop-27/</id>
    <published>2019-04-27T00:36:09.000Z</published>
    <updated>2019-04-27T00:50:56.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-已登录购物车"><a href="#4-已登录购物车" class="headerlink" title="4.已登录购物车"></a>4.已登录购物车</h1><p>接下来，我们完成已登录购物车。</p><p>在刚才的未登录购物车编写时，我们已经预留好了编写代码的位置，逻辑也基本一致。</p><h2 id="4-1-添加登录校验"><a href="#4-1-添加登录校验" class="headerlink" title="4.1.添加登录校验"></a>4.1.添加登录校验</h2><p>购物车系统只负责登录状态的购物车处理，因此需要添加登录校验，我们通过JWT鉴权即可实现。</p><h3 id="4-1-1-引入JWT相关依赖"><a href="#4-1-1-引入JWT相关依赖" class="headerlink" title="4.1.1.引入JWT相关依赖"></a>4.1.1.引入JWT相关依赖</h3><p>我们引入之前写的鉴权工具：<code>ly-auth-common</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-2-配置公钥"><a href="#4-1-2-配置公钥" class="headerlink" title="4.1.2.配置公钥"></a>4.1.2.配置公钥</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line"><span class="attr">  jwt:</span></span><br><span class="line"><span class="attr">    pubKeyPath:</span> <span class="attr">E:/nginx/rsa/rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line"><span class="attr">    cookieName:</span> <span class="string">LY_TOKEN</span> <span class="comment"># cookie的名称</span></span><br></pre></td></tr></table></figure><h3 id="4-1-3-加载公钥"><a href="#4-1-3-加载公钥" class="headerlink" title="4.1.3.加载公钥"></a>4.1.3.加载公钥</h3><p> <img src="http://img.smallmartial.cn/1527775416855.png" alt="image"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cookieName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtProperties.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取公钥和私钥</span></span><br><span class="line">            <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"初始化公钥失败！"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPubKeyPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pubKeyPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPubKeyPath</span><span class="params">(String pubKeyPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pubKeyPath = pubKeyPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PublicKey <span class="title">getPublicKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublicKey</span><span class="params">(PublicKey publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publicKey = publicKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCookieName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cookieName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCookieName</span><span class="params">(String cookieName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cookieName = cookieName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-4-编写过滤器"><a href="#4-1-4-编写过滤器" class="headerlink" title="4.1.4.编写过滤器"></a>4.1.4.编写过滤器</h3><p>因为很多接口都需要进行登录，我们直接编写SpringMVC拦截器，进行统一登录校验。同时，我们还要把解析得到的用户信息保存起来，以便后续的接口可以使用。</p><p> <img src="http://img.smallmartial.cn/1527775487311.png" alt="image"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个线程域，存放登录用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserInfo&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginInterceptor</span><span class="params">(JwtProperties jwtProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jwtProperties = jwtProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 查询token</span></span><br><span class="line">        String token = CookieUtils.getCookieValue(request, <span class="string">"LY_TOKEN"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 未登录,返回401</span></span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有token，查询用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析成功，证明已经登录</span></span><br><span class="line">            UserInfo user = JwtUtils.getInfoFromToken(token, jwtProperties.getPublicKey());</span><br><span class="line">            <span class="comment">// 放入线程域</span></span><br><span class="line">            tl.set(user);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 抛出异常，证明未登录,返回401</span></span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserInfo <span class="title">getLoginUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里我们使用了<code>ThreadLocal</code>来存储查询到的用户信息，线程内共享，因此请求到达<code>Controller</code>后可以共享User</li><li>并且对外提供了静态的方法：<code>getLoginUser()</code>来获取User信息</li></ul><h3 id="4-1-5-配置过滤器"><a href="#4-1-5-配置过滤器" class="headerlink" title="4.1.5.配置过滤器"></a>4.1.5.配置过滤器</h3><p>配置SpringMVC，使过滤器生效：</p><p> <img src="http://img.smallmartial.cn/1527775534467.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">loginInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor(jwtProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-后台购物车设计"><a href="#4-2-后台购物车设计" class="headerlink" title="4.2.后台购物车设计"></a>4.2.后台购物车设计</h2><h3 id="数据结构设计"><a href="#数据结构设计" class="headerlink" title="数据结构设计"></a>数据结构设计</h3><p>当用户登录时，我们需要把购物车数据保存到后台，可以选择保存在数据库。但是购物车是一个读写频率很高的数据。因此我们这里选择读写效率比较高的Redis作为购物车存储。</p><p>Redis有5种不同数据结构，这里选择哪一种比较合适呢？</p><ul><li>首先不同用户应该有独立的购物车，因此购物车应该以用户的作为key来存储，Value是用户的所有购物车信息。这样看来基本的<code>k-v</code>结构就可以了。</li><li>但是，我们对购物车中的商品进行增、删、改操作，基本都需要根据商品id进行判断，为了方便后期处理，我们的购物车也应该是<code>k-v</code>结构，key是商品id，value才是这个商品的购物车信息。</li></ul><p>综上所述，我们的购物车结构是一个双层Map：Map&lt;String,Map&lt;String,String&gt;&gt;</p><ul><li>第一层Map，Key是用户id</li><li>第二层Map，Key是购物车中商品id，值是购物车数据</li></ul><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long userId;<span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long skuId;<span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">private</span> String image;<span class="comment">// 图片</span></span><br><span class="line">    <span class="keyword">private</span> Long price;<span class="comment">// 加入购物车时的价格</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;<span class="comment">// 购买数量</span></span><br><span class="line">    <span class="keyword">private</span> String ownSpec;<span class="comment">// 商品规格参数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getSkuId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skuId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSkuId</span><span class="params">(Long skuId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.skuId = skuId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Long price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOwnSpec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ownSpec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOwnSpec</span><span class="params">(String ownSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ownSpec = ownSpec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-添加商品到购物车"><a href="#4-3-添加商品到购物车" class="headerlink" title="4.3.添加商品到购物车"></a>4.3.添加商品到购物车</h2><h3 id="4-3-1-页面发起请求："><a href="#4-3-1-页面发起请求：" class="headerlink" title="4.3.1.页面发起请求："></a>4.3.1.页面发起请求：</h3><p>已登录情况下，向后台添加购物车：</p><p> <img src="http://img.smallmartial.cn/1531047750029.png" alt="image"></p><p>这里发起的是Json请求。那么我们后台也要以json接收。</p><h3 id="4-3-2-后台添加购物车"><a href="#4-3-2-后台添加购物车" class="headerlink" title="4.3.2.后台添加购物车"></a>4.3.2.后台添加购物车</h3><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><p>先分析一下：</p><ul><li>请求方式：新增，肯定是Post</li><li>请求路径：/cart ，这个其实是Zuul路由的路径，我们可以不管</li><li>请求参数：Json对象，包含skuId和num属性</li><li>返回结果：无</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CartService cartService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加购物车</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addCart</span><span class="params">(@RequestBody Cart cart)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cartService.addCart(cart);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>这里我们不访问数据库，而是直接操作Redis。基本思路：</p><ul><li>先查询之前的购物车数据</li><li>判断要添加的商品是否存在<ul><li>存在：则直接修改数量后写回Redis</li><li>不存在：新建一条数据，然后写入Redis</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsClient goodsClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX = <span class="string">"ly:cart:uid:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CartService.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCart</span><span class="params">(Cart cart)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取登录用户</span></span><br><span class="line">        UserInfo user = LoginInterceptor.getLoginUser();</span><br><span class="line">        <span class="comment">// Redis的key</span></span><br><span class="line">        String key = KEY_PREFIX + user.getId();</span><br><span class="line">        <span class="comment">// 获取hash操作对象</span></span><br><span class="line">        BoundHashOperations&lt;String, Object, Object&gt; hashOps = <span class="keyword">this</span>.redisTemplate.boundHashOps(key);</span><br><span class="line">        <span class="comment">// 查询是否存在</span></span><br><span class="line">        Long skuId = cart.getSkuId();</span><br><span class="line">        Integer num = cart.getNum();</span><br><span class="line">        Boolean boo = hashOps.hasKey(skuId.toString());</span><br><span class="line">        <span class="keyword">if</span> (boo) &#123;</span><br><span class="line">            <span class="comment">// 存在，获取购物车数据</span></span><br><span class="line">            String json = hashOps.get(skuId.toString()).toString();</span><br><span class="line">            cart = JsonUtils.parse(json, Cart.class);</span><br><span class="line">            <span class="comment">// 修改购物车数量</span></span><br><span class="line">            cart.setNum(cart.getNum() + num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不存在，新增购物车数据</span></span><br><span class="line">            cart.setUserId(user.getId());</span><br><span class="line">            <span class="comment">// 其它商品信息， 需要查询商品服务</span></span><br><span class="line">            ResponseEntity&lt;Sku&gt; resp = <span class="keyword">this</span>.goodsClient.querySkuById(skuId);</span><br><span class="line">            <span class="keyword">if</span> (resp.getStatusCode() != HttpStatus.OK || !resp.hasBody()) &#123;</span><br><span class="line">                logger.error(<span class="string">"添加购物车的商品不存在：skuId:&#123;&#125;"</span>, skuId);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">            &#125;</span><br><span class="line">            Sku sku = resp.getBody();</span><br><span class="line">            cart.setImage(StringUtils.isBlank(sku.getImages()) ? <span class="string">""</span> : StringUtils.split(sku.getImages(), <span class="string">","</span>)[<span class="number">0</span>]);</span><br><span class="line">            cart.setPrice(sku.getPrice());</span><br><span class="line">            cart.setTitle(sku.getTitle());</span><br><span class="line">            cart.setOwnSpec(sku.getOwnSpec());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将购物车数据写入redis</span></span><br><span class="line">        hashOps.put(cart.getSkuId().toString(), JsonUtils.serialize(cart));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-结果："><a href="#4-3-3-结果：" class="headerlink" title="4.3.3.结果："></a>4.3.3.结果：</h3><p> <img src="http://img.smallmartial.cn/1527776569221.png" alt="image"></p><h2 id="4-4-查询购物车"><a href="#4-4-查询购物车" class="headerlink" title="4.4.查询购物车"></a>4.4.查询购物车</h2><h3 id="4-4-1-页面发起请求"><a href="#4-4-1-页面发起请求" class="headerlink" title="4.4.1.页面发起请求"></a>4.4.1.页面发起请求</h3><p><img src="http://img.smallmartial.cn/1527996579207.png" alt="image"></p><h3 id="4-4-2-后台实现"><a href="#4-4-2-后台实现" class="headerlink" title="4.4.2.后台实现"></a>4.4.2.后台实现</h3><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询购物车列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Cart&gt;&gt; queryCartList() &#123;</span><br><span class="line">    List&lt;Cart&gt; carts = <span class="keyword">this</span>.cartService.queryCartList();</span><br><span class="line">    <span class="keyword">if</span> (carts == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(carts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cart&gt; <span class="title">queryCartList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取登录用户</span></span><br><span class="line">        UserInfo user = LoginInterceptor.getLoginUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否存在购物车</span></span><br><span class="line">        String key = KEY_PREFIX + user.getId();</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.redisTemplate.hasKey(key))&#123;</span><br><span class="line">            <span class="comment">// 不存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BoundHashOperations&lt;String, Object, Object&gt; hashOps = <span class="keyword">this</span>.redisTemplate.boundHashOps(key);</span><br><span class="line">        List&lt;Object&gt; carts = hashOps.values();</span><br><span class="line">        <span class="comment">// 判断是否有数据</span></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(carts))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询购物车数据</span></span><br><span class="line">        <span class="keyword">return</span> carts.stream().map(o -&gt; JsonUtils.parse(o.toString(), Cart.class)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-3-测试"><a href="#4-4-3-测试" class="headerlink" title="4.4.3.测试"></a>4.4.3.测试</h3><p><img src="http://img.smallmartial.cn/1527776651321.png" alt="image"></p><h2 id="4-5-修改商品数量"><a href="#4-5-修改商品数量" class="headerlink" title="4.5.修改商品数量"></a>4.5.修改商品数量</h2><h3 id="4-5-1-页面发起请求"><a href="#4-5-1-页面发起请求" class="headerlink" title="4.5.1.页面发起请求"></a>4.5.1.页面发起请求</h3><p> <img src="http://img.smallmartial.cn/1527996642442.png" alt="image"></p><h3 id="4-5-2-后台实现"><a href="#4-5-2-后台实现" class="headerlink" title="4.5.2.后台实现"></a>4.5.2.后台实现</h3><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateNum</span><span class="params">(@RequestParam(<span class="string">"skuId"</span>)</span> Long skuId, </span></span><br><span class="line"><span class="function">                                      @<span class="title">RequestParam</span><span class="params">(<span class="string">"num"</span>)</span> Integer num) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cartService.updateNum(skuId, num);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNum</span><span class="params">(Long skuId, Integer num)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取登录用户</span></span><br><span class="line">    UserInfo user = LoginInterceptor.getLoginUser();</span><br><span class="line">    String key = KEY_PREFIX + user.getId();</span><br><span class="line">    BoundHashOperations&lt;String, Object, Object&gt; hashOps = <span class="keyword">this</span>.redisTemplate.boundHashOps(key);</span><br><span class="line">    <span class="comment">// 获取购物车</span></span><br><span class="line">    String json = hashOps.get(skuId.toString()).toString();</span><br><span class="line">    Cart cart = JsonUtils.parse(json, Cart.class);</span><br><span class="line">    cart.setNum(num);</span><br><span class="line">    <span class="comment">// 写入购物车</span></span><br><span class="line">    hashOps.put(skuId.toString(), JsonUtils.serialize(cart));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-删除购物车商品"><a href="#4-6-删除购物车商品" class="headerlink" title="4.6.删除购物车商品"></a>4.6.删除购物车商品</h2><h3 id="4-6-1-页面发起请求"><a href="#4-6-1-页面发起请求" class="headerlink" title="4.6.1.页面发起请求"></a>4.6.1.页面发起请求</h3><p> <img src="http://img.smallmartial.cn/1527997061283.png" alt="image"></p><p>注意：后台成功响应后，要把页面的购物车中数据也删除</p><h3 id="4-6-2-后台实现"><a href="#4-6-2-后台实现" class="headerlink" title="4.6.2.后台实现"></a>4.6.2.后台实现</h3><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"&#123;skuId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">deleteCart</span><span class="params">(@PathVariable(<span class="string">"skuId"</span>)</span> String skuId) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cartService.deleteCart(skuId);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCart</span><span class="params">(String skuId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取登录用户</span></span><br><span class="line">    UserInfo user = LoginInterceptor.getLoginUser();</span><br><span class="line">    String key = KEY_PREFIX + user.getId();</span><br><span class="line">    BoundHashOperations&lt;String, Object, Object&gt; hashOps = <span class="keyword">this</span>.redisTemplate.boundHashOps(key);</span><br><span class="line">    hashOps.delete(skuId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4-已登录购物车&quot;&gt;&lt;a href=&quot;#4-已登录购物车&quot; class=&quot;headerlink&quot; title=&quot;4.已登录购物车&quot;&gt;&lt;/a&gt;4.已登录购物车&lt;/h1&gt;&lt;p&gt;接下来，我们完成已登录购物车。&lt;/p&gt;
&lt;p&gt;在刚才的未登录购物车编写时，我们已经预留好了编
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记二十五-购物车（一）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/25/lyshop-26/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/25/lyshop-26/</id>
    <published>2019-04-25T13:11:46.000Z</published>
    <updated>2019-04-25T13:17:58.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-搭建购物车服务"><a href="#1-搭建购物车服务" class="headerlink" title="1.搭建购物车服务"></a>1.搭建购物车服务</h1><h2 id="1-1-创建module"><a href="#1-1-创建module" class="headerlink" title="1.1.创建module"></a>1.1.创建module</h2><p><img src="http://img.smallmartial.cn/1527581229991.png" alt="image"></p><p><img src="http://img.smallmartial.cn/1527581252153.png" alt="image"></p><h2 id="1-2-pom依赖"><a href="#1-2-pom依赖" class="headerlink" title="1.2.pom依赖"></a>1.2.pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-cart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-配置文件"><a href="#1-3-配置文件" class="headerlink" title="1.3.配置文件"></a>1.3.配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cart-service</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">    registry-fetch-interval-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;.$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="1-4-启动类"><a href="#1-4-启动类" class="headerlink" title="1.4.启动类"></a>1.4.启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyCartApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyCartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-购物车功能分析"><a href="#2-购物车功能分析" class="headerlink" title="2.购物车功能分析"></a>2.购物车功能分析</h1><h2 id="2-1-需求"><a href="#2-1-需求" class="headerlink" title="2.1.需求"></a>2.1.需求</h2><p>需求描述：</p><ul><li>用户可以在登录状态下将商品添加到购物车<ul><li>放入数据库</li><li>放入redis（采用）</li></ul></li><li>用户可以在未登录状态下将商品添加到购物车<ul><li>放入localstorage</li></ul></li><li>用户可以使用购物车一起结算下单</li><li>用户可以查询自己的购物车</li><li>用户可以在购物车中可以修改购买商品的数量。</li><li>用户可以在购物车中删除商品。</li><li>在购物车中展示商品优惠信息</li><li>提示购物车商品价格变化</li></ul><h2 id="2-2-流程图："><a href="#2-2-流程图：" class="headerlink" title="2.2.流程图："></a>2.2.流程图：</h2><p><img src="http://img.smallmartial.cn/1527585343248.png" alt="image"></p><p>这幅图主要描述了两个功能：新增商品到购物车、查询购物车。</p><p>新增商品：</p><ul><li>判断是否登录<ul><li>是：则添加商品到后台Redis中</li><li>否：则添加商品到本地的Localstorage</li></ul></li></ul><p>无论哪种新增，完成后都需要查询购物车列表：</p><ul><li>判断是否登录<ul><li>否：直接查询localstorage中数据并展示</li><li>是：已登录，则需要先看本地是否有数据，<ul><li>有：需要提交到后台添加到redis，合并数据，而后查询</li><li>否：直接去后台查询redis，而后返回</li></ul></li></ul></li></ul><h1 id="3-未登录购物车"><a href="#3-未登录购物车" class="headerlink" title="3.未登录购物车"></a>3.未登录购物车</h1><h2 id="3-1-准备"><a href="#3-1-准备" class="headerlink" title="3.1.准备"></a>3.1.准备</h2><h3 id="3-1-1购物车的数据结构"><a href="#3-1-1购物车的数据结构" class="headerlink" title="3.1.1购物车的数据结构"></a>3.1.1购物车的数据结构</h3><p>首先分析一下未登录购物车的数据结构。</p><p>我们看下页面展示需要什么数据：</p><p><img src="http://img.smallmartial.cn/1527737419294.png" alt="image"></p><p>因此每一个购物车信息，都是一个对象，包含：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    skuId:<span class="number">2131241</span>,</span><br><span class="line">    title:<span class="string">"小米6"</span>,</span><br><span class="line">    image:<span class="string">""</span>,</span><br><span class="line">    price:<span class="number">190000</span>,</span><br><span class="line">    num:<span class="number">1</span>,</span><br><span class="line">    ownSpec:<span class="string">"&#123;"</span>机身颜色<span class="string">":"</span>陶瓷黑尊享版<span class="string">","</span>内存<span class="string">":"</span><span class="number">6</span>GB<span class="string">","</span>机身存储<span class="string">":"</span><span class="number">128</span>GB<span class="string">"&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，购物车中不止一条数据，因此最终会是对象的数组。即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;...&#125;,&#123;...&#125;,&#123;...&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-1-2-web本地存储"><a href="#3-1-2-web本地存储" class="headerlink" title="3.1.2.web本地存储"></a>3.1.2.web本地存储</h3><p>知道了数据结构，下一个问题，就是如何保存购物车数据。前面我们分析过，可以使用Localstorage来实现。Localstorage是web本地存储的一种，那么，什么是web本地存储呢？</p><h4 id="什么是web本地存储？"><a href="#什么是web本地存储？" class="headerlink" title="什么是web本地存储？"></a>什么是web本地存储？</h4><p><img src="http://img.smallmartial.cn/1527587496457.png" alt="image"></p><p>web本地存储主要有两种方式：</p><ul><li>LocalStorage：localStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。 </li><li>SessionStorage：sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。 </li></ul><h4 id="LocalStorage的用法"><a href="#LocalStorage的用法" class="headerlink" title="LocalStorage的用法"></a>LocalStorage的用法</h4><p>语法非常简单：</p><p><img src="http://img.smallmartial.cn/1527587857321.png" alt="image"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"key"</span>,<span class="string">"value"</span>); <span class="comment">// 存储数据</span></span><br><span class="line">localStorage.getItem(<span class="string">"key"</span>); <span class="comment">// 获取数据</span></span><br><span class="line">localStorage.removeItem(<span class="string">"key"</span>); <span class="comment">// 删除数据</span></span><br></pre></td></tr></table></figure><p>注意：<strong>localStorage和SessionStorage都只能保存字符串</strong>。</p><p>不过，在我们的common.js中，已经对localStorage进行了简单的封装：</p><p><img src="http://img.smallmartial.cn/1527588011623.png" alt="image"></p><p>示例：</p><p><img src="http://img.smallmartial.cn/1527588112975.png" alt="image"></p><h3 id="3-1-3-获取num"><a href="#3-1-3-获取num" class="headerlink" title="3.1.3.获取num"></a>3.1.3.获取num</h3><p>添加购物车需要知道购物的数量，所以我们需要获取数量大小。我们在Vue中定义num，保存数量：</p><p><img src="http://img.smallmartial.cn/1527587062546.png" alt="image"></p><p>然后将num与页面的input框绑定，同时给<code>+</code>和<code>-</code>的按钮绑定事件：</p><p><img src="http://img.smallmartial.cn/1527587089359.png" alt="image"></p><p>编写事件：</p><p><img src="http://img.smallmartial.cn/1527587129305.png" alt="image"></p><h2 id="3-2-添加购物车"><a href="#3-2-添加购物车" class="headerlink" title="3.2.添加购物车"></a>3.2.添加购物车</h2><h3 id="3-2-1-点击事件"><a href="#3-2-1-点击事件" class="headerlink" title="3.2.1.点击事件"></a>3.2.1.点击事件</h3><p>我们看下商品详情页：</p><p><img src="http://img.smallmartial.cn/1527585864482.png" alt="image"></p><p>现在点击加入购物车会跳转到购物车成功页面。</p><p>不过我们不这么做，我们绑定点击事件，然后实现添加购物车功能。</p><p><img src="http://img.smallmartial.cn/1531038516311.png" alt="image"></p><p>addCart方法中判断用户的登录状态：</p><p><img src="http://img.smallmartial.cn/1531038689347.png" alt="image"></p><h3 id="3-2-2-获取数量，添加购物车"><a href="#3-2-2-获取数量，添加购物车" class="headerlink" title="3.2.2.获取数量，添加购物车"></a>3.2.2.获取数量，添加购物车</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">addCart()&#123;</span><br><span class="line">    <span class="comment">// 判断登录状态</span></span><br><span class="line">    ly.http.get(<span class="string">"/auth/verify"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 未登录，添加到localstorage</span></span><br><span class="line">        <span class="comment">// 1、查询本地购物车</span></span><br><span class="line">        <span class="keyword">const</span> carts = ly.store.get(<span class="string">"carts"</span>) || [];</span><br><span class="line">        <span class="keyword">let</span> cart = carts.find(<span class="function"><span class="params">c</span> =&gt;</span> c.skuId === <span class="keyword">this</span>.sku.id);</span><br><span class="line">        <span class="comment">// 2、判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(cart)&#123;</span><br><span class="line">            <span class="comment">// 3、存在，改数量</span></span><br><span class="line">            cart.num += <span class="keyword">this</span>.num;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 4、不存在，新增</span></span><br><span class="line">            cart = &#123;</span><br><span class="line">                skuId: <span class="keyword">this</span>.sku.id,</span><br><span class="line">                title: <span class="keyword">this</span>.sku.title,</span><br><span class="line">                image: <span class="keyword">this</span>.images[<span class="number">0</span>],</span><br><span class="line">                price: <span class="keyword">this</span>.sku.price,</span><br><span class="line">                num: <span class="keyword">this</span>.num,</span><br><span class="line">                ownSpec: <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.ownSpec)</span><br><span class="line">            &#125;;</span><br><span class="line">            carts.push(cart);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把carts写回localstorage</span></span><br><span class="line">        ly.store.set(<span class="string">"carts"</span>, carts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转</span></span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">"http://www.leyou.com/cart.html"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="http://img.smallmartial.cn/1527751315890.png" alt="image"></p><p>添加完成后，页面会跳转到购物车结算页面：cart.html</p><h2 id="3-3-查询购物车"><a href="#3-3-查询购物车" class="headerlink" title="3.3.查询购物车"></a>3.3.查询购物车</h2><h3 id="3-3-1-校验用户登录"><a href="#3-3-1-校验用户登录" class="headerlink" title="3.3.1.校验用户登录"></a>3.3.1.校验用户登录</h3><p>因为会多次校验用户登录状态，因此我们封装一个校验的方法：</p><p>在common.js中：</p><p><img src="http://img.smallmartial.cn/1531047520954.png" alt="image"></p><h3 id="3-3-2-查询购物车"><a href="#3-3-2-查询购物车" class="headerlink" title="3.3.2.查询购物车"></a>3.3.2.查询购物车</h3><p>页面加载时，就应该去查询购物车。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cartVm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#cartApp"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        ly,</span><br><span class="line">        carts: [],<span class="comment">// 购物车数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="keyword">this</span>.loadCarts();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        loadCarts() &#123;</span><br><span class="line">            <span class="comment">// 先判断登录状态</span></span><br><span class="line">            ly.verifyUser()</span><br><span class="line">                .then(() =&gt; &#123;</span><br><span class="line">                    <span class="comment">// 已登录</span></span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="keyword">catch</span>(() =&gt; &#123;</span><br><span class="line">                    <span class="comment">// 未登录</span></span><br><span class="line">                    <span class="keyword">this</span>.carts = ly.store.get(<span class="string">"carts"</span>) || [];</span><br><span class="line">                    <span class="keyword">this</span>.selected = <span class="keyword">this</span>.carts;</span><br><span class="line">                &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    components: &#123;</span><br><span class="line">        shortcut: () =&gt; <span class="keyword">import</span>(<span class="string">"/js/pages/shortcut.js"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>刷新页面，查看控制台Vue实例：</p><p><img src="http://img.smallmartial.cn/1527751356132.png" alt="image"></p><h3 id="3-5-2-渲染到页面"><a href="#3-5-2-渲染到页面" class="headerlink" title="3.5.2.渲染到页面"></a>3.5.2.渲染到页面</h3><p>接下来，我们在页面中展示carts的数据：</p><p>页面位置：</p><p><img src="http://img.smallmartial.cn/1527751654885.png" alt="image"></p><p>修改后：</p><p><img src="http://img.smallmartial.cn/1527752408240.png" alt="image"></p><p>要注意，价格的展示需要进行格式化，这里使用的是我们在common.js中定义的formatPrice方法：</p><p><img src="http://img.smallmartial.cn/1527752958720.png" alt="image"></p><p>效果：</p><p><img src="http://img.smallmartial.cn/1527752760990.png" alt="image"></p><h2 id="3-6-修改数量"><a href="#3-6-修改数量" class="headerlink" title="3.6.修改数量"></a>3.6.修改数量</h2><p>我们给页面的 <code>+</code> 和 <code>-</code>绑定点击事件，修改num 的值：</p><p><img src="http://img.smallmartial.cn/1527753321438.png" alt="image"></p><p>两个事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">increment(c) &#123;</span><br><span class="line">    c.num++;</span><br><span class="line">    ly.verifyUser()</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// TODO 已登录，向后台发起请求</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 未登录，直接操作本地数据</span></span><br><span class="line">            ly.store.set(<span class="string">"carts"</span>, <span class="keyword">this</span>.carts);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">decrement(c) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c.num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    c.num--;</span><br><span class="line">    <span class="keyword">this</span>.verifyUser()</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 已登录，向后台发起请求</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 未登录，直接操作本地数据</span></span><br><span class="line">            ly.store.set(<span class="string">"carts"</span>, <span class="keyword">this</span>.carts);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-7-删除商品"><a href="#3-7-删除商品" class="headerlink" title="3.7.删除商品"></a>3.7.删除商品</h2><p>给删除按钮绑定事件：</p><p><img src="http://img.smallmartial.cn/1527753585131.png" alt="image"></p><p>点击事件中删除商品：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deleteCart(i) &#123;</span><br><span class="line">    <span class="keyword">this</span>.verifyUser()</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 已登录</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 未登录</span></span><br><span class="line">            <span class="keyword">this</span>.carts.splice(i, <span class="number">1</span>);</span><br><span class="line">            ly.store.set(<span class="string">"carts"</span>, <span class="keyword">this</span>.carts);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-选中商品"><a href="#3-8-选中商品" class="headerlink" title="3.8.选中商品"></a>3.8.选中商品</h2><p>在页面中，每个购物车商品左侧，都有一个复选框，用户可以选择部分商品进行下单，而不一定是全部：</p><p><img src="http://img.smallmartial.cn/1527754094904.png" alt="image"></p><p>我们定义一个变量，记录所有被选中的商品：</p><p><img src="http://img.smallmartial.cn/1527995779666.png" alt="image"></p><h3 id="3-8-1-选中一个"><a href="#3-8-1-选中一个" class="headerlink" title="3.8.1.选中一个"></a>3.8.1.选中一个</h3><p>我们给商品前面的复选框与selected绑定，并且指定其值为当前购物车商品：</p><p><img src="http://img.smallmartial.cn/1527755188422.png" alt="image"></p><h3 id="3-8-2-初始化全选"><a href="#3-8-2-初始化全选" class="headerlink" title="3.8.2.初始化全选"></a>3.8.2.初始化全选</h3><p>我们在加载完成购物车查询后，初始化全选：</p><p><img src="http://img.smallmartial.cn/1531047683252.png" alt="image"></p><h3 id="3-8-4-总价格"><a href="#3-8-4-总价格" class="headerlink" title="3.8.4.总价格"></a>3.8.4.总价格</h3><p>然后编写一个计算属性，计算出选中商品总价格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    totalPrice() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.selected.map(<span class="function"><span class="params">c</span> =&gt;</span> c.num * c.price).reduce(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> p1 + p2, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面中展示总价格：</p><p><img src="http://img.smallmartial.cn/1527756151806.png" alt="image"></p><p>效果：</p><p><img src="http://img.smallmartial.cn/1527756178405.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目标&quot;&gt;&lt;/a&gt;0.学习目标&lt;/h1&gt;&lt;h1 id=&quot;1-搭建购物车服务&quot;&gt;&lt;a href=&quot;#1-搭建购物车服务&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记二十四-授权中心（一）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/24/lyshop-25/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/24/lyshop-25/</id>
    <published>2019-04-24T11:32:48.000Z</published>
    <updated>2019-04-24T12:01:56.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-无状态登录原理"><a href="#1-无状态登录原理" class="headerlink" title="1.无状态登录原理"></a>1.无状态登录原理</h1><h2 id="1-1-什么是有状态？"><a href="#1-1-什么是有状态？" class="headerlink" title="1.1.什么是有状态？"></a>1.1.什么是有状态？</h2><p>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p><p>缺点是什么？</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，无法进行水平扩展</li><li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li></ul><h2 id="1-2-什么是无状态"><a href="#1-2-什么是无状态" class="headerlink" title="1.2.什么是无状态"></a>1.2.什么是无状态</h2><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li>服务端不保存任何客户端请求者信息</li><li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li></ul><p>带来的好处是什么呢？</p><ul><li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩</li><li>减小服务端存储压力</li></ul><h2 id="1-3-如何实现无状态"><a href="#1-3-如何实现无状态" class="headerlink" title="1.3.如何实现无状态"></a>1.3.如何实现无状态</h2><p>无状态登录的流程：</p><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务的对token进行解密，判断是否有效。</li></ul><p>流程图：</p><p><img src="http://img.smallmartial.cn/1527300483893.png" alt="image"></p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p><p>采用何种方式加密才是安全可靠的呢？</p><p>我们将采用<code>JWT + RSA非对称加密</code></p><h2 id="1-4-JWT"><a href="#1-4-JWT" class="headerlink" title="1.4.JWT"></a>1.4.JWT</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1.简介"></a>1.4.1.简介</h3><p>JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网：<a href="https://jwt.io" target="_blank" rel="noopener">https://jwt.io</a></p><p><img src="http://img.smallmartial.cn/1527301027008.png" alt="image"></p><p>GitHub上jwt的java客户端：<a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a></p><h3 id="1-4-2-数据格式"><a href="#1-4-2-数据格式" class="headerlink" title="1.4.2.数据格式"></a>1.4.2.数据格式</h3><p>JWT包含三部分数据：</p><ul><li><p>Header：头部，通常头部有两部分信息：</p><ul><li>声明类型，这里是JWT</li><li>加密算法，自定义</li></ul><p>我们会对头部进行base64加密（可解密），得到第一部分数据</p></li><li><p>Payload：载荷，就是有效数据，一般包含下面信息：</p><ul><li>用户身份信息（注意，这里因为采用base64加密，可解密，因此不要存放敏感信息）</li><li>注册声明：如token的签发时间，过期时间，签发人等</li></ul><p>这部分也会采用base64加密，得到第二部分数据</p></li><li><p>Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥（secret）（不要泄漏，最好周期性更换），通过加密算法生成。用于验证整个数据完整和可靠性</p></li></ul><p>生成的数据格式：</p><p><img src="http://img.smallmartial.cn/1527322512370.png" alt="image"></p><p>可以看到分为3段，每段就是上面的一部分数据</p><h3 id="1-4-3-JWT交互流程"><a href="#1-4-3-JWT交互流程" class="headerlink" title="1.4.3.JWT交互流程"></a>1.4.3.JWT交互流程</h3><p>流程图：</p><p><img src="http://img.smallmartial.cn/1527305891424.png" alt="image"></p><p>步骤翻译：</p><ul><li>1、用户登录</li><li>2、服务的认证，通过后根据secret生成token</li><li>3、将生成的token返回给用户</li><li>4、用户每次请求携带token</li><li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li><li>6、处理请求，返回响应结果</li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><h3 id="1-4-4-非对称加密"><a href="#1-4-4-非对称加密" class="headerlink" title="1.4.4.非对称加密"></a>1.4.4.非对称加密</h3><p>加密技术是对信息进行编码和解码的技术，编码是把原来可读信息（又称明文）译成代码形式（又称密文），其逆过程就是解码（解密），加密技术的要点是加密算法，加密算法可以分为三类：  </p><ul><li>对称加密，如AES<ul><li>基本原理：将明文分成N个组，然后使用密钥对各个组进行加密，形成各自的密文，最后把所有的分组密文进行合并，形成最终的密文。</li><li>优势：算法公开、计算量小、加密速度快、加密效率高</li><li>缺陷：双方都使用同样密钥，安全性得不到保证 </li></ul></li><li>非对称加密，如RSA<ul><li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端<ul><li>私钥加密，持有私钥或公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul></li><li>优点：安全，难以破解</li><li>缺点：算法比较耗时</li></ul></li><li>不可逆加密，如MD5，SHA<ul><li>基本原理：加密过程中不需要使用<a href="https://baike.baidu.com/item/%E5%AF%86%E9%92%A5" target="_blank" rel="noopener">密钥</a>，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。</li></ul></li></ul><p>RSA算法历史：</p><p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字缩写：RSA</p><h2 id="1-5-结合Zuul的鉴权流程"><a href="#1-5-结合Zuul的鉴权流程" class="headerlink" title="1.5.结合Zuul的鉴权流程"></a>1.5.结合Zuul的鉴权流程</h2><p>我们逐步演进系统架构设计。需要注意的是：secret是签名的关键，因此一定要保密，我们放到鉴权中心保存，其它任何服务中都不能获取secret。</p><h3 id="1-5-1-没有RSA加密时"><a href="#1-5-1-没有RSA加密时" class="headerlink" title="1.5.1.没有RSA加密时"></a>1.5.1.没有RSA加密时</h3><p>在微服务架构中，我们可以把服务的鉴权操作放到网关中，将未通过鉴权的请求直接拦截，如图：</p><p><img src="http://img.smallmartial.cn/1527312464328.png" alt="image"></p><ul><li>1、用户请求登录</li><li>2、Zuul将请求转发到授权中心，请求授权</li><li>3、授权中心校验完成，颁发JWT凭证</li><li>4、客户端请求其它功能，携带JWT</li><li>5、Zuul将jwt交给授权中心校验，通过后放行</li><li>6、用户请求到达微服务</li><li>7、微服务将jwt交给鉴权中心，鉴权同时解析用户信息</li><li>8、鉴权中心返回用户数据给微服务</li><li>9、微服务处理请求，返回响应</li></ul><p>发现什么问题了？</p><p>每次鉴权都需要访问鉴权中心，系统间的网络请求频率过高，效率略差，鉴权中心的压力较大。</p><h3 id="1-5-2-结合RSA的鉴权"><a href="#1-5-2-结合RSA的鉴权" class="headerlink" title="1.5.2.结合RSA的鉴权"></a>1.5.2.结合RSA的鉴权</h3><p>直接看图：</p><p><img src="http://img.smallmartial.cn/1527313765010.png" alt="image"></p><ul><li>我们首先利用RSA生成公钥和私钥。私钥保存在授权中心，公钥保存在Zuul和各个微服务</li><li>用户请求登录</li><li>授权中心校验，通过后用私钥对JWT进行签名加密</li><li>返回jwt给用户</li><li>用户携带JWT访问</li><li>Zuul直接通过公钥解密JWT，进行验证，验证通过则放行</li><li>请求到达微服务，微服务直接用公钥解析JWT，获取用户信息，无需访问授权中心</li></ul><p>服务暴露的问题？</p><p>避免被暴露</p><p>jwt服务间鉴权</p><h1 id="2-授权中心"><a href="#2-授权中心" class="headerlink" title="2.授权中心"></a>2.授权中心</h1><h2 id="2-1-创建授权中心"><a href="#2-1-创建授权中心" class="headerlink" title="2.1.创建授权中心"></a>2.1.创建授权中心</h2><p>授权中心的主要职责：</p><ul><li>用户鉴权：<ul><li>接收用户的登录请求，通过用户中心的接口进行校验，通过后生成JWT</li><li>使用私钥生成JWT并返回</li></ul></li><li>服务鉴权：微服务间的调用不经过Zuul，会有风险,需要鉴权中心进行认证<ul><li>原理与用户鉴权类似，但逻辑稍微复杂一些（此处我们不做实现）</li></ul></li></ul><p>因为生成jwt，解析jwt这样的行为以后在其它微服务中也会用到，因此我们会抽取成工具。我们把鉴权中心进行聚合，一个工具module，一个提供服务的module</p><h3 id="2-1-1-创建父module"><a href="#2-1-1-创建父module" class="headerlink" title="2.1.1.创建父module"></a>2.1.1.创建父module</h3><p>我们先创建父module，名称为：ly-auth-center</p><p><img src="http://img.smallmartial.cn/1527317011998.png" alt="image"></p><p>将pom打包方式改为pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-auth-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-通用module"><a href="#2-1-2-通用module" class="headerlink" title="2.1.2.通用module"></a>2.1.2.通用module</h3><h4 id="创建module"><a href="#创建module" class="headerlink" title="创建module"></a>创建module</h4><p>然后是授权服务的通用模块：ly-auth-common:</p><p><img src="http://img.smallmartial.cn/1527317125723.png" alt="image"></p><p> <img src="http://img.smallmartial.cn/1527317157685.png" alt="image"></p><h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结构：<br><img src="http://img.smallmartial.cn/1527517216895.png" alt="image"></p><h3 id="2-1-3-授权服务"><a href="#2-1-3-授权服务" class="headerlink" title="2.1.3.授权服务"></a>2.1.3.授权服务</h3><h4 id="创建module-1"><a href="#创建module-1" class="headerlink" title="创建module"></a>创建module</h4><p><img src="http://img.smallmartial.cn/1527337524833.png" alt="image"></p><p><img src="http://img.smallmartial.cn/1527337553491.png" alt="image"></p><h4 id="pom-1"><a href="#pom-1" class="headerlink" title="pom:"></a>pom:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-auth-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;leyou.latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建启动类："><a href="#创建启动类：" class="headerlink" title="创建启动类："></a>创建启动类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyAuthApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8087</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">auth-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">    registry-fetch-interval-seconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p> 结构：</p><p> <img src="http://img.smallmartial.cn/1527517256858.png" alt="image"></p><p>修改路由：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span> <span class="comment"># 添加路由前缀</span></span><br><span class="line"><span class="attr">  retryable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    item-service:</span> <span class="string">/item/**</span></span><br><span class="line"><span class="attr">    search-service:</span> <span class="string">/search/**</span></span><br><span class="line"><span class="attr">    user-service:</span> <span class="string">/user/**</span></span><br><span class="line"><span class="attr">    auth-service:</span> <span class="string">/auth/**</span></span><br></pre></td></tr></table></figure><h2 id="2-2-编写JWT工具"><a href="#2-2-编写JWT工具" class="headerlink" title="2.2.编写JWT工具"></a>2.2.编写JWT工具</h2><p>我们在<code>ly-auth-coomon</code>中编写一些通用的工具类：</p><p><img src="http://img.smallmartial.cn/1527517357328.png" alt="image"></p><h3 id="2-2-1-RSA工具类："><a href="#2-2-1-RSA工具类：" class="headerlink" title="2.2.1.RSA工具类："></a>2.2.1.RSA工具类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ace on 2018/5/10.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HuYi.Zhang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中读取公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 公钥保存路径，相对于classpath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 公钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKey</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = readFile(filename);</span><br><span class="line">        <span class="keyword">return</span> getPublicKey(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中读取密钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename 私钥保存路径，相对于classpath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 私钥对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = readFile(filename);</span><br><span class="line">        <span class="keyword">return</span> getPrivateKey(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 公钥的字节形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKey</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        X509EncodedKeySpec spec = <span class="keyword">new</span> X509EncodedKeySpec(bytes);</span><br><span class="line">        KeyFactory factory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory.generatePublic(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取密钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 私钥的字节形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PKCS8EncodedKeySpec spec = <span class="keyword">new</span> PKCS8EncodedKeySpec(bytes);</span><br><span class="line">        KeyFactory factory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> factory.generatePrivate(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据密文，生存rsa公钥和私钥,并写入指定文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKeyFilename  公钥文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKeyFilename 私钥文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret             生成密钥的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateKey</span><span class="params">(String publicKeyFilename, String privateKeyFilename, String secret)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        SecureRandom secureRandom = <span class="keyword">new</span> SecureRandom(secret.getBytes());</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>, secureRandom);</span><br><span class="line">        KeyPair keyPair = keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="comment">// 获取公钥并写出</span></span><br><span class="line">        <span class="keyword">byte</span>[] publicKeyBytes = keyPair.getPublic().getEncoded();</span><br><span class="line">        writeFile(publicKeyFilename, publicKeyBytes);</span><br><span class="line">        <span class="comment">// 获取私钥并写出</span></span><br><span class="line">        <span class="keyword">byte</span>[] privateKeyBytes = keyPair.getPrivate().getEncoded();</span><br><span class="line">        writeFile(privateKeyFilename, privateKeyBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readFile(String fileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Files.readAllBytes(<span class="keyword">new</span> File(fileName).toPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(String destPath, <span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File dest = <span class="keyword">new</span> File(destPath);</span><br><span class="line">        <span class="keyword">if</span> (!dest.exists()) &#123;</span><br><span class="line">            dest.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        Files.write(dest.toPath(), bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-常量类"><a href="#2-2-2-常量类" class="headerlink" title="2.2.2.常量类"></a>2.2.2.常量类</h3><p>其中定义了jwt中的payload的常用key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConstans</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JWT_KEY_ID = <span class="string">"id"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JWT_KEY_USER_NAME = <span class="string">"username"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-对象工具类："><a href="#2-2-3-对象工具类：" class="headerlink" title="2.2.3.对象工具类："></a>2.2.3.对象工具类：</h3><p>从jwt解析得到的数据是Object类型，转换为具体类型可能出现空指针，这个工具类进行了一些转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">toLong</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Double || obj <span class="keyword">instanceof</span> Float) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(StringUtils.substringBefore(obj.toString(), <span class="string">"."</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(obj.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(obj.toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">toInt</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toLong(obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-载荷-UserInfo"><a href="#2-2-4-载荷-UserInfo" class="headerlink" title="2.2.4.载荷:UserInfo"></a>2.2.4.载荷:UserInfo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">(Long id, String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-JWT工具类"><a href="#2-2-5-JWT工具类" class="headerlink" title="2.2.5.JWT工具类"></a>2.2.5.JWT工具类</h3><p>我们需要先在<code>ly-auth-common</code>中引入JWT依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HuYi.Zhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-05-26 15:43</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo      载荷中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey    私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireMinutes 过期时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(UserInfo userInfo, PrivateKey privateKey, <span class="keyword">int</span> expireMinutes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .claim(JwtConstans.JWT_KEY_ID, userInfo.getId())</span><br><span class="line">                .claim(JwtConstans.JWT_KEY_USER_NAME, userInfo.getUsername())</span><br><span class="line">                .setExpiration(DateTime.now().plusMinutes(expireMinutes).toDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.RS256, privateKey)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo      载荷中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey    私钥字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireMinutes 过期时间，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(UserInfo userInfo, <span class="keyword">byte</span>[] privateKey, <span class="keyword">int</span> expireMinutes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .claim(JwtConstans.JWT_KEY_ID, userInfo.getId())</span><br><span class="line">                .claim(JwtConstans.JWT_KEY_USER_NAME, userInfo.getUsername())</span><br><span class="line">                .setExpiration(DateTime.now().plusMinutes(expireMinutes).toDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.RS256, RsaUtils.getPrivateKey(privateKey))</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解析token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Jws&lt;Claims&gt; <span class="title">parserToken</span><span class="params">(String token, PublicKey publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser().setSigningKey(publicKey).parseClaimsJws(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解析token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Jws&lt;Claims&gt; <span class="title">parserToken</span><span class="params">(String token, <span class="keyword">byte</span>[] publicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser().setSigningKey(RsaUtils.getPublicKey(publicKey))</span><br><span class="line">                .parseClaimsJws(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserInfo <span class="title">getInfoFromToken</span><span class="params">(String token, PublicKey publicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = parserToken(token, publicKey);</span><br><span class="line">        Claims body = claimsJws.getBody();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserInfo(</span><br><span class="line">                ObjectUtils.toLong(body.get(JwtConstans.JWT_KEY_ID)),</span><br><span class="line">                ObjectUtils.toString(body.get(JwtConstans.JWT_KEY_USER_NAME))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中的用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token     用户请求中的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey 公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserInfo <span class="title">getInfoFromToken</span><span class="params">(String token, <span class="keyword">byte</span>[] publicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = parserToken(token, publicKey);</span><br><span class="line">        Claims body = claimsJws.getBody();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserInfo(</span><br><span class="line">                ObjectUtils.toLong(body.get(JwtConstans.JWT_KEY_ID)),</span><br><span class="line">                ObjectUtils.toString(body.get(JwtConstans.JWT_KEY_USER_NAME))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-测试"><a href="#2-2-6-测试" class="headerlink" title="2.2.6.测试"></a>2.2.6.测试</h3><p>我们在<code>ly-auth-common</code>中编写测试类：</p><p><img src="http://img.smallmartial.cn/1527517419111.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String pubKeyPath = <span class="string">"D:\\heima\\rsa\\rsa.pub"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String priKeyPath = <span class="string">"D:\\heima\\rsa\\rsa.pri"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RsaUtils.generateKey(pubKeyPath, priKeyPath, <span class="string">"234"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">        <span class="keyword">this</span>.privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenerateToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 生成token</span></span><br><span class="line">        String token = JwtUtils.generateToken(<span class="keyword">new</span> UserInfo(<span class="number">20L</span>, <span class="string">"jack"</span>), privateKey, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"token = "</span> + token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParseToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = <span class="string">"eyJhbGciOiJSUzI1NiJ9.eyJpZCI6MjAsInVzZXJOYW1lIjoiamFjayIsImV4cCI6MTUyNzMzMDY5NX0.VpGNedy1z0aR262uAp2sM6xB4ljuxa4fzqyyBpZcGTBNLodIfuCNZkOjdlqf-km6TQPoz3epYf8cc_Rf9snsGdz4YPIwpm6X14JKU9jwL74q6zy61J8Nl9q7Zu3YnLibAvcnC_y9omiqKN8-iCi7-MvM-LwVS7y_Cx9eu0aaY8E"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        UserInfo user = JwtUtils.getInfoFromToken(token, publicKey);</span><br><span class="line">        System.out.println(<span class="string">"id: "</span> + user.getId());</span><br><span class="line">        System.out.println(<span class="string">"userName: "</span> + user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试生成公钥和私钥"><a href="#测试生成公钥和私钥" class="headerlink" title="测试生成公钥和私钥"></a>测试生成公钥和私钥</h4><p>我们运行这段代码：</p><p><img src="http://img.smallmartial.cn/20190423181122.png" alt="image"></p><p>运行之后，查看目标目录：<br><img src="http://img.smallmartial.cn/1527338894471.png" alt="image"></p><p>公钥和私钥已经生成了！</p><h4 id="测试生成token-把-Before之前的注释去掉"><a href="#测试生成token-把-Before之前的注释去掉" class="headerlink" title="测试生成token,把@Before之前的注释去掉"></a>测试生成token,把@Before之前的注释去掉</h4><p><img src="http://img.smallmartial.cn/1527341701828.png" alt="image"></p><p><img src="http://img.smallmartial.cn/20190423181349.png" alt="image"></p><h4 id="测试解析token"><a href="#测试解析token" class="headerlink" title="测试解析token"></a>测试解析token</h4><p><img src="http://img.smallmartial.cn/1527341769572.png" alt="image"></p><p>正常情况：</p><p> <img src="http://img.smallmartial.cn/20190423181654.png" alt="image"></p><p>任意改动token，发现报错了：</p><p><img src="http://img.smallmartial.cn/1527341832114.png" alt="image"></p><h2 id="2-3-编写登录授权接口"><a href="#2-3-编写登录授权接口" class="headerlink" title="2.3.编写登录授权接口"></a>2.3.编写登录授权接口</h2><p>接下来，我们需要在<code>ly-auth-servcice</code>编写一个接口，对外提供登录授权服务。基本流程如下：</p><ul><li>客户端携带用户名和密码请求登录</li><li>授权中心调用客户中心接口，根据用户名和密码查询用户信息</li><li>如果用户名密码正确，能获取用户，否则为空，则登录失败</li><li>如果校验成功，则生成JWT并返回</li></ul><h3 id="2-3-1-生成公钥和私钥"><a href="#2-3-1-生成公钥和私钥" class="headerlink" title="2.3.1.生成公钥和私钥"></a>2.3.1.生成公钥和私钥</h3><p>我们需要在授权中心生成真正的公钥和私钥。我们必须有一个生成公钥和私钥的secret，这个可以配置到<code>application.yml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line"><span class="attr">  jwt:</span></span><br><span class="line"><span class="attr">    secret:</span> <span class="string">ly@Login(Auth&#125;*^31)&amp;heiMa%</span> <span class="comment"># 登录校验的密钥</span></span><br><span class="line"><span class="attr">    pubKeyPath:</span> <span class="attr">E:/demo/rsa/rsa.pub</span> <span class="comment"># 公钥地址</span></span><br><span class="line"><span class="attr">    priKeyPath:</span> <span class="attr">E:/demorsa/rsa.pri</span> <span class="comment"># 私钥地址</span></span><br><span class="line"><span class="attr">    expire:</span> <span class="number">30</span> <span class="comment"># 过期时间,单位分钟</span></span><br></pre></td></tr></table></figure><p>然后编写属性类，加载这些数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.jwt"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String secret; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pubKeyPath;<span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String priKeyPath;<span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire;<span class="comment">// token过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PublicKey publicKey; <span class="comment">// 公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrivateKey privateKey; <span class="comment">// 私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JwtProperties.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File pubKey = <span class="keyword">new</span> File(pubKeyPath);</span><br><span class="line">            File priKey = <span class="keyword">new</span> File(priKeyPath);</span><br><span class="line">            <span class="keyword">if</span> (!pubKey.exists() || !priKey.exists()) &#123;</span><br><span class="line">                <span class="comment">// 生成公钥和私钥</span></span><br><span class="line">                RsaUtils.generateKey(pubKeyPath, priKeyPath, secret);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取公钥和私钥</span></span><br><span class="line">            <span class="keyword">this</span>.publicKey = RsaUtils.getPublicKey(pubKeyPath);</span><br><span class="line">            <span class="keyword">this</span>.privateKey = RsaUtils.getPrivateKey(priKeyPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"初始化公钥和私钥失败！"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-controller"><a href="#2-3-2-controller" class="headerlink" title="2.3.2.controller"></a>2.3.2.controller</h3><p>编写授权接口，我们接收用户名和密码，校验成功后，写入cookie中。</p><ul><li>请求方式：post</li><li>请求路径：/accredit</li><li>请求参数：username和password</li><li>返回结果：无</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">            HttpServletRequest request,</span></span><br><span class="line"><span class="function">             HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        String token = authService.login(username,password);</span><br><span class="line">        <span class="comment">//写入cookie</span></span><br><span class="line">        CookieUtils.setCookie(request, response, prop.getCookieName(),</span><br><span class="line">                token, prop.getCookieMaxAge(), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的cookie的name和生存时间，我们配置到属性文件：application.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ly:</span><br><span class="line">  jwt:</span><br><span class="line">    pubKeyPath: E:/nginx/rsa/rsa.pub # 公钥地址</span><br><span class="line">    priKeyPath: E:/nginx/rsa/rsa.pri # 私钥地址</span><br><span class="line">    expire: 30 # 过期时间,单位分钟</span><br><span class="line">    cookieName: LY_TOKEN</span><br><span class="line">    CookieMaxAge: 1800</span><br></pre></td></tr></table></figure></p><p>然后在<code>JwtProperties</code>中添加属性：</p><p><img src="http://img.smallmartial.cn/1527523619183.png" alt="image"></p><h3 id="2-3-3-CookieUtils"><a href="#2-3-3-CookieUtils" class="headerlink" title="2.3.3.CookieUtils"></a>2.3.3.CookieUtils</h3><p>要注意，这里我们使用了一个工具类，CookieUtils，我们把它添加到<code>ly-common</code>中，然后引入servlet相关依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：略<br><img src="http://img.smallmartial.cn/1527521639471.png" alt="image"></p><h3 id="2-3-3-UserClient"><a href="#2-3-3-UserClient" class="headerlink" title="2.3.3.UserClient"></a>2.3.3.UserClient</h3><p>接下来我们肯定要对用户密码进行校验，所以我们需要通过FeignClient去访问 user-service微服务：</p><p>引入user-service依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;leyou.latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写FeignClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-service"><a href="#2-3-4-service" class="headerlink" title="2.3.4.service"></a>2.3.4.service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JwtLoginProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtLoginProperties jwtProp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AuthService.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">authentication</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 查询用户</span></span><br><span class="line">            ResponseEntity&lt;User&gt; resp = <span class="keyword">this</span>.userClient.queryUser(username, password);</span><br><span class="line">            <span class="keyword">if</span> (!resp.hasBody()) &#123;</span><br><span class="line">                logger.info(<span class="string">"用户信息不存在，&#123;&#125;"</span>, username);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取登录用户</span></span><br><span class="line">            User user = resp.getBody();</span><br><span class="line">            <span class="comment">// 生成token</span></span><br><span class="line">            String token = JwtUtils.generateToken(</span><br><span class="line">                    <span class="keyword">new</span> UserInfo(user.getId(), user.getUsername()),</span><br><span class="line">                    jwtProp.getPrivateKey(), jwtProp.getExpire());</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-项目结构："><a href="#2-3-5-项目结构：" class="headerlink" title="2.3.5.项目结构："></a>2.3.5.项目结构：</h3><p><img src="http://img.smallmartial.cn/1527517766843.png" alt="image"></p><h3 id="2-3-6-测试"><a href="#2-3-6-测试" class="headerlink" title="2.3.6.测试"></a>2.3.6.测试</h3><p><img src="http://img.smallmartial.cn/20190424194415.png" alt="image"></p><h3 id="2-3-7-添加路由规则"><a href="#2-3-7-添加路由规则" class="headerlink" title="2.3.7.添加路由规则"></a>2.3.7.添加路由规则</h3><p>我们在<code>ly-api-gateway</code>中添加路径规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    auth-service:</span> <span class="string">/auth/**</span></span><br></pre></td></tr></table></figure><h2 id="2-4-登录页面"><a href="#2-4-登录页面" class="headerlink" title="2.4.登录页面"></a>2.4.登录页面</h2><p>接下来，我们看看登录页面，是否能够正确的发出请求。</p><p>我们在页面输入登录信息，然后点击登录：</p><p><img src="http://img.smallmartial.cn/20190424080117.png" alt="image"></p><p>查看控制台：</p><p> <img src="http://img.smallmartial.cn/1527516889167.png" alt="image"></p><p>发现请求的路径不对，我们的认证接口是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/auth/login</span><br></pre></td></tr></table></figure><p>我们打开login.html，修改路径信息：</p><p> <img src="http://img.smallmartial.cn/1527517811770.png" alt="image"></p><p>页面ajax请求：</p><p><img src="http://img.smallmartial.cn/20190424080505.png" alt="image"></p><p>然后再次测试，成功跳转到了首页</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目标&quot;&gt;&lt;/a&gt;0.学习目标&lt;/h1&gt;&lt;h1 id=&quot;1-无状态登录原理&quot;&gt;&lt;a href=&quot;#1-无状态登录原理&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记二十三-用户注册（二）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/24/lyshop-24/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/24/lyshop-24/</id>
    <published>2019-04-24T10:25:58.000Z</published>
    <updated>2019-04-24T11:15:28.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-发送短信功能"><a href="#5-发送短信功能" class="headerlink" title="5.发送短信功能"></a>5.发送短信功能</h1><p>短信微服务已经准备好，我们就可以继续编写用户中心接口了。</p><h2 id="5-1-接口说明"><a href="#5-1-接口说明" class="headerlink" title="5.1.接口说明"></a>5.1.接口说明</h2><p><img src="http://img.smallmartial.cn/1527238127932.png" alt="image"></p><p>这里的业务逻辑是这样的：</p><ul><li>1）我们接收页面发送来的手机号码</li><li>2）生成一个随机验证码</li><li>3）将验证码保存在服务端</li><li>4）发送短信，将验证码发送到用户手机</li></ul><p>那么问题来了：验证码保存在哪里呢？</p><p>验证码有一定有效期，一般是5分钟，我们可以利用Redis的过期机制来保存。</p><h2 id="5-2-Redis"><a href="#5-2-Redis" class="headerlink" title="5.2.Redis"></a>5.2.Redis</h2><h3 id="5-2-2-Spring-Data-Redis"><a href="#5-2-2-Spring-Data-Redis" class="headerlink" title="5.2.2.Spring Data Redis"></a>5.2.2.Spring Data Redis</h3><p>官网：<a href="http://projects.spring.io/spring-data-redis/" target="_blank" rel="noopener">http://projects.spring.io/spring-data-redis/</a></p><p><img src="http://img.smallmartial.cn/1527250056698.png" alt="image">                                    </p><p>Spring Data Redis，是Spring Data 家族的一部分。 对Jedis客户端进行了封装，与spring进行了整合。可以非常方便的来实现redis的配置和操作。 </p><h3 id="5-2-3-RedisTemplate基本操作"><a href="#5-2-3-RedisTemplate基本操作" class="headerlink" title="5.2.3.RedisTemplate基本操作"></a>5.2.3.RedisTemplate基本操作</h3><p>Spring Data Redis 提供了一个工具类：RedisTemplate。里面封装了对于Redis的五种数据结构的各种操作，包括：</p><ul><li>redisTemplate.opsForValue() ：操作字符串</li><li>redisTemplate.opsForHash() ：操作hash</li><li>redisTemplate.opsForList()：操作list</li><li>redisTemplate.opsForSet()：操作set</li><li>redisTemplate.opsForZSet()：操作zset</li></ul><p>其它一些通用命令，如expire，可以通过redisTemplate.xx()来直接调用</p><p>5种结构：</p><ul><li>String：等同于java中的，<code>Map&lt;String,String&gt;</code></li><li>list：等同于java中的<code>Map&lt;String,List&lt;String&gt;&gt;</code></li><li>set：等同于java中的<code>Map&lt;String,Set&lt;String&gt;&gt;</code></li><li>sort_set：可排序的set</li><li>hash：等同于java中的：`Map&lt;String,Map&lt;String,String&gt;&gt;</li></ul><h3 id="5-2-4-StringRedisTemplate"><a href="#5-2-4-StringRedisTemplate" class="headerlink" title="5.2.4.StringRedisTemplate"></a>5.2.4.StringRedisTemplate</h3><p>RedisTemplate在创建时，可以指定其泛型类型：</p><ul><li>K：代表key 的数据类型</li><li>V: 代表value的数据类型</li></ul><p>注意：这里的类型不是Redis中存储的数据类型，而是Java中的数据类型，RedisTemplate会自动将Java类型转为Redis支持的数据类型：字符串、字节、二二进制等等。<br><img src="http://img.smallmartial.cn/1527250218215.png" alt="image"></p><p>不过RedisTemplate默认会采用JDK自带的序列化（Serialize）来对对象进行转换。生成的数据十分庞大，因此一般我们都会指定key和value为String类型，这样就由我们自己把对象序列化为json字符串来存储即可。</p><p>因为大部分情况下，我们都会使用key和value都为String的RedisTemplate，因此Spring就默认提供了这样一个实现：<br><img src="http://img.smallmartial.cn/1527256139407.png" alt="image"></p><h3 id="5-2-5-测试"><a href="#5-2-5-测试" class="headerlink" title="5.2.5.测试"></a>5.2.5.测试</h3><p>我们在项目中编写一个测试案例：</p><p>首先在项目中引入Redis启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在配置文件中指定Redis地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br></pre></td></tr></table></figure><p>然后就可以直接注入<code>StringRedisTemplate</code>对象了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = LyUserService.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">        String val = <span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">"key1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"val = "</span> + val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存储数据，并指定剩余生命时间,5小时</span></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">"key2"</span>, <span class="string">"value2"</span>,</span><br><span class="line">                <span class="number">5</span>, TimeUnit.HOURS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BoundHashOperations&lt;String, Object, Object&gt; hashOps =</span><br><span class="line">                <span class="keyword">this</span>.redisTemplate.boundHashOps(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">// 操作hash数据</span></span><br><span class="line">        hashOps.put(<span class="string">"name"</span>, <span class="string">"jack"</span>);</span><br><span class="line">        hashOps.put(<span class="string">"age"</span>, <span class="string">"21"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取单个数据</span></span><br><span class="line">        Object name = hashOps.get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有数据</span></span><br><span class="line">        Map&lt;Object, Object&gt; map = hashOps.entries();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; me : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(me.getKey() + <span class="string">" : "</span> + me.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-controller"><a href="#5-3-controller" class="headerlink" title="5.3.controller"></a>5.3.controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送手机验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"code"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">sendVerifyCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    Boolean boo = <span class="keyword">this</span>.userService.sendVerifyCode(phone);</span><br><span class="line">    <span class="keyword">if</span> (boo == <span class="keyword">null</span> || !boo) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-service"><a href="#5-4-service" class="headerlink" title="5.4.service"></a>5.4.service</h2><p>这里的逻辑会稍微复杂：</p><ul><li>生成随机验证码</li><li>将验证码保存到Redis中，用来在注册的时候验证</li><li>发送验证码到<code>ly-sms-service</code>服务，发送短信</li></ul><p>因此，我们需要引入Redis和AMQP：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加RabbitMQ和Redis配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line"><span class="attr">    template:</span></span><br><span class="line"><span class="attr">      retry:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        initial-interval:</span> <span class="number">10000</span><span class="string">ms</span></span><br><span class="line"><span class="attr">        max-interval:</span> <span class="number">210000</span><span class="string">ms</span></span><br><span class="line"><span class="attr">        multiplier:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>另外还要用到工具类，生成6位随机码，这个我们封装到了<code>ly-common</code>中，因此需要引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;leyou.latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生成随机码的工具：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成指定位数的随机数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 随机数的位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 生成的随机数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateCode</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    len = Math.min(len, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">int</span> min = Double.valueOf(Math.pow(<span class="number">10</span>, len - <span class="number">1</span>)).intValue();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="keyword">new</span> Random().nextInt(</span><br><span class="line">        Double.valueOf(Math.pow(<span class="number">10</span>, len + <span class="number">1</span>)).intValue() - <span class="number">1</span>) + min;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(num).substring(<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX = <span class="string">"user:code:phone:"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserService.class);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">sendVerifyCode</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成验证码</span></span><br><span class="line">    String code = NumberUtils.generateCode(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        Map&lt;String, String&gt; msg = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        msg.put(<span class="string">"phone"</span>, phone);</span><br><span class="line">        msg.put(<span class="string">"code"</span>, code);</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"ly.sms.exchange"</span>, <span class="string">"sms.verify.code"</span>, msg);</span><br><span class="line">        <span class="comment">// 将code存入redis</span></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(KEY_PREFIX + phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"发送短信失败。phone：&#123;&#125;， code：&#123;&#125;"</span>, phone, code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：要设置短信验证码在Redis的缓存时间为5分钟</p><h2 id="5-5-测试"><a href="#5-5-测试" class="headerlink" title="5.5.测试"></a>5.5.测试</h2><p>通过RestClient发送请求试试：</p><p><img src="http://img.smallmartial.cn/1527240486327.png" alt="image"></p><p>查看Redis中的数据：</p><p> <img src="http://img.smallmartial.cn/1527240610713.png" alt="image"></p><p>查看短信：</p><p><img src="http://img.smallmartial.cn/212312314.png" alt="image"></p><h1 id="6-注册功能"><a href="#6-注册功能" class="headerlink" title="6.注册功能"></a>6.注册功能</h1><h2 id="6-1-接口说明"><a href="#6-1-接口说明" class="headerlink" title="6.1.接口说明"></a>6.1.接口说明</h2><p><img src="http://img.smallmartial.cn/1527240855176.png" alt="image"></p><h2 id="6-2-controller"><a href="#6-2-controller" class="headerlink" title="6.2.controller"></a>6.2.controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(User user, @RequestParam(<span class="string">"code"</span>)</span> String code) </span>&#123;</span><br><span class="line">    Boolean boo = <span class="keyword">this</span>.userService.register(user, code);</span><br><span class="line">    <span class="keyword">if</span> (boo == <span class="keyword">null</span> || !boo) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-service"><a href="#6-3-service" class="headerlink" title="6.3.service"></a>6.3.service</h2><p>基本逻辑：</p><ul><li>1）校验短信验证码</li><li>2）生成盐</li><li>3）对密码加密</li><li>4）写入数据库</li><li>5）删除Redis中的验证码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">register</span><span class="params">(User user, String code)</span> </span>&#123;</span><br><span class="line">    String key = KEY_PREFIX + user.getPhone();</span><br><span class="line">    <span class="comment">// 从redis取出验证码</span></span><br><span class="line">    String codeCache = <span class="keyword">this</span>.redisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">// 检查验证码是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (!code.equals(codeCache)) &#123;</span><br><span class="line">        <span class="comment">// 不正确，返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    user.setId(<span class="keyword">null</span>);</span><br><span class="line">    user.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">// 生成盐</span></span><br><span class="line">    String salt = CodecUtils.generateSalt();</span><br><span class="line">    user.setSalt(salt);</span><br><span class="line">    <span class="comment">// 对密码进行加密</span></span><br><span class="line">    user.setPassword(CodecUtils.md5Hex(user.getPassword(), salt));</span><br><span class="line">    <span class="comment">// 写入数据库</span></span><br><span class="line">    <span class="keyword">boolean</span> boo = <span class="keyword">this</span>.userMapper.insertSelective(user) == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果注册成功，删除redis中的code</span></span><br><span class="line">    <span class="keyword">if</span> (boo) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.delete(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"删除缓存验证码失败，code：&#123;&#125;"</span>, code, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> boo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-测试"><a href="#6-4-测试" class="headerlink" title="6.4.测试"></a>6.4.测试</h2><p>我们通过在注册页面测试：</p><p><img src="http://img.smallmartial.cn/20190423165545.png" alt="image"></p><p>查看数据库：<br><img src="http://img.smallmartial.cn/20190423165612.png" alt="image"></p><h2 id="6-5-服务端数据校验"><a href="#6-5-服务端数据校验" class="headerlink" title="6.5.服务端数据校验"></a>6.5.服务端数据校验</h2><p>刚才虽然实现了注册，但是服务端并没有进行数据校验，而前端的校验是很容易被有心人绕过的。所以我们必须在后台添加数据校验功能：</p><p>我们这里会使用Hibernate-Validator框架完成数据校验：</p><p>而SpringBoot的web启动器中已经集成了相关依赖：</p><p><img src="http://img.smallmartial.cn/1527244265451.png" alt="image"></p><h3 id="6-5-1-什么是Hibernate-Validator"><a href="#6-5-1-什么是Hibernate-Validator" class="headerlink" title="6.5.1.什么是Hibernate Validator"></a>6.5.1.什么是Hibernate Validator</h3><p>Hibernate Validator是Hibernate提供的一个开源框架，使用注解方式非常方便的实现服务端的数据校验。</p><p>官网：<a href="http://hibernate.org/validator/" target="_blank" rel="noopener">http://hibernate.org/validator/</a></p><p><img src="http://img.smallmartial.cn/1527244393041.png" alt="image"></p><p><strong>hibernate Validator</strong> 是 Bean Validation 的参考实现 。</p><p>Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint（约束） 的实现，除此之外还有一些附加的 constraint。</p><p>在日常开发中，Hibernate Validator经常用来验证bean的字段，基于注解，方便快捷高效。</p><h3 id="6-5-2-Bean校验的注解"><a href="#6-5-2-Bean校验的注解" class="headerlink" title="6.5.2.Bean校验的注解"></a>6.5.2.Bean校验的注解</h3><p>常用注解如下：</p><table><thead><tr><th><strong>Constraint</strong></th><th><strong>详细信息</strong></th></tr></thead><tbody><tr><td><strong>@Valid</strong></td><td>被注释的元素是一个对象，需要检查此对象的所有字段值</td></tr><tr><td><strong>@Null</strong></td><td>被注释的元素必须为 null</td></tr><tr><td><strong>@NotNull</strong></td><td>被注释的元素必须不为 null</td></tr><tr><td><strong>@AssertTrue</strong></td><td>被注释的元素必须为 true</td></tr><tr><td><strong>@AssertFalse</strong></td><td>被注释的元素必须为 false</td></tr><tr><td><strong>@Min(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@Max(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@DecimalMin(value)</strong></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td><strong>@DecimalMax(value)</strong></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td><strong>@Size(max,   min)</strong></td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td><strong>@Digits   (integer, fraction)</strong></td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td><strong>@Past</strong></td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td><strong>@Future</strong></td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td><strong>@Pattern(value)</strong></td><td>被注释的元素必须符合指定的正则表达式</td></tr><tr><td><strong>@Email</strong></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td><strong>@Length</strong></td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td><strong>@NotEmpty</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@Range</strong></td><td>被注释的元素必须在合适的范围内</td></tr><tr><td><strong>@NotBlank</strong></td><td>被注释的字符串的必须非空</td></tr><tr><td><strong>@URL(protocol=,host=,   port=,regexp=, flags=)</strong></td><td>被注释的字符串必须是一个有效的url</td></tr><tr><td><strong>@CreditCardNumber</strong></td><td>被注释的字符串必须通过Luhn校验算法，银行卡，信用卡等号码一般都用Luhn计算合法性</td></tr></tbody></table><h3 id="6-5-3-给User添加校验"><a href="#6-5-3-给User添加校验" class="headerlink" title="6.5.3.给User添加校验"></a>6.5.3.给User添加校验</h3><p>我们在<code>ly-user-interface</code>中添加Hibernate-Validator依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在User对象的部分属性上添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">4</span>, max = <span class="number">30</span>, message = <span class="string">"用户名只能在4~30位之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Length</span>(min = <span class="number">4</span>, max = <span class="number">30</span>, message = <span class="string">"用户名只能在4~30位之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1[35678]\\d&#123;9&#125;$"</span>, message = <span class="string">"手机号格式不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String salt;<span class="comment">// 密码的盐值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-4-在controller上进行控制"><a href="#6-5-4-在controller上进行控制" class="headerlink" title="6.5.4.在controller上进行控制"></a>6.5.4.在controller上进行控制</h3><p>在controller中只需要给User添加 @Valid注解即可。</p><p><img src="http://img.smallmartial.cn/1527247334410.png" alt="image"></p><h3 id="6-5-5-测试"><a href="#6-5-5-测试" class="headerlink" title="6.5.5.测试"></a>6.5.5.测试</h3><p>我们故意填错：</p><p><img src="http://img.smallmartial.cn/1527247422251.png" alt="image"></p><p>然后SpringMVC会自动返回错误信息：</p><p><img src="http://img.smallmartial.cn/1527247492172.png" alt="image"></p><h1 id="7-根据用户名和密码查询用户"><a href="#7-根据用户名和密码查询用户" class="headerlink" title="7.根据用户名和密码查询用户"></a>7.根据用户名和密码查询用户</h1><h2 id="7-1-接口说明"><a href="#7-1-接口说明" class="headerlink" title="7.1.接口说明"></a>7.1.接口说明</h2><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>查询功能，根据参数中的用户名和密码查询指定用户</p><h3 id="接口路径"><a href="#接口路径" class="headerlink" title="接口路径"></a>接口路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /query</span><br></pre></td></tr></table></figure><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p>form表单格式</p><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>username</td><td>用户名，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr><tr><td>password</td><td>用户密码，格式为4~30位字母、数字、下划线</td><td>是</td><td>String</td><td>无</td></tr></tbody></table><h3 id="返回结果："><a href="#返回结果：" class="headerlink" title="返回结果："></a>返回结果：</h3><p>用户的json格式数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">6572312</span>,</span><br><span class="line">    <span class="attr">"username"</span>:<span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"phone"</span>:<span class="string">"13688886666"</span>,</span><br><span class="line">    <span class="attr">"created"</span>: <span class="number">1342432424</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态码：</p><ul><li>200：注册成功</li><li>400：用户名或密码错误</li><li>500：服务器内部异常，注册失败</li></ul><h2 id="7-2-controller"><a href="#7-2-controller" class="headerlink" title="7.2.controller"></a>7.2.controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名和密码查询用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"query"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">queryUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password</span></span><br><span class="line"><span class="function">    ) </span>&#123;</span><br><span class="line">        User user = <span class="keyword">this</span>.userService.queryUser(username, password);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-service"><a href="#7-3-service" class="headerlink" title="7.3.service"></a>7.3.service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryUser</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    User record = <span class="keyword">new</span> User();</span><br><span class="line">    record.setUsername(username);</span><br><span class="line">    User user = <span class="keyword">this</span>.userMapper.selectOne(record);</span><br><span class="line">    <span class="comment">// 校验用户名</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验密码</span></span><br><span class="line">    <span class="keyword">if</span> (!user.getPassword().equals(CodecUtils.md5Hex(password, user.getSalt()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户名密码都正确</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，查询时也要对密码进行加密后判断是否一致。</p><h2 id="7-4-测试"><a href="#7-4-测试" class="headerlink" title="7.4.测试"></a>7.4.测试</h2><p><img src="http://img.smallmartial.cn/20190423165912.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;5-发送短信功能&quot;&gt;&lt;a href=&quot;#5-发送短信功能&quot; class=&quot;headerlink&quot; title=&quot;5.发送短信功能&quot;&gt;&lt;/a&gt;5.发送短信功能&lt;/h1&gt;&lt;p&gt;短信微服务已经准备好，我们就可以继续编写用户中心接口了。&lt;/p&gt;
&lt;h2 id=&quot;5-1-接
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记二十二-用户注册（一）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/23/lyshop-23/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/23/lyshop-23/</id>
    <published>2019-04-23T05:23:27.000Z</published>
    <updated>2019-04-23T05:48:23.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>独立创建用户中心</li><li>了解面向接口开发方式</li><li>实现数据校验功能</li><li>实现短信发送功能</li><li>实现注册功能</li><li>实现根据用户名和密码查询用户功能</li></ul><h1 id="1-创建用户中心"><a href="#1-创建用户中心" class="headerlink" title="1.创建用户中心"></a>1.创建用户中心</h1><p>用户搜索到自己心仪的商品，接下来就要去购买，但是购买必须先登录。所以接下来我们编写用户中心，实现用户的登录和注册功能。</p><p>用户中心的提供的服务：</p><ul><li>用户的注册</li><li>用户登录</li><li>用户个人信息管理</li><li>用户地址管理</li><li>用户收藏管理</li><li>我的订单</li><li>优惠券管理</li></ul><p>这里我们暂时先实现基本的：<code>注册和登录</code>功能，其它功能大家可以自行补充完整。</p><p>因为用户中心的服务其它微服务也会调用，因此这里我们做聚合：</p><ul><li>ly-user：父工程，包含2个子工程：<ul><li>ly-user-interface：实体及接口</li><li>ly-user-service：业务和服务</li></ul></li></ul><h2 id="1-1-创建父module"><a href="#1-1-创建父module" class="headerlink" title="1.1.创建父module"></a>1.1.创建父module</h2><p>创建</p><p> <img src="http://img.smallmartial.cn/1527169974810.png" alt="image"></p><p>位置：</p><p> <img src="http://img.smallmartial.cn/1527169985218.png" alt="image"></p><h2 id="1-2-创建ly-user-interface"><a href="#1-2-创建ly-user-interface" class="headerlink" title="1.2.创建ly-user-interface"></a>1.2.创建ly-user-interface</h2><p>创建module：</p><p><img src="http://img.smallmartial.cn/1527170287378.png" alt="image"> </p><p> <img src="http://img.smallmartial.cn/1527170300711.png" alt="image"></p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-创建ly-user-service"><a href="#1-3-创建ly-user-service" class="headerlink" title="1.3.创建ly-user-service"></a>1.3.创建ly-user-service</h2><p>创建module</p><p><img src="http://img.smallmartial.cn/1527170391380.png" alt="image"></p><p><img src="http://img.smallmartial.cn/1527170401846.png" alt="image"></p><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通用Mapper启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;leyou.latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.leyou.user.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyUserService.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">user-service</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/heima</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;.$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.leyou.item.pojo</span></span><br></pre></td></tr></table></figure><p>父工程ly-user的pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-interface<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>ly-user-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-4-添加网关路由"><a href="#1-4-添加网关路由" class="headerlink" title="1.4.添加网关路由"></a>1.4.添加网关路由</h2><p>我们修改<code>ly-api-gateway</code>，添加路由规则，对<code>ly-user-service</code>进行路由:</p><p> <img src="http://img.smallmartial.cn/1527231304735.png" alt="image"></p><h1 id="2-后台功能准备"><a href="#2-后台功能准备" class="headerlink" title="2.后台功能准备"></a>2.后台功能准备</h1><h2 id="2-1-接口文档"><a href="#2-1-接口文档" class="headerlink" title="2.1.接口文档"></a>2.1.接口文档</h2><p>整个用户中心的开发，我们将模拟公司内面向接口的开发。</p><p><img src="http://img.smallmartial.cn/1527174356711.png" alt="image"></p><p>我们将根据文档直接编写后台功能，不关心页面实现。</p><h2 id="2-2-数据结构"><a href="#2-2-数据结构" class="headerlink" title="2.2.数据结构"></a>2.2.数据结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_user` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(50) NOT NULL COMMENT &apos;用户名&apos;,</span><br><span class="line">  `password` varchar(32) NOT NULL COMMENT &apos;密码，加密存储&apos;,</span><br><span class="line">  `phone` varchar(20) DEFAULT NULL COMMENT &apos;注册手机号&apos;,</span><br><span class="line">  `created` datetime NOT NULL COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `salt` varchar(32) NOT NULL COMMENT &apos;密码加密的salt值&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `username` (`username`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8 COMMENT=&apos;用户表&apos;;</span><br></pre></td></tr></table></figure><p>数据结构比较简单，因为根据用户名查询的频率较高，所以我们给用户名创建了索引</p><h2 id="2-3-基本代码"><a href="#2-3-基本代码" class="headerlink" title="2.3.基本代码"></a>2.3.基本代码</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String salt;<span class="comment">// 密码的盐值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：为了安全考虑。这里对password和salt添加了注解@JsonIgnore，这样在json序列化时，就不会把password和salt返回。</p><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-数据验证功能"><a href="#3-数据验证功能" class="headerlink" title="3.数据验证功能"></a>3.数据验证功能</h1><h2 id="3-1-接口说明："><a href="#3-1-接口说明：" class="headerlink" title="3.1.接口说明："></a>3.1.接口说明：</h2><p>实现用户数据的校验，主要包括对：手机号、用户名的唯一性校验。</p><h3 id="接口路径"><a href="#接口路径" class="headerlink" title="接口路径"></a>接口路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /check/&#123;data&#125;/&#123;type&#125;</span><br></pre></td></tr></table></figure><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><table><thead><tr><th>参数</th><th>说明</th><th>是否必须</th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>要校验的数据</td><td>是</td><td>String</td><td>无</td></tr><tr><td>type</td><td>要校验的数据类型：1，用户名；2，手机；</td><td>否</td><td>Integer</td><td>1</td></tr></tbody></table><h3 id="返回结果："><a href="#返回结果：" class="headerlink" title="返回结果："></a>返回结果：</h3><p>返回布尔类型结果：</p><ul><li>true：可用</li><li>false：不可用</li></ul><p>状态码：</p><ul><li>200：校验成功</li><li>400：参数有误</li><li>500：服务器内部异常</li></ul><h2 id="3-2-controller"><a href="#3-2-controller" class="headerlink" title="3.2.controller"></a>3.2.controller</h2><p>因为有了接口，我们可以不关心页面，所有需要的东西都一清二楚：</p><ul><li>请求方式：GET</li><li>请求路径：/check/{param}/{type}</li><li>请求参数：param,type</li><li>返回结果：true或false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 校验数据是否可用</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"check/&#123;data&#125;/&#123;type&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Boolean&gt; <span class="title">checkUserData</span><span class="params">(@PathVariable(<span class="string">"data"</span>)</span> String data, @<span class="title">PathVariable</span><span class="params">(value = <span class="string">"type"</span>, defaultValue=<span class="string">"1"</span>)</span> Integer type) </span>&#123;</span><br><span class="line">    Boolean boo = <span class="keyword">this</span>.userService.checkData(data, type);</span><br><span class="line">    <span class="keyword">if</span> (boo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(boo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-Service"><a href="#3-3-Service" class="headerlink" title="3.3.Service"></a>3.3.Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">checkData</span><span class="params">(String data, Integer type)</span> </span>&#123;</span><br><span class="line">    User record = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            record.setUsername(data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            record.setPhone(data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.userMapper.selectCount(record) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4.测试"></a>3.4.测试</h2><p>我们在数据库插入一条假数据：</p><p> <img src="http://img.smallmartial.cn/20190423085420.png" alt="image"></p><p>然后在浏览器调用接口，测试：</p><p> <img src="http://img.smallmartial.cn/20190423085341.png" alt="image"></p><p><img src="http://img.smallmartial.cn/20190423085517.png" alt="image"></p><h1 id="4-阿里大于短信服务"><a href="#4-阿里大于短信服务" class="headerlink" title="4.阿里大于短信服务"></a>4.阿里大于短信服务</h1><h2 id="4-1-demo"><a href="#4-1-demo" class="headerlink" title="4.1.demo"></a>4.1.demo</h2><p>注册页面上有短信发送的按钮，当用户点击发送短信，我们需要生成验证码，发送给用户。我们将使用阿里提供的阿里大于来实现短信发送。</p><h2 id="4-2-创建短信微服务"><a href="#4-2-创建短信微服务" class="headerlink" title="4.2.创建短信微服务"></a>4.2.创建短信微服务</h2><p>因为系统中不止注册一个地方需要短信发送，因此我们将短信发送抽取为微服务：<code>ly-sms-service</code>，凡是需要的地方都可以使用。</p><p>另外，因为短信发送API调用时长的不确定性，为了提高程序的响应速度，短信发送我们都将采用异步发送方式，即：</p><ul><li>短信服务监听MQ消息，收到消息后发送短信。</li><li>其它服务要发送短信时，通过MQ通知短信微服务。</li></ul><h3 id="4-2-1-创建module"><a href="#4-2-1-创建module" class="headerlink" title="4.2.1.创建module"></a>4.2.1.创建module</h3><p><img src="http://img.smallmartial.cn/1527236934467.png" alt="image"></p><h3 id="4-2-2-pom"><a href="#4-2-2-pom" class="headerlink" title="4.2.2.pom"></a>4.2.2.pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-sms-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-编写启动类"><a href="#4-2-3-编写启动类" class="headerlink" title="4.2.3.编写启动类"></a>4.2.3.编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LySmsService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LySmsService.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-4-编写application-yml"><a href="#4-2-4-编写application-yml" class="headerlink" title="4.2.4.编写application.yml"></a>4.2.4.编写application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">sms-service</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><h2 id="4-3-编写短信工具类"><a href="#4-3-编写短信工具类" class="headerlink" title="4.3.编写短信工具类"></a>4.3.编写短信工具类</h2><h3 id="4-3-1-属性抽取"><a href="#4-3-1-属性抽取" class="headerlink" title="4.3.1.属性抽取"></a>4.3.1.属性抽取</h3><p>我们首先把一些常量抽取到application.yml中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line"><span class="attr">  sms:</span></span><br><span class="line"><span class="attr">    accessKeyId:</span> <span class="string">JWffwFJIwada</span> <span class="comment"># 你自己的accessKeyId</span></span><br><span class="line"><span class="attr">    accessKeySecret:</span> <span class="string">aySRliswq8fe7rF9gQyy1Izz4MQ</span> <span class="comment"># 你自己的AccessKeySecret</span></span><br><span class="line"><span class="attr">    signName:</span> <span class="string">乐优商城</span> <span class="comment"># 签名名称</span></span><br><span class="line"><span class="attr">    verifyCodeTemplate:</span> <span class="string">SMS_133976814</span> <span class="comment"># 模板名称</span></span><br></pre></td></tr></table></figure><p>然后注入到属性类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.sms"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String accessKeyId;</span><br><span class="line"></span><br><span class="line">    String accessKeySecret;</span><br><span class="line"></span><br><span class="line">    String signName;</span><br><span class="line"></span><br><span class="line">    String verifyCodeTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAccessKeyId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accessKeyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessKeyId</span><span class="params">(String accessKeyId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accessKeyId = accessKeyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAccessKeySecret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accessKeySecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessKeySecret</span><span class="params">(String accessKeySecret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accessKeySecret = accessKeySecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSignName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> signName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSignName</span><span class="params">(String signName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.signName = signName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVerifyCodeTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> verifyCodeTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerifyCodeTemplate</span><span class="params">(String verifyCodeTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.verifyCodeTemplate = verifyCodeTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-工具类"><a href="#4-3-2-工具类" class="headerlink" title="4.3.2.工具类"></a>4.3.2.工具类</h3><p>我们把阿里提供的demo进行简化和抽取，封装一个工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SmsProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产品名称:云通信短信API产品,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String product = <span class="string">"Dysmsapi"</span>;</span><br><span class="line">    <span class="comment">//产品域名,开发者无需替换</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SmsUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendSmsResponse <span class="title">sendSms</span><span class="params">(String phone, String code, String signName, String template)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可自助调整超时时间</span></span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化acsClient,暂不支持region化</span></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>,</span><br><span class="line">                prop.getAccessKeyId(), prop.getAccessKeySecret());</span><br><span class="line">        DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</span><br><span class="line">        IAcsClient acsClient = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装请求对象-具体描述见控制台-文档部分内容</span></span><br><span class="line">        SendSmsRequest request = <span class="keyword">new</span> SendSmsRequest();</span><br><span class="line">        request.setMethod(MethodType.POST);</span><br><span class="line">        <span class="comment">//必填:待发送手机号</span></span><br><span class="line">        request.setPhoneNumbers(phone);</span><br><span class="line">        <span class="comment">//必填:短信签名-可在短信控制台中找到</span></span><br><span class="line">        request.setSignName(signName);</span><br><span class="line">        <span class="comment">//必填:短信模板-可在短信控制台中找到</span></span><br><span class="line">        request.setTemplateCode(template);</span><br><span class="line">        <span class="comment">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的$&#123;name&#125;,您的验证码为$&#123;code&#125;"时,此处的值为</span></span><br><span class="line">        request.setTemplateParam(<span class="string">"&#123;\"code\":\""</span> + code + <span class="string">"\"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选填-上行短信扩展码(无特殊需求用户请忽略此字段)</span></span><br><span class="line">        <span class="comment">//request.setSmsUpExtendCode("90997");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span></span><br><span class="line">        request.setOutId(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hint 此处可能会抛出异常，注意catch</span></span><br><span class="line">        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"发送短信状态：&#123;&#125;"</span>, sendSmsResponse.getCode());</span><br><span class="line">        logger.info(<span class="string">"发送短信消息：&#123;&#125;"</span>, sendSmsResponse.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendSmsResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"ly.sms"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String accessKeyId;</span><br><span class="line"></span><br><span class="line">    String accessKeySecret;</span><br><span class="line"></span><br><span class="line">    String signName;</span><br><span class="line"></span><br><span class="line">    String verifyCodeTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAccessKeyId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accessKeyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessKeyId</span><span class="params">(String accessKeyId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accessKeyId = accessKeyId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAccessKeySecret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accessKeySecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessKeySecret</span><span class="params">(String accessKeySecret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accessKeySecret = accessKeySecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSignName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> signName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSignName</span><span class="params">(String signName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.signName = signName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVerifyCodeTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> verifyCodeTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVerifyCodeTemplate</span><span class="params">(String verifyCodeTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.verifyCodeTemplate = verifyCodeTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-编写消息监听器"><a href="#4-4-编写消息监听器" class="headerlink" title="4.4.编写消息监听器"></a>4.4.编写消息监听器</h2><p>接下来，编写消息监听器，当接收到消息后，我们发送短信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SmsProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsUtils smsUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"ly.sms.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(value = <span class="string">"ly.sms.exchange"</span>, </span><br><span class="line">                                 ignoreDeclarationExceptions = <span class="string">"true"</span>),</span><br><span class="line">            key = &#123;<span class="string">"sms.verify.code"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenSms</span><span class="params">(Map&lt;String, String&gt; msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span> || msg.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 放弃处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String phone = msg.get(<span class="string">"phone"</span>);</span><br><span class="line">        String code = msg.get(<span class="string">"code"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(phone) || StringUtils.isBlank(code)) &#123;</span><br><span class="line">            <span class="comment">// 放弃处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        SendSmsResponse resp = <span class="keyword">this</span>.smsUtils.sendSms(phone, code, </span><br><span class="line">                                                     prop.getSignName(),</span><br><span class="line">                                                     prop.getVerifyCodeTemplate());</span><br><span class="line">        <span class="comment">// 发送失败</span></span><br><span class="line">      <span class="comment">//  throw new RuntimeException();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，消息体是一个Map，里面有两个属性：</p><ul><li>phone：电话号码</li><li>code：短信验证码</li></ul><h2 id="4-5-启动"><a href="#4-5-启动" class="headerlink" title="4.5.启动"></a>4.5.启动</h2><p>启动项目，然后查看RabbitMQ控制台，发现交换机已经创建：</p><p><img src="http://img.smallmartial.cn/1527239600218.png" alt="image"></p><p>队列也已经创建：<br><img src="http://img.smallmartial.cn/1527239658153.png" alt="image"></p><p>并且绑定：</p><p><img src="http://img.smallmartial.cn/1527239743836.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目标&quot;&gt;&lt;/a&gt;0.学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;独立创建用户中心&lt;/li&gt;
&lt;li&gt;了解面向接口开发方式&lt;/li&gt;
&lt;li&gt;实现数据校验功能&lt;/
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记二十一-RabbitMQ项目改造</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/22/lyshop-22/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/22/lyshop-22/</id>
    <published>2019-04-22T08:22:07.000Z</published>
    <updated>2019-04-22T08:28:17.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-项目改造"><a href="#3-项目改造" class="headerlink" title="3.项目改造"></a>3.项目改造</h1><p>接下来，我们就改造项目，实现搜索服务、商品静态页的数据同步。</p><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><blockquote><p>发送方：商品微服务</p></blockquote><ul><li><p>什么时候发？</p><p>当商品服务对商品进行写操作：增、删、改的时候，需要发送一条消息，通知其它服务。</p></li><li><p>发送什么内容？</p><p>对商品的增删改时其它服务可能需要新的商品数据，但是如果消息内容中包含全部商品信息，数据量太大，而且并不是每个服务都需要全部的信息。因此我们<strong>只发送商品id</strong>，其它服务可以根据id查询自己需要的信息。</p></li></ul><blockquote><p>接收方：搜索微服务、静态页微服务</p></blockquote><ul><li>接收消息后如何处理？<ul><li>搜索微服务：<ul><li>增/改：添加新的数据到索引库</li><li>删：删除索引库数据</li></ul></li><li>静态页微服务：<ul><li>增：创建新的静态页</li><li>删：删除原来的静态页</li><li>改：创建新的静态页并删除原来的</li></ul></li></ul></li></ul><h2 id="3-2-发送消息"><a href="#3-2-发送消息" class="headerlink" title="3.2.发送消息"></a>3.2.发送消息</h2><p>我们先在商品微服务<code>ly-item-service</code>中实现发送消息。</p><h3 id="3-2-1-引入依赖"><a href="#3-2-1-引入依赖" class="headerlink" title="3.2.1.引入依赖"></a>3.2.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-配置文件"><a href="#3-2-2-配置文件" class="headerlink" title="3.2.2.配置文件"></a>3.2.2.配置文件</h3><p>我们在application.yml中添加一些有关RabbitMQ的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line"><span class="attr">    template:</span></span><br><span class="line"><span class="attr">      retry:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        initial-interval:</span> <span class="number">10000</span><span class="string">ms</span></span><br><span class="line"><span class="attr">        max-interval:</span> <span class="number">300000</span><span class="string">ms</span></span><br><span class="line"><span class="attr">        multiplier:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">      exchange:</span> <span class="string">ly.item.exchange</span></span><br><span class="line"><span class="attr">    publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>template：有关<code>AmqpTemplate</code>的配置<ul><li>retry：失败重试<ul><li>enabled：开启失败重试</li><li>initial-interval：第一次重试的间隔时长</li><li>max-interval：最长重试间隔，超过这个间隔将不再重试</li><li>multiplier：下次重试间隔的倍数，此处是2即下次重试间隔是上次的2倍</li></ul></li><li>exchange：缺省的交换机名称，此处配置后，发送消息如果不指定交换机就会使用这个</li></ul></li><li>publisher-confirms：生产者确认机制，确保消息会正确发送，如果发送失败会有错误回执，从而触发重试</li></ul><h3 id="3-2-3-改造GoodsService"><a href="#3-2-3-改造GoodsService" class="headerlink" title="3.2.3.改造GoodsService"></a>3.2.3.改造GoodsService</h3><p>封装一个发送消息到mq的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Long id, String type)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"item."</span> + type, id);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"&#123;&#125;商品消息发送异常，商品id：&#123;&#125;"</span>, type, id, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里没有指定交换机，因此默认发送到了配置中的：<code>ly.item.exchange</code></li></ul><p>注意：这里要把所有异常都try起来，不能让消息的发送影响到正常的业务逻辑</p><p>然后在新增的时候调用：</p><p> <img src="http://img.smallmartial.cn/1527156169187.png" alt="1527156169187"></p><p>修改的时候调用：</p><p> <img src="http://img.smallmartial.cn//1527156211012.png" alt="1527156211012"></p><h2 id="3-3-搜索服务接收消息"><a href="#3-3-搜索服务接收消息" class="headerlink" title="3.3.搜索服务接收消息"></a>3.3.搜索服务接收消息</h2><p>搜索服务接收到消息后要做的事情：</p><ul><li>增：添加新的数据到索引库</li><li>删：删除索引库数据</li><li>改：修改索引库数据</li></ul><p>因为索引库的新增和修改方法是合二为一的，因此我们可以将这两类消息一同处理，删除另外处理。</p><h3 id="3-3-1-引入依赖"><a href="#3-3-1-引入依赖" class="headerlink" title="3.3.1.引入依赖"></a>3.3.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-添加配置"><a href="#3-3-2-添加配置" class="headerlink" title="3.3.2.添加配置"></a>3.3.2.添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h3 id="3-3-3-编写监听器"><a href="#3-3-3-编写监听器" class="headerlink" title="3.3.3.编写监听器"></a>3.3.3.编写监听器</h3><p> <img src="http://img.smallmartial.cn//1527164472745.png" alt="1527164472745"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理insert和update的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"ly.create.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"ly.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建或更新索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.createIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理delete的消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"ly.delete.index.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"ly.item.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除索引</span></span><br><span class="line">        <span class="keyword">this</span>.searchService.deleteIndex(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-编写创建和删除索引方法"><a href="#3-3-4-编写创建和删除索引方法" class="headerlink" title="3.3.4.编写创建和删除索引方法"></a>3.3.4.编写创建和删除索引方法</h3><p>这里因为要创建和删除索引，我们需要在SearchService中拓展两个方法，创建和删除索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询spu</span></span><br><span class="line">        Spu spu = goodClient.querySpuById(id);</span><br><span class="line">        <span class="comment">//构建goods</span></span><br><span class="line">        Goods goods = bulidGoods(spu);</span><br><span class="line">        <span class="comment">//存入索引库</span></span><br><span class="line">        repository.save(goods);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建索引的方法可以从之前导入数据的测试类中拷贝和改造。</p><h2 id="3-4-静态页服务接收消息"><a href="#3-4-静态页服务接收消息" class="headerlink" title="3.4.静态页服务接收消息"></a>3.4.静态页服务接收消息</h2><p>商品静态页服务接收到消息后的处理：</p><ul><li>增：创建新的静态页</li><li>删：删除原来的静态页</li><li>改：创建新的静态页并删除原来的</li></ul><p>不过，我们编写的创建静态页的方法也具备覆盖以前页面的功能，因此：增和改的消息可以放在一个方法中处理，删除消息放在另一个方法处理。</p><h3 id="3-4-1-引入依赖"><a href="#3-4-1-引入依赖" class="headerlink" title="3.4.1.引入依赖"></a>3.4.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-添加配置"><a href="#3-4-2-添加配置" class="headerlink" title="3.4.2.添加配置"></a>3.4.2.添加配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><p>这里只是接收消息而不发送，所以不用配置template相关内容。</p><h3 id="3-4-3-编写监听器"><a href="#3-4-3-编写监听器" class="headerlink" title="3.4.3.编写监听器"></a>3.4.3.编写监听器</h3><p> <img src="http://img.smallmartial.cn//1527164231784.png" alt="1527164231784"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"ly.create.page.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"ly.item.exchange"</span>, </span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>, </span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = &#123;<span class="string">"item.insert"</span>, <span class="string">"item.update"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenCreate</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建页面</span></span><br><span class="line">        fileService.createHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"ly.delete.page.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"ly.item.exchange"</span>, </span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>, </span><br><span class="line">                    type = ExchangeTypes.TOPIC),</span><br><span class="line">            key = <span class="string">"item.delete"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDelete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建页面</span></span><br><span class="line">        fileService.deleteHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-添加删除页面方法"><a href="#3-4-4-添加删除页面方法" class="headerlink" title="3.4.4.添加删除页面方法"></a>3.4.4.添加删除页面方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHtml</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.destPath, id + <span class="string">".html"</span>);</span><br><span class="line">    file.deleteOnExit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5.测试"></a>3.5.测试</h2><h3 id="查看RabbitMQ控制台"><a href="#查看RabbitMQ控制台" class="headerlink" title="查看RabbitMQ控制台"></a>查看RabbitMQ控制台</h3><p>重新启动项目，并且登录RabbitMQ管理界面：<a href="http://192.168.56.101:15672" target="_blank" rel="noopener">http://192.168.56.101:15672</a></p><p>可以看到，交换机已经创建出来了：</p><p> <img src="http://img.smallmartial.cn//1527164971474.png" alt="1527164971474"></p><p>队列也已经创建完毕：</p><p> <img src="http://img.smallmartial.cn//1527165003173.png" alt="1527165003173"></p><p>并且队列都已经绑定到交换机：</p><p> <img src="http://img.smallmartial.cn//1527165040632.png" alt="1527165040632"></p><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>我们搜索下手机：</p><p><img src="http://img.smallmartial.cn//1527165091338.png" alt="1527165091338"></p><p>商品详情页：</p><p><img src="http://img.smallmartial.cn//1527165112725.png" alt="1527165112725"></p><h3 id="修改商品"><a href="#修改商品" class="headerlink" title="修改商品"></a>修改商品</h3><p>然后在管理后台修改商品：</p><p>我们修改以下内容：</p><p>标题改成6.1</p><p> <img src="http://img.smallmartial.cn//1527165345197.png" alt="1527165345197"></p><p>商品详情加点文字：</p><p> <img src="http://img.smallmartial.cn//1527165323776.png" alt="1527165323776"></p><p>价格改为3999</p><p> <img src="http://img.smallmartial.cn//1527165286619.png" alt="1527165286619"></p><h3 id="再次查看数据"><a href="#再次查看数据" class="headerlink" title="再次查看数据"></a>再次查看数据</h3><p><img src="http://img.smallmartial.cn//1527166160735.png" alt="1527166160735"></p><p><img src="http://img.smallmartial.cn//1527166183985.png" alt="1527166183985"></p><p><img src="http://img.smallmartial.cn//1527166202112.png" alt="1527166202112"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-项目改造&quot;&gt;&lt;a href=&quot;#3-项目改造&quot; class=&quot;headerlink&quot; title=&quot;3.项目改造&quot;&gt;&lt;/a&gt;3.项目改造&lt;/h1&gt;&lt;p&gt;接下来，我们就改造项目，实现搜索服务、商品静态页的数据同步。&lt;/p&gt;
&lt;h2 id=&quot;3-1-思路分析&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="RabbitMQ" scheme="https://github.com/smallmartial/blog.git/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记二十-RabbitMQ简介及使用</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/22/lyshop-21/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/22/lyshop-21/</id>
    <published>2019-04-22T07:54:48.000Z</published>
    <updated>2019-04-22T08:17:08.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解常见的MQ产品</li><li>了解RabbitMQ的5种消息模型</li><li>会使用Spring AMQP</li><li>利用MQ实现搜索和静态页的数据同步</li></ul><h1 id="1-RabbitMQ"><a href="#1-RabbitMQ" class="headerlink" title="1.RabbitMQ"></a>1.RabbitMQ</h1><h2 id="1-1-搜索与商品服务的问题"><a href="#1-1-搜索与商品服务的问题" class="headerlink" title="1.1.搜索与商品服务的问题"></a>1.1.搜索与商品服务的问题</h2><p>目前我们已经完成了商品详情和搜索系统的开发。我们思考一下，是否存在问题？</p><ul><li>商品的原始数据保存在数据库中，增删改查都在数据库中完成。</li><li>搜索服务数据来源是索引库，如果数据库商品发生变化，索引库数据不能及时更新。</li><li>商品详情做了页面静态化，静态页面数据也不会随着数据库商品发生变化。</li></ul><p>如果我们在后台修改了商品的价格，搜索页面和商品详情页显示的依然是旧的价格，这样显然不对。该如何解决？</p><p>这里有两种解决方案：</p><ul><li>方案1：每当后台对商品做增删改操作，同时要修改索引库数据及静态页面</li></ul><ul><li>方案2：搜索服务和商品页面服务对外提供操作接口，后台在商品增删改后，调用接口</li></ul><p>以上两种方式都有同一个严重问题：就是代码耦合，后台服务中需要嵌入搜索和商品页面服务，违背了微服务的<code>独立</code>原则。</p><p>所以，我们会通过另外一种方式来解决这个问题：消息队列</p><h2 id="1-2-消息队列（MQ）"><a href="#1-2-消息队列（MQ）" class="headerlink" title="1.2.消息队列（MQ）"></a>1.2.消息队列（MQ）</h2><h3 id="1-2-1-什么是消息队列"><a href="#1-2-1-什么是消息队列" class="headerlink" title="1.2.1.什么是消息队列"></a>1.2.1.什么是消息队列</h3><p>消息队列，即MQ，Message Queue。</p><p><img src="http://img.smallmartial.cn//1527063872737.png" alt="1527063872737"></p><p>消息队列是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p><p>结合前面所说的问题：</p><ul><li>商品服务对商品增删改以后，无需去操作索引库或静态页面，只是发送一条消息，也不关心消息被谁接收。</li><li>搜索服务和静态页面服务接收消息，分别去处理索引库和静态页面。</li></ul><p>如果以后有其它系统也依赖商品服务的数据，同样监听消息即可，商品服务无需任何代码修改。</p><h3 id="1-2-2-AMQP和JMS"><a href="#1-2-2-AMQP和JMS" class="headerlink" title="1.2.2.AMQP和JMS"></a>1.2.2.AMQP和JMS</h3><p>MQ是消息通信的模型，并发具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p><img src="http://img.smallmartial.cn//1527064480681.png" alt="1527064480681"></p><p><img src="http://img.smallmartial.cn//1527064487042.png" alt="1527064487042"></p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><h3 id="1-2-3-常见MQ产品"><a href="#1-2-3-常见MQ产品" class="headerlink" title="1.2.3.常见MQ产品"></a>1.2.3.常见MQ产品</h3><p><img src="http://img.smallmartial.cn//1527064606029.png" alt="1527064606029"></p><ul><li><p>ActiveMQ：基于JMS</p></li><li><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p></li><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li><li>Kafka：分布式消息系统，高吞吐量</li></ul><h3 id="1-2-4-RabbitMQ"><a href="#1-2-4-RabbitMQ" class="headerlink" title="1.2.4.RabbitMQ"></a>1.2.4.RabbitMQ</h3><p>RabbitMQ是基于AMQP的一款消息管理系统</p><p>官网： <a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><p>官方教程：<a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">http://www.rabbitmq.com/getstarted.html</a></p><p><img src="http://img.smallmartial.cn//1527064881869.png" alt="1527064881869"></p><p> <img src="http://img.smallmartial.cn//1527064762982.png" alt="1527064762982"></p><p>RabbitMQ基于Erlang语言开发：</p><p><img src="http://img.smallmartial.cn/1527065024587.png" alt="1527065024587"></p><h2 id="1-3-下载和安装"><a href="#1-3-下载和安装" class="headerlink" title="1.3.下载和安装"></a>1.3.下载和安装</h2><blockquote><p>参考上篇博客</p></blockquote><h2 id="1-4-五种消息模型"><a href="#1-4-五种消息模型" class="headerlink" title="1.4.五种消息模型"></a>1.4.五种消息模型</h2><p>RabbitMQ提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种。</p><p>但是其实3、4、5这三种都属于订阅模型，只不过进行路由的方式不同。</p><p><img src="http://img.smallmartial.cn//1527068544487.png" alt="1527068544487"></p><h3 id="1-4-1-导入demo工程"><a href="#1-4-1-导入demo工程" class="headerlink" title="1.4.1.导入demo工程"></a>1.4.1.导入demo工程</h3><p>我们通过一个demo工程来了解下RabbitMQ的工作方式：</p><blockquote><p>github地址：<a href="https://github.com/smallmartial/springbootdemo.git">https://github.com/smallmartial/springbootdemo.git</a></p></blockquote><h3 id="1-4-2-基本消息模型"><a href="#1-4-2-基本消息模型" class="headerlink" title="1.4.2.基本消息模型"></a>1.4.2.基本消息模型</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>官方文档说明：</p><blockquote><p>RabbitMQ是一个消息的代理者（Message Broker）：它接收消息并且传递消息。</p><p>你可以认为它是一个邮局：当你投递邮件到一个邮箱，你很肯定邮递员会终究会将邮件递交给你的收件人。与此类似，RabbitMQ 可以是一个邮箱、邮局、同时还有邮递员。</p><p>不同之处在于：RabbitMQ不是传递纸质邮件，而是二进制的数据</p></blockquote><p>基本消息模型图：</p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>连接工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立与RabbitMQ的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置服务地址</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.56.101"</span>);</span><br><span class="line">        <span class="comment">//端口</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置账号信息，用户名、密码、vhost</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/leyou"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"leyou"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"leyou"</span>);</span><br><span class="line">        <span class="comment">// 通过工程获取连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 从连接中创建通道，使用通道才能完成消息相关的操作</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明（创建）队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="comment">// 向指定的队列中发送消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p> <img src="http://img.smallmartial.cn//1527072505530.png" alt="1527072505530"></p><h4 id="web控制台查看消息"><a href="#web控制台查看消息" class="headerlink" title="web控制台查看消息"></a>web控制台查看消息</h4><p>进入队列页面，可以看到新建了一个队列：simple_queue</p><p><img src="http://img.smallmartial.cn/1527072699034.png" alt="1527072699034"></p><p>点击队列名称，进入详情页，可以查看消息：</p><p> <img src="http://img.smallmartial.cn/1527072746634.png" alt="1527072746634"></p><p>在控制台查看消息并不会将消息消费，所以消息还在。</p><h4 id="消费者获取消息"><a href="#消费者获取消息" class="headerlink" title="消费者获取消息"></a>消费者获取消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数：是否自动进行消息确认。</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台：</p><p> <img src="http://img.smallmartial.cn//1527072874080.png" alt="1527072874080"></p><p>这个时候，队列中的消息就没了：</p><p><img src="http://img.smallmartial.cn//1527072947108.png" alt="1527072947108"></p><h4 id="消费者的消息确认机制-Acknowlage"><a href="#消费者的消息确认机制-Acknowlage" class="headerlink" title="消费者的消息确认机制(Acknowlage)"></a>消费者的消息确认机制(Acknowlage)</h4><p>通过刚才的案例可以看出，消息一旦被消费者接收，队列中的消息就会被删除。</p><p>那么问题来了：RabbitMQ怎么知道消息被接收了呢？</p><p>这就要通过消息确认机制（Acknowlege）来实现了。当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收。不过这种回执ACK分两种情况：</p><ul><li>自动ACK：消息一旦被接收，消费者自动发送ACK</li><li>手动ACK：消息接收后，不会发送ACK，需要手动调用</li></ul><p>大家觉得哪种更好呢？</p><p>这需要看消息的重要性：</p><ul><li>如果消息不太重要，丢失也没有影响，那么自动ACK会比较方便</li><li>如果消息非常重要，不容丢失。那么最好在消费完成后手动ACK，否则接收消息后就自动ACK，RabbitMQ就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。</li></ul><p>我们之前的测试都是自动ACK的，如果要手动ACK，需要改动我们的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"simple_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [x] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">                <span class="comment">// 手动进行ACK</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数false，手动进行ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到最后一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, consumer);</span><br></pre></td></tr></table></figure><p>如果第二个参数为true，则会自动进行ACK；如果为false，则需要手动ACK。方法的声明：</p><p><img src="http://img.smallmartial.cn//1527073500352.png" alt="1527073500352"></p><h3 id="1-4-3-work消息模型"><a href="#1-4-3-work消息模型" class="headerlink" title="1.4.3.work消息模型"></a>1.4.3.work消息模型</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>在刚才的基本模型中，一个生产者，一个消费者，生产的消息直接被消费者消费。比较简单。</p><p>Work queues，也被称为（Task queues），任务模型。</p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p> <img src="http://img.smallmartial.cn//1527078437166.png" alt="1527078437166"></p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者，领取任务并且完成任务，假设完成速度较慢</li><li>C2：消费者2：领取任务并完成任务，假设完成速度快</li></ul><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><p>生产者与案例1中的几乎一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 消息内容</span></span><br><span class="line">            String message = <span class="string">"task .. "</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">            Thread.sleep(i * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这里我们是循环发送50条消息。</p><h4 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h4><p><img src="http://img.smallmartial.cn//1527085386747.png" alt="1527085386747"></p><h4 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h4><p><img src="http://img.smallmartial.cn//1527085448377.png" alt="1527085448377"></p><p>与消费者1基本类似，就是没有设置消费耗时时间。</p><p>这里是模拟有些消费者快，有些比较慢。</p><p>接下来，两个消费者一同启动，然后发送50条消息：</p><p><img src="http://img.smallmartial.cn//1527085826462.png" alt="1527085826462"></p><p>可以发现，两个消费者各自消费了25条消息，而且各不相同，这就实现了任务的分发。</p><h4 id="能者多劳"><a href="#能者多劳" class="headerlink" title="能者多劳"></a>能者多劳</h4><p>刚才的实现有问题吗？</p><ul><li>消费者1比消费者2的效率要低，一次任务的耗时较长</li><li>然而两人最终消费的消息数量是一样的</li><li>消费者2大量时间处于空闲状态，消费者1一直忙碌</li></ul><p>现在的状态属于是把任务平均分配，正确的做法应该是消费越快的人，消费的越多。</p><p>怎么实现呢？</p><p>我们可以修改设置，让消费者同一时间只接收一条消息，这样处理完成之前，就不会接收更多消息，就可以让处理快的人，接收更多消息 ：</p><p><img src="http://img.smallmartial.cn//1527086103576.png" alt="1527086103576"></p><p>再次测试：</p><p><img src="http://img.smallmartial.cn//1527086159534.png" alt="1527086159534"></p><h3 id="1-4-4-订阅模型分类"><a href="#1-4-4-订阅模型分类" class="headerlink" title="1.4.4.订阅模型分类"></a>1.4.4.订阅模型分类</h3><p>订阅模型示意图：</p><p> <img src="http://img.smallmartial.cn//1527086284940.png" alt="1527086284940"></p><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h3 id="1-4-5-订阅模型-Fanout"><a href="#1-4-5-订阅模型-Fanout" class="headerlink" title="1.4.5.订阅模型-Fanout"></a>1.4.5.订阅模型-Fanout</h3><p>Fanout，也称为广播。</p><h4 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h4><p>流程图：</p><p> <img src="http://img.smallmartial.cn//1527086564505.png" alt="1527086564505"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个消费者</li><li>2）  每个<strong>消费者有自己的queue</strong>（队列）</li><li>3）  每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li>4）  <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>5）  交换机把消息发送给绑定过的所有队列</li><li>6）  队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h4 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h4><p>两个变化：</p><ul><li>1）  声明Exchange，不再声明Queue</li><li>2）  发送消息到Exchange，不再发送到Queue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为fanout</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"Hello everyone"</span>;</span><br><span class="line">        <span class="comment">// 发布消息到Exchange</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [生产者] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者1-1"><a href="#消费者1-1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意代码中：<strong>队列需要和交换机绑定</strong></p><h4 id="消费者2-1"><a href="#消费者2-1" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"fanout_exchange_queue_2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"fanout_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，手动返回完成</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我们运行两个消费者，然后发送1条消息：</p><p> <img src="http://img.smallmartial.cn//1527087071693.png" alt="1527087071693"></p><h3 id="1-4-6-订阅模型-Direct"><a href="#1-4-6-订阅模型-Direct" class="headerlink" title="1.4.6.订阅模型-Direct"></a>1.4.6.订阅模型-Direct</h3><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p> 在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p>流程图：</p><p> <img src="http://img.smallmartial.cn//1527087677192.png" alt="1527087677192"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h4 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h4><p>此处我们模拟商品的增删改，发送消息的RoutingKey分别是：insert、update、delete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为direct</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"商品新增了， id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者1-2"><a href="#消费者1-2" class="headerlink" title="消费者1"></a>消费者1</h4><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。假设此处需要update和delete消息</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2-2"><a href="#消费者2-2" class="headerlink" title="消费者2"></a>消费者2</h4><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"direct_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"direct_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"insert"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>我们分别发送增、删、改的RoutingKey，发现结果：</p><p> <img src="http://img.smallmartial.cn//1527088296131.png" alt="1527088296131"></p><h3 id="1-4-7-订阅模型-Topic"><a href="#1-4-7-订阅模型-Topic" class="headerlink" title="1.4.7.订阅模型-Topic"></a>1.4.7.订阅模型-Topic</h3><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p>​         <code>#</code>：匹配一个或多个词</p><p>​         <code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p>​         <code>audit.#</code>：能够匹配<code>audit.irs.corporate</code> 或者 <code>audit.irs</code></p><p>​         <code>audit.*</code>：只能匹配<code>audit.irs</code></p><p>图示：</p><p> <img src="http://img.smallmartial.cn/1527088518574.png" alt="1527088518574"></p><p>解释：</p><ul><li>红色Queue：绑定的是<code>usa.#</code> ，因此凡是以 <code>usa.</code>开头的<code>routing key</code> 都会被匹配到</li><li>黄色Queue：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配</li></ul><h4 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h4><p>使用topic类型的Exchange，发送消息的routing key有3种： <code>item.isnert</code>、<code>item.update</code>、<code>item.delete</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明exchange，指定类型为topic</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);</span><br><span class="line">        <span class="comment">// 消息内容</span></span><br><span class="line">        String message = <span class="string">"新增商品 : id = 1001"</span>;</span><br><span class="line">        <span class="comment">// 发送消息，并且指定routing key 为：insert ,代表新增商品</span></span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">"item.insert"</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [商品服务：] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者1-3"><a href="#消费者1-3" class="headerlink" title="消费者1"></a>消费者1</h4><p>我们此处假设消费者1只接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。需要 update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.update"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.delete"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者1] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2-3"><a href="#消费者2-3" class="headerlink" title="消费者2"></a>消费者2</h4><p>我们此处假设消费者2接收所有类型的消息：新增商品，更新商品和删除商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"topic_exchange_queue_2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_exchange_test"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到连接</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绑定队列到交换机，同时指定需要订阅的routing key。订阅 insert、update、delete</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, <span class="string">"item.*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义队列的消费者</span></span><br><span class="line">        DefaultConsumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// body 即消息体</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">" [消费者2] received : "</span> + msg + <span class="string">"!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，自动ACK</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-持久化"><a href="#1-5-持久化" class="headerlink" title="1.5.持久化"></a>1.5.持久化</h2><p>如何避免消息丢失？</p><p>1）  消费者的ACK机制。可以防止消费者丢失消息。</p><p>2）  但是，如果在消费者消费之前，MQ就宕机了，消息就没了。</p><p>是可以将消息进行持久化呢？</p><p> 要将消息持久化，前提是：队列、Exchange都持久化</p><h3 id="交换机持久化"><a href="#交换机持久化" class="headerlink" title="交换机持久化"></a>交换机持久化</h3><p> <img src="http://img.smallmartial.cn//1527088933255.png" alt="1527088933255"></p><h3 id="队列持久化"><a href="#队列持久化" class="headerlink" title="队列持久化"></a>队列持久化</h3><p> <img src="http://img.smallmartial.cn//1527088960059.png" alt="1527088960059"></p><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p><img src="http://img.smallmartial.cn//1527088984029.png" alt="1527088984029"></p><h1 id="2-Spring-AMQP"><a href="#2-Spring-AMQP" class="headerlink" title="2.Spring AMQP"></a>2.Spring AMQP</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><p>Sprin有很多不同的项目，其中就有对AMQP的支持：</p><p><img src="http://img.smallmartial.cn//1527089338661.png" alt="1527089338661"></p><p>Spring AMQP的页面：<a href="http://projects.spring.io/spring-amqp/" target="_blank" rel="noopener">http://projects.spring.io/spring-amqp/</a> </p><p><img src="http://img.smallmartial.cn//1527089365281.png" alt="1527089365281"></p><p>注意这里一段描述：</p><p>​          <img src="http://img.smallmartial.cn//1527089407483.png" alt="1527089407483">                                               </p><p>​         Spring-amqp是对AMQP协议的抽象实现，而spring-rabbit 是对协议的具体实现，也是目前的唯一实现。底层使用的就是RabbitMQ。</p><h2 id="2-2-依赖和配置"><a href="#2-2-依赖和配置" class="headerlink" title="2.2.依赖和配置"></a>2.2.依赖和配置</h2><p>添加AMQP的启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>中添加RabbitMQ地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.101</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">/leyou</span></span><br></pre></td></tr></table></figure><h2 id="2-3-监听者"><a href="#2-3-监听者" class="headerlink" title="2.3.监听者"></a>2.3.监听者</h2><p>在SpringAmqp中，对消息的消费者进行了封装和抽象，一个普通的JavaBean中的普通方法，只要通过简单的注解，就可以成为一个消费者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(value = <span class="string">"spring.test.queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(</span><br><span class="line">                    value = <span class="string">"spring.test.exchange"</span>,</span><br><span class="line">                    ignoreDeclarationExceptions = <span class="string">"true"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC</span><br><span class="line">            ),</span><br><span class="line">            key = &#123;<span class="string">"#.#"</span>&#125;))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Componet</code>：类上的注解，注册到Spring容器</li><li><code>@RabbitListener</code>：方法上的注解，声明这个方法是一个消费者方法，需要指定下面的属性：<ul><li><code>bindings</code>：指定绑定关系，可以有多个。值是<code>@QueueBinding</code>的数组。<code>@QueueBinding</code>包含下面属性：<ul><li><code>value</code>：这个消费者关联的队列。值是<code>@Queue</code>，代表一个队列</li><li><code>exchange</code>：队列所绑定的交换机，值是<code>@Exchange</code>类型</li><li><code>key</code>：队列和交换机绑定的<code>RoutingKey</code></li></ul></li></ul></li></ul><p>类似listen这样的方法在一个类中可以写多个，就代表多个消费者。</p><h2 id="2-4-AmqpTemplate"><a href="#2-4-AmqpTemplate" class="headerlink" title="2.4.AmqpTemplate"></a>2.4.AmqpTemplate</h2><p>Spring最擅长的事情就是封装，把他人的框架进行封装和整合。</p><p>Spring为AMQP提供了统一的消息处理模板：AmqpTemplate，非常方便的发送消息，其发送方法：</p><p><img src="http://img.smallmartial.cn//1527090258083.png" alt="1527090258083"></p><p>红框圈起来的是比较常用的3个方法，分别是：</p><ul><li>指定交换机、RoutingKey和消息体</li><li>指定消息</li><li>指定RoutingKey和消息，会向默认的交换机发送消息</li></ul><h2 id="2-5-测试代码"><a href="#2-5-测试代码" class="headerlink" title="2.5.测试代码"></a>2.5.测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = Application.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String msg = <span class="string">"hello, Spring boot amqp"</span>;</span><br><span class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"spring.test.exchange"</span>,<span class="string">"a.b"</span>, msg);</span><br><span class="line">        <span class="comment">// 等待10秒后再结束</span></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后查看日志：</p><p><img src="http://img.smallmartial.cn//1527090414110.png" alt="1527090414110"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目标&quot;&gt;&lt;/a&gt;0.学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;了解常见的MQ产品&lt;/li&gt;
&lt;li&gt;了解RabbitMQ的5种消息模型&lt;/li&gt;
&lt;li&gt;会使
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="RabbitMQ" scheme="https://github.com/smallmartial/blog.git/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装RabbitMQ</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/21/lyshop-20/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/21/lyshop-20/</id>
    <published>2019-04-21T14:29:44.000Z</published>
    <updated>2019-04-21T14:41:58.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-安装文件准备"><a href="#0-安装文件准备" class="headerlink" title="0.安装文件准备"></a>0.安装文件准备</h1><p>有一些应用程序和系统，其中Erlang具有重要作用：RabbitMQ，面向消息的中间件是用Erlang编程语言编写的。WhatsApp使用Erlang来运行消息服务器。亚马逊，雅虎，Facebook，摩托罗拉和Github等许多大公司正在使用Erlang。</p><p>现在的博客都太不靠谱了，都没有验证测试，就写出来。误导大家，浪费大家的时间和精力。</p><h1 id="1-安装Erlang"><a href="#1-安装Erlang" class="headerlink" title="1.安装Erlang"></a>1.安装Erlang</h1><p>首先查看查看ubuntu 内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsb_release -a</span><br></pre></td></tr></table></figure><p>结果如下<br><figure class="highlight plain"><figcaption><span>LSB modules are available.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 16.04.2 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br><span class="line">hadoop@Slave11:~/mq$ rz</span><br></pre></td></tr></table></figure></p><p>然后在官网选择对应的版本下载<br><img src="http://img.smallmartial.cn/20190421210339.png" alt></p><p>如果之前有Erlang 请先卸载，用以下命令全局卸载，否则各种坑，笔者已经被折磨一下午了，卸载 Erlang。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge erlang*</span><br><span class="line">rm -rf /usr/local/erlang/</span><br></pre></td></tr></table></figure></p><p>笔者使用的 xshell 在Ubuntu16.0.3上搭建。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mdkir mq</span><br><span class="line">cd mq</span><br><span class="line">//上传</span><br><span class="line">rz</span><br></pre></td></tr></table></figure></p><p><img src="http://img.smallmartial.cn/20190421210751.png" alt></p><p>执行一下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i esl-erlang_21.3.6-1_ubuntu_xenial_amd64.deb</span><br></pre></td></tr></table></figure></p><p>如果没报错证明已安装成功，如果尤其错误自行谷歌吧，笔者的错误太多，无法整理。<br>查看版本 输入 erl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Erlang/OTP 21 [erts-10.3.4] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1] [hipe]</span><br><span class="line"></span><br><span class="line">Eshell V10.3.4  (abort with ^G)</span><br><span class="line">1&gt;</span><br></pre></td></tr></table></figure></p><h1 id="2-安装RabbitMQ"><a href="#2-安装RabbitMQ" class="headerlink" title="2.安装RabbitMQ"></a>2.安装RabbitMQ</h1><blockquote><p>RabbtiMQ对erlang版本要求不同，建议都下载最新版的，不建议用快捷命令下载，如果出现错误建议卸载erlang版本重新安装，参考上文。</p></blockquote><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h2><p>进入文件所在目录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ubuntu/leyou/mq</span><br></pre></td></tr></table></figure><p>官网建议手动安装<br>以下命令安装，参考以下截图<br><img src="assets/20190421212735.png" alt><br>然后输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sync package metadata</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># install dependencies manually</span></span><br><span class="line">sudo apt-get -y install socat logrotate init-system-helpers adduser</span><br><span class="line"></span><br><span class="line"><span class="comment"># download the package</span></span><br><span class="line">sudo apt-get -y install wget// 如果没有下载，有的话跳过</span><br><span class="line">wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.14/rabbitmq-server_3.7.14-1_all.deb</span><br><span class="line"></span><br><span class="line"><span class="comment"># install the package with dpkg</span></span><br><span class="line">sudo dpkg -i rabbitmq-server_3.7.14-1_all.deb</span><br><span class="line"></span><br><span class="line">rm rabbitmq-server_3.7.14-1_all.deb</span><br></pre></td></tr></table></figure><h2 id="2-4-启动命令"><a href="#2-4-启动命令" class="headerlink" title="2.4.启动命令"></a>2.4.启动命令</h2><p>通过下面命令来控制RabbitMQ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service rabbitmq-server start</span><br><span class="line">sudo service rabbitmq-server stop</span><br><span class="line">sudo service rabbitmq-server restart</span><br></pre></td></tr></table></figure><h2 id="2-5-开启web管理界面"><a href="#2-5-开启web管理界面" class="headerlink" title="2.5.开启web管理界面"></a>2.5.开启web管理界面</h2><p>RabbitMQ提供了用来管理的控制界面，十分方便，不过默认是关闭的。</p><p>我们通过命令开启web管理插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p>然后重启RabbitMQ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service rabbitmq-server restart</span><br></pre></td></tr></table></figure><p>然后在主机中通过地址：<a href="http://192.168.56.101:15672即可访问到管理界面" target="_blank" rel="noopener">http://192.168.56.101:15672即可访问到管理界面</a></p><p><img src="http://img.smallmartial.cn/20190421214531.png" alt></p><h1 id="3-管理界面介绍"><a href="#3-管理界面介绍" class="headerlink" title="3.管理界面介绍"></a>3.管理界面介绍</h1><p>第一次访问需要登录，默认的账号密码为：<code>guest/guest</code> 默认 guest 用户只能在 localhost 登录。所以会报错<br><img src="http://img.smallmartial.cn/20190421215551.png" alt></p><p>##解决方案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/rabbitmq/lib</span><br><span class="line">cd rabbitmq_server-3.7.14/ebin</span><br><span class="line">cd rabbitmq_server-3.7.14</span><br></pre></td></tr></table></figure><blockquote><p>删除 &lt; gues t&gt;</p></blockquote><p><img src="http://img.smallmartial.cn/20190421222430.png" alt></p><h2 id="3-1-主页"><a href="#3-1-主页" class="headerlink" title="3.1.主页"></a>3.1.主页</h2><p><img src="http://img.smallmartial.cn/1527067075616.png" alt="1527067075616"></p><ul><li>connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况</li><li>channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。</li><li>Exchanges：交换机，用来实现消息的路由</li><li>Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。</li></ul><p>端口：</p><p>​     <img src="http://img.smallmartial.cn/clip_image001.png" alt="img"></p><h2 id="3-2-添加用户"><a href="#3-2-添加用户" class="headerlink" title="3.2.添加用户"></a>3.2.添加用户</h2><p><img src="http://img.smallmartial.cn/1527068070427.png" alt="1527068070427"></p><p>上面的Tags选项，其实是指定用户的角色，可选的有以下几个：</p><ul><li><p>超级管理员(administrator)</p><p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p>监控者(monitoring)</p><p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p>策略制定者(policymaker)</p><p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p>普通管理者(management)</p><p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li><li><p>其他</p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ul><h2 id="3-3-创建虚拟主机（Virtual-Hosts）"><a href="#3-3-创建虚拟主机（Virtual-Hosts）" class="headerlink" title="3.3.创建虚拟主机（Virtual Hosts）"></a>3.3.创建虚拟主机（Virtual Hosts）</h2><p>为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</p><p><img src="http://img.smallmartial.cn/1527068172958.png" alt="1527068172958"></p><p>创建好虚拟主机，我们还要给用户添加访问权限：</p><p>点击添加好的虚拟主机：</p><p><img src="http://img.smallmartial.cn/1527068230315.png" alt="1527068230315"></p><p>进入虚拟主机设置界面：</p><p> <img src="http://img.smallmartial.cn/1527068380737.png" alt="1527068380737"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-安装文件准备&quot;&gt;&lt;a href=&quot;#0-安装文件准备&quot; class=&quot;headerlink&quot; title=&quot;0.安装文件准备&quot;&gt;&lt;/a&gt;0.安装文件准备&lt;/h1&gt;&lt;p&gt;有一些应用程序和系统，其中Erlang具有重要作用：RabbitMQ，面向消息的中间件是用E
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="RabbitMQ" scheme="https://github.com/smallmartial/blog.git/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记十九-商品详情（二）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/21/lyshop-19/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/21/lyshop-19/</id>
    <published>2019-04-21T03:21:13.000Z</published>
    <updated>2019-04-21T03:25:00.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-页面静态化"><a href="#2-页面静态化" class="headerlink" title="2.页面静态化"></a>2.页面静态化</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><h3 id="2-1-1-问题分析"><a href="#2-1-1-问题分析" class="headerlink" title="2.1.1.问题分析"></a>2.1.1.问题分析</h3><p>现在，我们的页面是通过Thymeleaf模板引擎渲染后返回到客户端。在后台需要大量的数据查询，而后渲染得到HTML页面。会对数据库造成压力，并且请求的响应时间过长，并发能力不高。</p><p>大家能想到什么办法来解决这个问题？</p><p>首先我们能想到的就是缓存技术，比如之前学习过的Redis。不过Redis适合数据规模比较小的情况。假如数据量比较大，例如我们的商品详情页。每个页面如果10kb，100万商品，就是10GB空间，对内存占用比较大。此时就给缓存系统带来极大压力，如果缓存崩溃，接下来倒霉的就是数据库了。</p><p>所以缓存并不是万能的，某些场景需要其它技术来解决，比如静态化。</p><h3 id="2-1-2-什么是静态化"><a href="#2-1-2-什么是静态化" class="headerlink" title="2.1.2.什么是静态化"></a>2.1.2.什么是静态化</h3><p>静态化是指把动态生成的HTML页面变为静态内容保存，以后用户的请求到来，直接访问静态页面，不再经过服务的渲染。</p><p>而静态的HTML页面可以部署在nginx中，从而大大提高并发能力，减小tomcat压力。</p><h3 id="2-1-3-如何实现静态化"><a href="#2-1-3-如何实现静态化" class="headerlink" title="2.1.3.如何实现静态化"></a>2.1.3.如何实现静态化</h3><p>目前，静态化页面都是通过模板引擎来生成，而后保存到nginx服务器来部署。常用的模板引擎比如：</p><ul><li>Freemarker</li><li>Velocity</li><li>Thymeleaf</li></ul><p>我们之前就使用的Thymeleaf，来渲染html返回给用户。Thymeleaf除了可以把渲染结果写入Response，也可以写到本地文件，从而实现静态化。</p><h2 id="2-2-Thymeleaf实现静态化"><a href="#2-2-Thymeleaf实现静态化" class="headerlink" title="2.2.Thymeleaf实现静态化"></a>2.2.Thymeleaf实现静态化</h2><h3 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1.概念"></a>2.2.1.概念</h3><p>先说下Thymeleaf中的几个概念：</p><ul><li>Context：运行上下文</li><li>TemplateResolver：模板解析器</li><li>TemplateEngine：模板引擎</li></ul><blockquote><p>Context</p></blockquote><p>上下文： 用来保存模型数据，当模板引擎渲染时，可以从Context上下文中获取数据用于渲染。</p><p>当与SpringBoot结合使用时，我们放入Model的数据就会被处理到Context，作为模板渲染的数据使用。</p><blockquote><p>TemplateResolver</p></blockquote><p>模板解析器：用来读取模板相关的配置，例如：模板存放的位置信息，模板文件名称，模板文件的类型等等。</p><p>当与SpringBoot结合时，TemplateResolver已经由其创建完成，并且各种配置也都有默认值，比如模板存放位置，其默认值就是：templates。比如模板文件类型，其默认值就是html。</p><blockquote><p>TemplateEngine</p></blockquote><p>模板引擎：用来解析模板的引擎，需要使用到上下文、模板解析器。分别从两者中获取模板中需要的数据，模板文件。然后利用内置的语法规则解析，从而输出解析后的文件。来看下模板引起进行处理的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">templateEngine.process(<span class="string">"模板名"</span>, context, writer);</span><br></pre></td></tr></table></figure><p>三个参数：</p><ul><li>模板名称</li><li>上下文：里面包含模型数据</li><li>writer：输出目的地的流</li></ul><p>在输出时，我们可以指定输出的目的地，如果目的地是Response的流，那就是网络响应。如果目的地是本地文件，那就实现静态化了。</p><p>而在SpringBoot中已经自动配置了模板引擎，因此我们不需要关心这个。现在我们做静态化，就是把输出的目的地改成本地文件即可！</p><h3 id="2-2-2-具体实现"><a href="#2-2-2-具体实现" class="headerlink" title="2.2.2.具体实现"></a>2.2.2.具体实现</h3><p>Service代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;ly.thymeleaf.destPath&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String destPath;<span class="comment">// D:/heima/nginx-1.12.2/html</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建html页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createHtml</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建上下文，</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        <span class="comment">// 把数据加入上下文</span></span><br><span class="line">        context.setVariables(<span class="keyword">this</span>.goodsService.loadModel(id));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建输出流，关联到一个临时文件</span></span><br><span class="line">        File temp = <span class="keyword">new</span> File(id + <span class="string">".html"</span>);</span><br><span class="line">        <span class="comment">// 目标页面文件</span></span><br><span class="line">        File dest = createPath(id);</span><br><span class="line">        <span class="comment">// 备份原页面文件</span></span><br><span class="line">        File bak = <span class="keyword">new</span> File(id + <span class="string">"_bak.html"</span>);</span><br><span class="line">        <span class="keyword">try</span> (PrintWriter writer = <span class="keyword">new</span> PrintWriter(temp, <span class="string">"UTF-8"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 利用thymeleaf模板引擎生成 静态页面</span></span><br><span class="line">            templateEngine.process(<span class="string">"item"</span>, context, writer);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dest.exists()) &#123;</span><br><span class="line">                <span class="comment">// 如果目标文件已经存在，先备份</span></span><br><span class="line">                dest.renameTo(bak);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将新页面覆盖旧页面</span></span><br><span class="line">            FileCopyUtils.copy(temp,dest);</span><br><span class="line">            <span class="comment">// 成功后将备份页面删除</span></span><br><span class="line">            bak.delete();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 失败后，将备份页面恢复</span></span><br><span class="line">            bak.renameTo(dest);</span><br><span class="line">            <span class="comment">// 重新抛出异常，声明页面生成失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 删除临时页面</span></span><br><span class="line">            <span class="keyword">if</span> (temp.exists()) &#123;</span><br><span class="line">                temp.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> File <span class="title">createPath</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File dest = <span class="keyword">new</span> File(<span class="keyword">this</span>.destPath);</span><br><span class="line">        <span class="keyword">if</span> (!dest.exists()) &#123;</span><br><span class="line">            dest.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> File(dest, id + <span class="string">".html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断某个商品的页面是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createPath(id).exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步创建html页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncCreateHtml</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        ThreadUtils.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                createHtml(id);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.yml中配置生成静态文件的目录：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ly:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    destPath:</span> <span class="attr">E:/nginx/nginx/html/item</span></span><br></pre></td></tr></table></figure><p>线程工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        es.submit(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-什么时候创建静态文件"><a href="#2-2-3-什么时候创建静态文件" class="headerlink" title="2.2.3.什么时候创建静态文件"></a>2.2.3.什么时候创建静态文件</h3><p>我们编写好了创建静态文件的service，那么问题来了：什么时候去调用它呢</p><p>想想这样的场景：</p><p>假如大部分的商品都有了静态页面。那么用户的请求都会被nginx拦截下来，根本不会到达我们的<code>ly-goods-page</code>服务。只有那些还没有页面的请求，才可能会到达这里。</p><p>因此，如果请求到达了这里，我们除了返回页面视图外，还应该创建一个静态页面，那么下次就不会再来麻烦我们了。</p><p>所以，我们在GoodsController中添加逻辑，去生成静态html文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 加载所需的数据</span></span><br><span class="line">    Map&lt;String, Object&gt; modelMap = <span class="keyword">this</span>.goodsService.loadModel(id);</span><br><span class="line">    <span class="comment">// 放入模型</span></span><br><span class="line">    model.addAllAttributes(modelMap);</span><br><span class="line">    <span class="comment">// 判断是否需要生成新的页面</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.fileService.exists(id))&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileService.syncCreateHtml(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：生成html 的代码不能对用户请求产生影响，所以这里我们使用额外的线程进行异步创建。</p><h3 id="2-2-4-重启测试："><a href="#2-2-4-重启测试：" class="headerlink" title="2.2.4.重启测试："></a>2.2.4.重启测试：</h3><p>访问一个商品详情，然后查看nginx目录：</p><p> <img src="http://img.smallmartial.cn/1527006563698.png" alt="1527006563698"></p><h2 id="2-3-nginx代理静态页面"><a href="#2-3-nginx代理静态页面" class="headerlink" title="2.3.nginx代理静态页面"></a>2.3.nginx代理静态页面</h2><p>接下来，我们修改nginx，让它对商品请求进行监听，指向本地静态页面，如果本地没找到，才进行反向代理：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /item &#123;</span><br><span class="line">        <span class="comment"># 先找本地</span></span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123; <span class="comment">#请求的文件不存在，就反向代理</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8084;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9002;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启测试：</p><p>发现请求速度得到了极大提升：</p><p><img src="http://img.smallmartial.cn//1527006712523.png" alt="1527006712523"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-页面静态化&quot;&gt;&lt;a href=&quot;#2-页面静态化&quot; class=&quot;headerlink&quot; title=&quot;2.页面静态化&quot;&gt;&lt;/a&gt;2.页面静态化&lt;/h1&gt;&lt;h2 id=&quot;2-1-简介&quot;&gt;&lt;a href=&quot;#2-1-简介&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记十八-商品详情</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/21/lyshop-18/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/21/lyshop-18/</id>
    <published>2019-04-21T02:53:45.000Z</published>
    <updated>2019-04-21T03:13:43.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解Thymeleaf的基本使用</li><li>实现商品详情页的渲染</li><li>知道页面静态化的作用</li><li>实现页面静态化功能</li></ul><h1 id="1-商品详情"><a href="#1-商品详情" class="headerlink" title="1.商品详情"></a>1.商品详情</h1><p>当用户搜索到商品，肯定会点击查看，就会进入商品详情页，接下来我们完成商品详情页的展示，</p><h2 id="1-2-商品详情页服务"><a href="#1-2-商品详情页服务" class="headerlink" title="1.2.商品详情页服务"></a>1.2.商品详情页服务</h2><p>商品详情浏览量比较大，并发高，我们会独立开启一个微服务，用来展示商品详情。</p><h3 id="1-2-1-创建module"><a href="#1-2-1-创建module" class="headerlink" title="1.2.1.创建module"></a>1.2.1.创建module</h3><p>商品的详情页服务，命名为：<code>ly-goods-page</code></p><h3 id="1-2-2-pom依赖"><a href="#1-2-2-pom依赖" class="headerlink" title="1.2.2.pom依赖"></a>1.2.2.pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-goods-page<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ly-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;leyou.latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-编写启动类："><a href="#1-2-3-编写启动类：" class="headerlink" title="1.2.3.编写启动类："></a>1.2.3.编写启动类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LyGoodsPage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LyGoodsPage.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-4-application-yml文件"><a href="#1-2-4-application-yml文件" class="headerlink" title="1.2.4.application.yml文件"></a>1.2.4.application.yml文件</h3><blockquote><p>sringboot版本 2.1.0以上 添加以下内容<br>main:<br>    allow-bean-definition-overriding: true<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">page-service</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 每隔5秒发送一次心跳</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;.$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-2-5-页面模板："><a href="#1-2-5-页面模板：" class="headerlink" title="1.2.5.页面模板："></a>1.2.5.页面模板：</h3><blockquote><p>建议从博主的github 下载一下该页面，编写过程中前端存在各种坑<br><a href="https://github.com/smallmartial/lyshop.git">https://github.com/smallmartial/lyshop.git</a></p></blockquote><p> <img src="http://img.smallmartial.cn/1526971729051.png" alt="1526971729051"></p><h2 id="1-3-页面跳转"><a href="#1-3-页面跳转" class="headerlink" title="1.3.页面跳转"></a>1.3.页面跳转</h2><h3 id="1-3-1-修改页面跳转路径"><a href="#1-3-1-修改页面跳转路径" class="headerlink" title="1.3.1.修改页面跳转路径"></a>1.3.1.修改页面跳转路径</h3><p>首先我们需要修改搜索结果页的商品地址，目前所有商品的地址都是：<a href="http://www.leyou.com/item.html" target="_blank" rel="noopener">http://www.leyou.com/item.html</a></p><p> <img src="http://img.smallmartial.cn//1526955707685.png" alt="1526955707685"></p><p>我们应该跳转到对应的商品的详情页才对。</p><p>那么问题来了：商品详情页是一个SKU？还是多个SKU的集合？</p><p><img src="http://img.smallmartial.cn//1526955852490.png" alt="1526955852490"></p><p>通过详情页的预览，我们知道它是多个SKU的集合，即SPU。</p><p>所以，页面跳转时，我们应该携带SPU的id信息。</p><p>例如：<a href="http://www.leyou.com/item/2314123.html" target="_blank" rel="noopener">http://www.leyou.com/item/2314123.html</a></p><p>这里就采用了路径占位符的方式来传递spu的id，我们打开<code>search.html</code>，修改其中的商品路径：</p><p> <img src="http://img.smallmartial.cn//1526972476737.png" alt="1526972476737"></p><p>刷新页面后在看：</p><p> <img src="http://img.smallmartial.cn//1526972581134.png" alt="1526972581134"></p><h3 id="1-3-2-nginx反向代理"><a href="#1-3-2-nginx反向代理" class="headerlink" title="1.3.2.nginx反向代理"></a>1.3.2.nginx反向代理</h3><p>接下来，我们要把这个地址指向我们刚刚创建的服务：<code>ly-goods-page</code>，其端口为8084</p><p>我们在nginx.conf中添加一段逻辑：</p><p> <img src="http://img.smallmartial.cn//1526973608829.png" alt="1526973608829"></p><p>把以/item开头的请求，代理到我们的8084端口</p><h3 id="1-3-3-编写跳转controller"><a href="#1-3-3-编写跳转controller" class="headerlink" title="1.3.3.编写跳转controller"></a>1.3.3.编写跳转controller</h3><p>在<code>ly-goods-page</code>中编写controller，接收请求，并跳转到商品详情页：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="http://img.smallmartial.cn//1526973726422.png" alt="1526973726422"></p><h3 id="1-3-4-测试"><a href="#1-3-4-测试" class="headerlink" title="1.3.4.测试"></a>1.3.4.测试</h3><p>启动<code>ly-goods-page</code>，点击搜索页面商品，看是能够正常跳转：</p><p><img src="http://img.smallmartial.cn//1526973800526.png" alt="1526973800526"></p><p>现在看到的依然是静态的数据。我们接下来开始页面的渲染</p><h2 id="1-4-封装模型数据"><a href="#1-4-封装模型数据" class="headerlink" title="1.4.封装模型数据"></a>1.4.封装模型数据</h2><p>首先我们一起来分析一下，在这个页面中需要哪些数据</p><p>我们已知的条件是传递来的spu的id，我们需要根据spu的id查询到下面的数据：</p><ul><li>spu信息(无)</li><li>spu的详情</li><li>spu下的所有sku</li><li>品牌</li><li>商品三级分类</li><li>商品规格参数、规格参数组（无）</li></ul><h3 id="1-4-1-商品微服务提供接口"><a href="#1-4-1-商品微服务提供接口" class="headerlink" title="1.4.1.商品微服务提供接口"></a>1.4.1.商品微服务提供接口</h3><h4 id="查询spu接口"><a href="#查询spu接口" class="headerlink" title="查询spu接口"></a>查询spu接口</h4><p>以上所需数据中，查询spu的接口目前还没有，我们需要在商品微服务中提供这个接口：</p><blockquote><p>GoodsApi</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据spu的id查询spu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">Spu <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>GoodsController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"spu/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Spu&gt; <span class="title">querySpuById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    Spu spu = <span class="keyword">this</span>.goodsService.querySpuById(id);</span><br><span class="line">    <span class="keyword">if</span>(spu == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(spu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GoodsService</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Spu <span class="title">querySpuById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    Spu spu = spuMapper.selectByPrimaryKey(id);</span><br><span class="line">    <span class="comment">//查询sku</span></span><br><span class="line">    spu.setSkus(querySkuSpuId(id));</span><br><span class="line">    <span class="comment">//查询detail</span></span><br><span class="line">    spu.setSpuDetail(querySpuDetailById(id));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> spu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询规格参数组"><a href="#查询规格参数组" class="headerlink" title="查询规格参数组"></a>查询规格参数组</h4><p>我们在页面展示规格时，需要按组展示：</p><p> <img src="http://img.smallmartial.cn//1526995904991.png" alt="1526995904991"></p><p>组内有多个参数，为了方便展示。我们提供一个接口，查询规格组，同时在规格组中持有组内的所有参数。</p><blockquote><p>拓展<code>SpecGroup</code>类：</p></blockquote><p>我们在<code>SpecGroup</code>中添加一个<code>SpecParam</code>的集合，保存改组下所有规格参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_spec_group"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SpecParam&gt; params; <span class="comment">// 该组下的所有规格参数集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后提供查询接口：</p><blockquote><p>SpecificationAPI：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"spec/params"</span>)</span><br><span class="line">    <span class="function">List&lt;SpecParam&gt; <span class="title">querySpecSpecParam</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(value = <span class="string">"gid"</span>,required = <span class="keyword">false</span>)</span> Long gid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"cid"</span>, required = <span class="keyword">false</span>)</span> Long cid,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"searching"</span>, required = <span class="keyword">false</span>)</span> Boolean searching,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"generic"</span>, required = <span class="keyword">false</span>)</span> Boolean generic)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"spec/group"</span>)</span><br><span class="line">    <span class="function">List&lt;SpecGroup&gt; <span class="title">queryGroupByCid</span><span class="params">(@RequestParam(<span class="string">"cid"</span>)</span> Long cid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpecificationController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"group"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SpecGroup&gt;&gt; queryListByCid(<span class="meta">@RequestParam</span>(<span class="string">"cid"</span>) Long cid)&#123;</span><br><span class="line">    <span class="keyword">return</span>  ResponseEntity.ok(specificationService.queryListByCid(cid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpecificationService</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SpecGroup&gt; <span class="title">queryListByCid</span><span class="params">(Long cid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询规格参数</span></span><br><span class="line">        List&lt;SpecGroup&gt; specGroups = queryBySpecGroups(cid);</span><br><span class="line">        <span class="comment">//查询当前分类下的参数</span></span><br><span class="line">        List&lt;SpecParam&gt; specParams = querySpecParams(<span class="keyword">null</span>, cid, <span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//先把规格参数变成map，map的key是规格组的id,map的值是组下的所有参数</span></span><br><span class="line">        Map&lt;Long,List&lt;SpecParam&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SpecParam specParam : specParams) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(specParam.getGroupId()))&#123;</span><br><span class="line">                map.put(specParam.getGroupId(),<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(specParam.getGroupId()).add(specParam);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//填充param到group</span></span><br><span class="line">        <span class="keyword">for</span> (SpecGroup specGroup : specGroups) &#123;</span><br><span class="line">            specGroup.setParams(map.get(specGroup.getId()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> specGroups;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-创建FeignClient"><a href="#1-4-2-创建FeignClient" class="headerlink" title="1.4.2.创建FeignClient"></a>1.4.2.创建FeignClient</h3><p>我们在<code>ly-goods-page</code>服务中，创建FeignClient：</p><p> <img src="http://img.smallmartial.cn//1529916126099.png" alt="1529916126099"></p><p>BrandClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CategoryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryClient</span> <span class="keyword">extends</span> <span class="title">CategoryApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsClient:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> <span class="keyword">extends</span> <span class="title">GoodsApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpecificationClient：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationClient</span> <span class="keyword">extends</span> <span class="title">SpecificationApi</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-封装数据模型"><a href="#1-4-3-封装数据模型" class="headerlink" title="1.4.3.封装数据模型"></a>1.4.3.封装数据模型</h3><p>我们创建一个GoodsService，在里面来封装数据模型。</p><p>这里要查询的数据：</p><ul><li><p>SPU</p></li><li><p>SKU集合</p></li><li><p>商品分类</p><ul><li>这里值需要分类的id和name就够了，因此我们查询到以后自己需要封装数据</li></ul></li><li><p>品牌</p></li><li><p>规格组</p><ul><li>查询规格组的时候，把规格组下所有的参数也一并查出，上面提供的接口中已经实现该功能，我们直接调</li></ul></li><li><p>sku的特有规格参数</p><p>有了规格组应该不需要再查询规格参数才对了，为什么这里还要查询？</p><p>因为在SpuDetail中的SpecialSpec中，是以id作为规格参数id作为key，如图：</p><p> <img src="http://img.smallmartial.cn//1529922634977.png" alt="1529922634977"></p><p>但是，在页面渲染时，需要知道参数的名称，如图：</p><p> <img src="http://img.smallmartial.cn//1529922667759.png" alt="1529922667759"></p><p>我们就需要把id和name一一对应起来，因此需要额外查询sku的特有规格参数，然后变成一个id:name的键值对格式。也就是一个Map，方便将来根据id查找！</p></li></ul><blockquote><p>Service代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> smallmartial</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> smallmarital@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodClient goodsClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">loadModel</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; model = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询spu</span></span><br><span class="line">        Spu spu = goodsClient.querySpuById(id);</span><br><span class="line">        <span class="comment">//查询skus</span></span><br><span class="line">        List&lt;Sku&gt; skus =spu.getSkus();</span><br><span class="line">        <span class="comment">//查询详情</span></span><br><span class="line">        SpuDetail detail = spu.getSpuDetail();</span><br><span class="line">       <span class="comment">// String specialSpec = detail.getSpecialSpec();</span></span><br><span class="line">        <span class="comment">//查询brand</span></span><br><span class="line">        Brand brand = brandClient.queryBrandById(spu.getBrandId());</span><br><span class="line">      <span class="comment">//  Brand brand = this.brandClient.queryBrandByIds(Collections.singletonList(spu.getBrandId())).get(0);</span></span><br><span class="line">        <span class="comment">// 准备品牌数据</span></span><br><span class="line">        List&lt;Brand&gt; brands = <span class="keyword">this</span>.brandClient.queryBrandByIds(</span><br><span class="line">                Arrays.asList(spu.getBrandId()));</span><br><span class="line">        <span class="comment">//查询商品分类</span></span><br><span class="line">        List&lt;Category&gt; categories = categoryClient.queryCategoryByIds(</span><br><span class="line">                Arrays.asList(spu.getCid1(), spu.getCid2(), spu.getCid3()));</span><br><span class="line">        <span class="comment">//查询规格参数</span></span><br><span class="line">        List&lt;SpecGroup&gt; specs = specClient.queryGroupByCid(spu.getCid3());</span><br><span class="line">        <span class="comment">//查询规格参数（附加）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询规格组及组内参数</span></span><br><span class="line">        List&lt;SpecGroup&gt; groups = specClient.queryGroupByCid(spu.getCid3());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询商品分类下的特有规格参数</span></span><br><span class="line">        List&lt;SpecParam&gt; params =</span><br><span class="line">                <span class="keyword">this</span>.specClient.querySpecSpecParam(<span class="keyword">null</span>, spu.getCid3(), <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 处理成id:name格式的键值对</span></span><br><span class="line">        Map&lt;Long,String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SpecParam param : params) &#123;</span><br><span class="line">            paramMap.put(param.getId(), param.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对于规格属性的处理需要注意以下几点：</span></span><br><span class="line"><span class="comment">         *      1. 所有规格都保存为id和name形式</span></span><br><span class="line"><span class="comment">         *      2. 规格对应的值保存为id和value形式</span></span><br><span class="line"><span class="comment">         *      3. 都是map形式</span></span><br><span class="line"><span class="comment">         *      4. 将特有规格参数单独抽取</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//获取所有规格参数，然后封装成id和name形式的数据</span></span><br><span class="line"><span class="comment">//        String allSpecJson = detail.getSpecialSpec();</span></span><br><span class="line"><span class="comment">//        List&lt;Map&lt;String, Object&gt;&gt; allSpecs = JsonUtils</span></span><br><span class="line"><span class="comment">//                .nativeRead(allSpecJson, new TypeReference&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() &#123;&#125;);</span></span><br><span class="line"><span class="comment">//        Map&lt;Integer,String&gt; specName = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        Map&lt;Integer,Object&gt; specValue = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        this.getAllSpecifications(allSpecs,specName,specValue);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取特有规格参数</span></span><br><span class="line">        model.put(<span class="string">"title"</span>,spu.getTitle());</span><br><span class="line">        model.put(<span class="string">"subTitle"</span>,spu.getSubTitle());</span><br><span class="line">        model.put(<span class="string">"skus"</span>,skus);</span><br><span class="line">        model.put(<span class="string">"detail"</span>,detail);</span><br><span class="line">        model.put(<span class="string">"brand"</span>,brand);</span><br><span class="line">        model.put(<span class="string">"categories"</span>,categories);</span><br><span class="line">        model.put(<span class="string">"specs"</span>,specs);</span><br><span class="line">        model.put(<span class="string">"paramMap"</span>, paramMap);</span><br><span class="line">        model.put(<span class="string">"groups"</span>, groups);</span><br><span class="line">      <span class="comment">//  model.put("specialSpec");</span></span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在controller中把数据放入model：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsService goodsService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到商品详情页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toItemPage</span><span class="params">(Model model, @PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="comment">// 加载所需的数据</span></span><br><span class="line">        Map&lt;String, Object&gt; modelMap = <span class="keyword">this</span>.goodsService.loadModel(id);</span><br><span class="line">        <span class="comment">// 放入模型</span></span><br><span class="line">        model.addAllAttributes(modelMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-4-页面测试数据"><a href="#1-4-4-页面测试数据" class="headerlink" title="1.4.4.页面测试数据"></a>1.4.4.页面测试数据</h3><p>我们在页面中先写一段JS，把模型中的数据取出观察，看是否成功：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> a = <span class="comment">/*[[$&#123;groups&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> b = <span class="comment">/*[[$&#123;paramMap&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> c = <span class="comment">/*[[$&#123;categories&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> d = <span class="comment">/*[[$&#123;spu&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> e = <span class="comment">/*[[$&#123;spuDetail&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> f = <span class="comment">/*[[$&#123;skus&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> g = <span class="comment">/*[[$&#123;brand&#125;]]*/</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后查看页面源码：</p><p> <img src="http://img.smallmartial.cn//1529921980493.png" alt="1529921980493"></p><p>数据都成功查到了！</p><h2 id="1-5-渲染面包屑"><a href="#1-5-渲染面包屑" class="headerlink" title="1.5.渲染面包屑"></a>1.5.渲染面包屑</h2><p>在商品展示页的顶部，有一个商品分类、品牌、标题的面包屑</p><p> <img src="http://img.smallmartial.cn//1526978423084.png" alt="1526978423084"></p><p>其数据有3部分：</p><ul><li>商品分类</li><li>商品品牌</li><li>spu标题</li></ul><p>我们的模型中都有，所以直接渲染即可（页面37行开始）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"crumb-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sui-breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">"category : $&#123;categories&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;category.name&#125;"</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;brand.name&#125;"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;spu.title&#125;"</span>&gt;</span>Apple iPhone 6s<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-渲染商品列表"><a href="#1-6-渲染商品列表" class="headerlink" title="1.6.渲染商品列表"></a>1.6.渲染商品列表</h2><p>先看下整体效果：</p><p><img src="http://img.smallmartial.cn//1526979330657.png" alt="1526979330657"></p><p>这个部分需要渲染的数据有5块：</p><ul><li>sku图片</li><li>sku标题</li><li>副标题</li><li>sku价格</li><li>特有规格属性列表</li></ul><p>其中，sku 的图片、标题、价格，都必须在用户选中一个具体sku后，才能渲染。而特有规格属性列表可以在spuDetail中查询到。而副标题则是在spu中，直接可以在页面渲染</p><p>因此，我们先对特有规格属性列表进行渲染。等用户选择一个sku，再通过js对其它sku属性渲染</p><h3 id="1-6-1-副标题"><a href="#1-6-1-副标题" class="headerlink" title="1.6.1.副标题"></a>1.6.1.副标题</h3><p>副标题是在spu中，所以我们直接通过Thymeleaf渲染：</p><p>在第87行左右：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;spu.subTitle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>副标题中可能会有超链接，因此这里也用<code>th:utext</code>来展示，效果：</p><p> <img src="http://img.smallmartial.cn//1526980061592.png" alt="1526980061592"></p><h3 id="1-6-2-渲染规格属性列表"><a href="#1-6-2-渲染规格属性列表" class="headerlink" title="1.6.2.渲染规格属性列表"></a>1.6.2.渲染规格属性列表</h3><p>规格属性列表将来会有事件和动态效果。我们需要有js代码参与，不能使用Thymeleaf来渲染了。</p><p>因此，这里我们用vue，不过需要先把数据放到js对象中，方便vue使用</p><h4 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h4><p>我们在页面的<code>head</code>中，定义一个js标签，然后在里面定义变量，保存与sku相关的一些数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// sku集合</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> skus = <span class="comment">/*[[$&#123;skus&#125;]]*/</span> [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> paramMap = <span class="comment">/*[[$&#123;paramMap&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span>  specialSpec= <span class="built_in">JSON</span>.parse(<span class="comment">/*[[$&#123;detail.specialSpec&#125;]]*/</span> <span class="string">""</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>specialSpec：这是SpuDetail中与唯一与Sku相关的数据</p><p>因此我们并没有保存整个spuDetail，而是只保留了这个属性，而且需要手动转为js对象。</p></li><li><p>paramMap：规格参数的id和name对，方便页面根据id获取参数名</p></li><li><p>specialSpec：特有规格参数集合</p></li></ul><p>我们来看下页面获取的数据：</p><p><img src="http://img.smallmartial.cn//1529923363960.png" alt="1529923363960"></p><h4 id="通过Vue渲染"><a href="#通过Vue渲染" class="headerlink" title="通过Vue渲染"></a>通过Vue渲染</h4><p>我们把刚才获得的几个变量保存在Vue实例中：</p><p> <img src="http://img.smallmartial.cn//1529923450934.png" alt="1529923450934"></p><p>然后在页面中渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"specification"</span> <span class="attr">class</span>=<span class="string">"summary-wrap clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in specialSpec"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-text</span>=<span class="string">"paramMap[k]"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">v-for</span>=<span class="string">"(o,j) in v"</span> <span class="attr">:key</span>=<span class="string">"j"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">                &#123;&#123;o&#125;&#125;<span class="tag">&lt;<span class="name">span</span>  <span class="attr">title</span>=<span class="string">"点击取消选择"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后刷新页面查看：</p><p> <img src="http://img.smallmartial.cn//1526983726820.png" alt="1526983726820"></p><p>数据成功渲染了。不过我们发现所有的规格都被勾选了。这是因为现在，每一个规格都有样式：<code>selected</code>，我们应该只选中一个，让它的class样式为selected才对！</p><p>那么问题来了，我们该如何确定用户选择了哪一个？</p><h3 id="1-6-3-规格属性的筛选"><a href="#1-6-3-规格属性的筛选" class="headerlink" title="1.6.3.规格属性的筛选"></a>1.6.3.规格属性的筛选</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>规格参数的格式是这样的：</p><p> <img src="http://img.smallmartial.cn//1529923584730.png" alt="1529923584730"></p><p>每一个规格项是数组中的一个元素，因此我们只要保存被选择的规格项的索引，就能判断哪个是用户选择的了！</p><p>我们需要一个对象来保存用户选择的索引，格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"4"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"12"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">"13"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但问题是，第一次进入页面时，用户并未选择任何参数。因此索引应该有一个默认值，我们将默认值设置为0。</p><p>我们在<code>head</code>的script标签中，对索引对象进行初始化：</p><p> <img src="http://img.smallmartial.cn//1529923658242.png" alt="1529923658242"></p><p>然后在vue中保存：</p><p> <img src="http://img.smallmartial.cn//1529923701283.png" alt="1529923701283"></p><h4 id="页面改造"><a href="#页面改造" class="headerlink" title="页面改造"></a>页面改造</h4><p>我们在页面中，通过判断indexes的值来判断当前规格是否被选中，并且给规格绑定点击事件，点击规格项后，修改indexes中的对应值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"specification"</span> <span class="attr">class</span>=<span class="string">"summary-wrap clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span> <span class="attr">v-for</span>=<span class="string">"(v,k) in specialSpec"</span> <span class="attr">:key</span>=<span class="string">"k"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-text</span>=<span class="string">"k"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span> <span class="attr">v-for</span>=<span class="string">"(o,j) in v"</span> <span class="attr">:key</span>=<span class="string">"j"</span> @<span class="attr">click</span>=<span class="string">"indexes[k]=j"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">:class</span>=<span class="string">"&#123;selected: j === indexes[k]&#125;"</span>&gt;</span></span><br><span class="line">                &#123;&#123;o&#125;&#125;<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"j === indexes[k]"</span> <span class="attr">title</span>=<span class="string">"点击取消选择"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://img.smallmartial.cn//1526984582539.png" alt="1526984582539"></p><p>vue实例中的索引会随着你的点击而变化：</p><p> <img src="http://img.smallmartial.cn//1526984624633.png" alt="1526984624633"></p><h3 id="1-6-4-确定SKU"><a href="#1-6-4-确定SKU" class="headerlink" title="1.6.4.确定SKU"></a>1.6.4.确定SKU</h3><p>在我们设计sku数据的时候，就已经添加了一个字段：indexes：</p><p> <img src="http://img.smallmartial.cn//1526984911652.png" alt="1526984911652"></p><p>这其实就是规格参数的索引组合。</p><p>而我们在页面中，用户点击选择规格后，就会把对应的索引保存起来：</p><p> <img src="http://img.smallmartial.cn//1526984624633.png" alt="1526984624633"></p><p>因此，我们可以根据这个indexes来确定用户要选择的sku</p><p>我们在vue中定义一个计算属性，来计算与索引匹配的sku：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    sku()&#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">Object</span>.values(<span class="keyword">this</span>.indexes).join(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.skus.find(<span class="function"><span class="params">s</span> =&gt;</span> s.indexes = index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在浏览器工具中查看：</p><p> <img src="http://img.smallmartial.cn//1526985208770.png" alt="1526985208770"></p><h3 id="1-6-5-渲染sku列表"><a href="#1-6-5-渲染sku列表" class="headerlink" title="1.6.5.渲染sku列表"></a>1.6.5.渲染sku列表</h3><p>既然已经拿到了用户选中的sku，接下来，就可以在页面渲染数据了</p><h4 id="图片列表"><a href="#图片列表" class="headerlink" title="图片列表"></a>图片列表</h4><p>商品图片是一个字符串，以<code>,</code>分割，页面展示比较麻烦，所以我们编写一个计算属性，将图片字符串变成数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">images()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sku.images ? <span class="keyword">this</span>.sku.images.split(<span class="string">","</span>) : [<span class="string">''</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面改造：</p><p> <img src="http://img.smallmartial.cn//1526985757175.png" alt="1526985757175"></p><p>效果：</p><p> <img src="http://img.smallmartial.cn//1526985783938.png" alt="1526985783938"></p><h4 id="标题和价格"><a href="#标题和价格" class="headerlink" title="标题和价格"></a>标题和价格</h4><p> <img src="http://img.smallmartial.cn//1526985959427.png" alt="1526985959427"></p><h4 id="完整效果"><a href="#完整效果" class="headerlink" title="完整效果"></a>完整效果</h4><p><img src="http://img.smallmartial.cn//1526986020278.png" alt="1526986020278"></p><h2 id="1-7-商品详情"><a href="#1-7-商品详情" class="headerlink" title="1.7.商品详情"></a>1.7.商品详情</h2><p>商品详情页面如下图所示：</p><p><img src="http://img.smallmartial.cn//1526988361312.png" alt="1526988361312"></p><p>分成上下两部分：</p><ul><li>上部：展示的是规格属性列表</li><li>下部：展示的是商品详情</li></ul><h3 id="1-7-2-商品详情"><a href="#1-7-2-商品详情" class="headerlink" title="1.7.2.商品详情"></a>1.7.2.商品详情</h3><p>商品详情是HTML代码，我们不能使用 <code>th:text</code>，应该使用<code>th:utext</code></p><p>在页面的第420行左右：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--商品详情--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro-detail"</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;detail.description&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终展示效果：</p><p><img src="http://img.smallmartial.cn//1526988524852.png" alt="1526988524852"></p><h2 id="1-8-规格包装："><a href="#1-8-规格包装：" class="headerlink" title="1.8.规格包装："></a>1.8.规格包装：</h2><p>规格包装分成两部分：</p><ul><li>规格参数</li><li>包装列表</li></ul><p>而且规格参数需要按照组来显示</p><h3 id="1-8-1-规格参数"><a href="#1-8-1-规格参数" class="headerlink" title="1.8.1.规格参数"></a>1.8.1.规格参数</h3><p>最终的效果：</p><p> <img src="http://img.smallmartial.cn//1526995904991.png" alt="1526995904991"></p><p>我们模型中有一个groups，跟这个数据结果很像：</p><p> <img src="http://img.smallmartial.cn//1529924049003.png" alt="1529924049003"></p><p>分成8个组，组内都有params，里面是所有的参数。不过，这些参数都没有值！</p><p>规格参数的值分为两部分：</p><ul><li>通用规格参数：保存在SpuDetail中的genericSpec中</li><li>特有规格参数：保存在sku的ownSpec中</li></ul><p>我们需要把这两部分值取出来，放到groups中。</p><p>因为sku是动态的，所以我们编写一个计算属性，来进行值的组合：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">groups()&#123;</span><br><span class="line">    groups.forEach(<span class="function"><span class="params">group</span> =&gt;</span> &#123;</span><br><span class="line">        group.params.forEach(<span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(param.generic)&#123;</span><br><span class="line">                <span class="comment">// 通用属性，去spu的genericSpec中获取</span></span><br><span class="line">                param.v = <span class="keyword">this</span>.genericSpec[param.id] || <span class="string">'其它'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 特有属性值，去SKU中获取</span></span><br><span class="line">                param.v = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.sku.ownSpec)[param.id]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> groups;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在页面渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ptable"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ptable-item"</span> <span class="attr">v-for</span>=<span class="string">"group in groups"</span> <span class="attr">:key</span>=<span class="string">"group.name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;group.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"p in group.params"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span>&gt;</span>&#123;&#123;p.name&#125;&#125;<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123;p.v + (p.unit || '')&#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-8-2-包装列表"><a href="#1-8-2-包装列表" class="headerlink" title="1.8.2.包装列表"></a>1.8.2.包装列表</h3><p>包装列表在商品详情中，我们一开始并没有赋值到Vue实例中，但是可以通过Thymeleaf来渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"package-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>包装清单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;detail.packingList&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果：</p><p> <img src="http://img.smallmartial.cn//1526998348976.png" alt="1526998348976"></p><p> <img src="http://img.smallmartial.cn//1526998483160.png" alt="1526998483160"></p><h2 id="1-9-售后服务"><a href="#1-9-售后服务" class="headerlink" title="1.9.售后服务"></a>1.9.售后服务</h2><p>售后服务也可以通过Thymeleaf进行渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"three"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>售后保障<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;detail.afterService&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p> <img src="http://img.smallmartial.cn//1526998635610.png" alt="1526998635610"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目标&quot;&gt;&lt;/a&gt;0.学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;了解Thymeleaf的基本使用&lt;/li&gt;
&lt;li&gt;实现商品详情页的渲染&lt;/li&gt;
&lt;li&gt;知道
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记十七-搜索过滤（二）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/20/lyshop-17/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/20/lyshop-17/</id>
    <published>2019-04-20T06:37:56.000Z</published>
    <updated>2019-04-20T06:57:01.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-生成规格参数过滤"><a href="#3-生成规格参数过滤" class="headerlink" title="3.生成规格参数过滤"></a>3.生成规格参数过滤</h1><h2 id="3-1-谋而后动"><a href="#3-1-谋而后动" class="headerlink" title="3.1.谋而后动"></a>3.1.谋而后动</h2><p>有四个问题需要先思考清楚：</p><ul><li>什么时候显示规格参数过滤？</li><li>如何知道哪些规格需要过滤？</li><li>要过滤的参数，其可选值是如何获取的？</li><li>规格过滤的可选值，其数据格式怎样的？</li></ul><blockquote><p>什么情况下显示有关规格参数的过滤？</p></blockquote><p>如果用户尚未选择商品分类，或者聚合得到的分类数大于1，那么就没必要进行规格参数的聚合。因为不同分类的商品，其规格是不同的。</p><p>因此，我们在后台<strong>需要对聚合得到的商品分类数量进行判断，如果等于1，我们才继续进行规格参数的聚合</strong>。</p><blockquote><p>如何知道哪些规格需要过滤？</p></blockquote><p>我们不能把数据库中的所有规格参数都拿来过滤。因为并不是所有的规格参数都可以用来过滤，参数的值是不确定的。</p><p>值的庆幸的是，我们在设计规格参数时，已经标记了某些规格可搜索，某些不可搜索。</p><p>因此，一旦商品分类确定，我们就可以根据商品分类查询到其对应的规格，从而知道哪些规格要进行搜索。</p><blockquote><p>要过滤的参数，其可选值是如何获取的？</p></blockquote><p>虽然数据库中有所有的规格参数，但是不能把一切数据都用来供用户选择。</p><p>与商品分类和品牌一样，应该是从用户搜索得到的结果中聚合，得到与结果品牌的规格参数可选值。</p><blockquote><p>规格过滤的可选值，其数据格式怎样的？</p></blockquote><p>我们直接看页面效果：</p><p><img src="http://img.smallmartial.cn/1526805322441.png" alt="1526805322441"></p><p>我们之前存储时已经将数据分段，恰好符合这里的需求</p><h2 id="3-3-实战"><a href="#3-3-实战" class="headerlink" title="3.3.实战"></a>3.3.实战</h2><p>接下来，我们就用代码实现刚才的思路。</p><p>总结一下，应该是以下几步：</p><ul><li>1）用户搜索得到商品，并聚合出商品分类</li><li>2）判断分类数量是否等于1，如果是则进行规格参数聚合</li><li>3）先根据分类，查找可以用来搜索的规格</li><li>4）对规格参数进行聚合</li><li>5）将规格参数聚合结果整理后返回</li></ul><h3 id="3-3-1-扩展返回结果"><a href="#3-3-1-扩展返回结果" class="headerlink" title="3.3.1.扩展返回结果"></a>3.3.1.扩展返回结果</h3><p>返回结果中需要增加新数据，用来保存规格参数过滤条件。这里与前面的品牌和分类过滤的json结构类似：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"k"</span>:<span class="string">"规格参数名"</span>,</span><br><span class="line">        <span class="attr">"options"</span>:[<span class="string">"规格参数值"</span>,<span class="string">"规格参数值"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>因此，在java中我们用List&lt;Map&lt;String,Object&gt;&gt;来表示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> smallmartial</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span> smallmarital@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> <span class="keyword">extends</span> <span class="title">PageResult</span>&lt;<span class="title">Goods</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Category&gt; categories;<span class="comment">//分类过滤条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Brand&gt; brands;<span class="comment">//品牌过滤条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; specs; <span class="comment">// 规格参数过滤条件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(Long total, Integer totalPage, List&lt;Goods&gt; item, List&lt;Category&gt; categories, List&lt;Brand&gt; brands, List&lt;Map&lt;String, Object&gt;&gt; specs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(total, totalPage, item);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">        <span class="keyword">this</span>.specs = specs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-2-判断是否需要聚合"><a href="#3-3-2-判断是否需要聚合" class="headerlink" title="3.3.2.判断是否需要聚合"></a>3.3.2.判断是否需要聚合</h3><p>首先，在聚合得到商品分类后，判断分类的个数，如果是1个则进行规格聚合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (categories !=<span class="keyword">null</span> &amp;&amp; categories.size() == <span class="number">1</span>)&#123;</span><br><span class="line">     specs = buildSpecificationAgg(categories.get(<span class="number">0</span>).getId(),basicQuery);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们将聚合的代码抽取到了一个<code>buildSpecificationAgg</code>方法中。</p><h3 id="3-3-3-获取需要聚合的规格参数"><a href="#3-3-3-获取需要聚合的规格参数" class="headerlink" title="3.3.3.获取需要聚合的规格参数"></a>3.3.3.获取需要聚合的规格参数</h3><p>然后，我们需要根据商品分类，查询所有可用于搜索的规格参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SpecParam&gt; params = specificationClient.querySpecSpecParam(<span class="keyword">null</span>, cid, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></p><p>要注意的是，这里我们需要根据id查询规格，而规格参数接口需要从商品微服务提供</p><p>商品微服务：ly-item-interface中提供接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"spec"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/params"</span>)</span><br><span class="line">    <span class="function">List&lt;SpecParam&gt; <span class="title">querySpecParam</span><span class="params">(SpecParam specParam)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索服务中调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationClient</span> <span class="keyword">extends</span> <span class="title">SpecificationApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-聚合规格参数"><a href="#3-3-4-聚合规格参数" class="headerlink" title="3.3.4.聚合规格参数"></a>3.3.4.聚合规格参数</h3><p>因为规格参数保存时不做分词，因此其名称会自动带上一个.keyword后缀：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (SpecParam param : params) &#123;</span><br><span class="line">    String name = param.getName();</span><br><span class="line">    queryBuilder.addAggregation(AggregationBuilders.terms(name)</span><br><span class="line">            .field(<span class="string">"specs."</span>+name+<span class="string">".keyword"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-5-解析聚合结果"><a href="#3-3-5-解析聚合结果" class="headerlink" title="3.3.5.解析聚合结果"></a>3.3.5.解析聚合结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//解析结果</span></span><br><span class="line">Aggregations aggs = result.getAggregations();</span><br><span class="line"> <span class="keyword">for</span> (SpecParam param : params) &#123;</span><br><span class="line">     <span class="comment">//规格参数名</span></span><br><span class="line">     Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//准备map</span></span><br><span class="line">     String name = param.getName();</span><br><span class="line">     map.put(<span class="string">"k"</span>,name);</span><br><span class="line"></span><br><span class="line">     StringTerms terms = (StringTerms) aggs.get(name);</span><br><span class="line">     map.put(<span class="string">"options"</span>,terms.getBuckets().stream().map(b -&gt; b.getKeyAsString()).collect(Collectors.toList()));</span><br><span class="line">     specs.add(map);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-6-最终的代码"><a href="#3-3-6-最终的代码" class="headerlink" title="3.3.6.最终的代码"></a>3.3.6.最终的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 聚合规格参数查询</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> basicQuery</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;Map&lt;String,Object&gt;&gt; buildSpecificationAgg(Long cid, QueryBuilder basicQuery) &#123;</span><br><span class="line">       List&lt;Map&lt;String, Object&gt;&gt; specs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="comment">//查询所需要的结果</span></span><br><span class="line">       List&lt;SpecParam&gt; params = specificationClient.querySpecSpecParam(<span class="keyword">null</span>, cid, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">       <span class="comment">//聚合</span></span><br><span class="line">       NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">       <span class="comment">//带上查询条件</span></span><br><span class="line">       queryBuilder.withQuery(basicQuery);</span><br><span class="line">       <span class="keyword">for</span> (SpecParam param : params) &#123;</span><br><span class="line">           String name = param.getName();</span><br><span class="line">           queryBuilder.addAggregation(AggregationBuilders.terms(name)</span><br><span class="line">                   .field(<span class="string">"specs."</span>+name+<span class="string">".keyword"</span>));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//获取结果</span></span><br><span class="line">       AggregatedPage&lt;Goods&gt; result = template.queryForPage(queryBuilder.build(), Goods.class);</span><br><span class="line">       <span class="comment">// 查询</span></span><br><span class="line">       <span class="comment">//解析结果</span></span><br><span class="line">      Aggregations aggs = result.getAggregations();</span><br><span class="line">       <span class="keyword">for</span> (SpecParam param : params) &#123;</span><br><span class="line">           <span class="comment">//规格参数名</span></span><br><span class="line">           Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//准备map</span></span><br><span class="line">           String name = param.getName();</span><br><span class="line">           map.put(<span class="string">"k"</span>,name);</span><br><span class="line">           </span><br><span class="line">           StringTerms terms = (StringTerms) aggs.get(name);</span><br><span class="line">           map.put(<span class="string">"options"</span>,terms.getBuckets().stream().map(b -&gt; b.getKeyAsString()).collect(Collectors.toList()));</span><br><span class="line">           specs.add(map);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> specs;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果<br> <img src="http://img.smallmartial.cn/20190420144506.png" alt="1526836458716"></p><h3 id="3-4-2-展示或收起过滤条件"><a href="#3-4-2-展示或收起过滤条件" class="headerlink" title="3.4.2.展示或收起过滤条件"></a>3.4.2.展示或收起过滤条件</h3><p>是不是感觉显示的太多了，我们可以通过按钮点击来展开和隐藏部分内容：</p><p> <img src="http://img.smallmartial.cn/1526836575516.png" alt="1526836575516"></p><p>我们在data中定义变量，记录展开或隐藏的状态：</p><p> <img src="http://img.smallmartial.cn/1526837203921.png" alt="1526837203921"></p><p>然后在按钮绑定点击事件，以改变show的取值：</p><p> <img src="http://img.smallmartial.cn/1526837300139.png" alt="1526837300139"></p><p>在展示规格时，对show进行判断：</p><p><img src="http://img.smallmartial.cn/1528416266890.png" alt="1528416266890"></p><p>OK！</p><h1 id="4-过滤条件的筛选"><a href="#4-过滤条件的筛选" class="headerlink" title="4.过滤条件的筛选"></a>4.过滤条件的筛选</h1><p>当我们点击页面的过滤项，要做哪些事情？</p><ul><li>把过滤条件保存在search对象中（watch监控到search变化后就会发送到后台）</li><li>在页面顶部展示已选择的过滤项</li><li>把商品分类展示到顶部面包屑</li></ul><h2 id="4-1-保存过滤项"><a href="#4-1-保存过滤项" class="headerlink" title="4.1.保存过滤项"></a>4.1.保存过滤项</h2><h3 id="4-1-1-定义属性"><a href="#4-1-1-定义属性" class="headerlink" title="4.1.1.定义属性"></a>4.1.1.定义属性</h3><p>我们把已选择的过滤项保存在search中：</p><p> <img src="http://img.smallmartial.cn/1526902381310.png" alt="1526902381310"></p><p>要注意，在created构造函数中会对search进行初始化，所以要在构造函数中对filter进行初始化：</p><p> <img src="http://img.smallmartial.cn/1526902467385.png" alt="1526902467385"></p><p>search.filter是一个对象，结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"过滤项名"</span>:<span class="string">"过滤项值"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-绑定点击事件"><a href="#4-1-2-绑定点击事件" class="headerlink" title="4.1.2.绑定点击事件"></a>4.1.2.绑定点击事件</h3><p>给所有的过滤项绑定点击事件：</p><p><img src="http://img.smallmartial.cn/1526902638566.png" alt="1526902638566"></p><p>要注意，点击事件传2个参数：</p><ul><li>k：过滤项的key</li><li>option：当前过滤项对象</li></ul><p>在点击事件中，保存过滤项到<code>selectedFilter</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">selectFilter(k, o)&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.assign(obj, <span class="keyword">this</span>.search);</span><br><span class="line">    <span class="keyword">if</span>(k === <span class="string">'cid3'</span> || k === <span class="string">'brandId'</span>)&#123;</span><br><span class="line">        o = o.id;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.filter[k] = o;</span><br><span class="line">    <span class="keyword">this</span>.search = obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，这里search对象中嵌套了filter对象，请求参数格式化时需要进行特殊处理，修改common.js中的一段代码：</p><p> <img src="http://img.smallmartial.cn/1530442052516.png" alt="1530442052516"></p><p>我们刷新页面，点击后通过浏览器功能查看<code>search.filter</code>的属性变化：</p><p> <img src="http://img.smallmartial.cn/1526904752818.png" alt="1526904752818"></p><h3 id="4-2-1-拓展请求对象"><a href="#4-2-1-拓展请求对象" class="headerlink" title="4.2.1.拓展请求对象"></a>4.2.1.拓展请求对象</h3><p>我们需要在请求类：<code>SearchRequest</code>中添加属性，接收过滤属性。过滤属性都是键值对格式，但是key不确定，所以用一个map来接收即可。</p><p> <img src="http://img.smallmartial.cn/1526910290497.png" alt="1526910290497"></p><h3 id="4-2-2-添加过滤条件"><a href="#4-2-2-添加过滤条件" class="headerlink" title="4.2.2.添加过滤条件"></a>4.2.2.添加过滤条件</h3><p>目前，我们的基本查询是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> QueryBuilder <span class="title">buildBasicQuery</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line">    BoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 基本查询条件</span></span><br><span class="line">    queryBuilder.must(QueryBuilders.matchQuery(<span class="string">"all"</span>, request.getKey()).operator(Operator.AND));</span><br><span class="line">    <span class="comment">// 过滤条件构建器</span></span><br><span class="line">    BoolQueryBuilder filterQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 整理过滤条件</span></span><br><span class="line">    Map&lt;String, String&gt; filter = request.getFilter();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : filter.entrySet()) &#123;</span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        String value = entry.getValue();</span><br><span class="line">        <span class="comment">// 商品分类和品牌要特殊处理</span></span><br><span class="line">        <span class="keyword">if</span> (key != <span class="string">"cid3"</span> &amp;&amp; key != <span class="string">"brandId"</span>) &#123;</span><br><span class="line">            key = <span class="string">"specs."</span> + key + <span class="string">".keyword"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 字符串类型，进行term查询</span></span><br><span class="line">        filterQueryBuilder.must(QueryBuilders.termQuery(key, value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加过滤条件</span></span><br><span class="line">    queryBuilder.filter(filterQueryBuilder);</span><br><span class="line">    <span class="keyword">return</span> queryBuilder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>页面过滤部分功能未能实现，点击品牌分类无法查询。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-生成规格参数过滤&quot;&gt;&lt;a href=&quot;#3-生成规格参数过滤&quot; class=&quot;headerlink&quot; title=&quot;3.生成规格参数过滤&quot;&gt;&lt;/a&gt;3.生成规格参数过滤&lt;/h1&gt;&lt;h2 id=&quot;3-1-谋而后动&quot;&gt;&lt;a href=&quot;#3-1-谋而后动&quot; cla
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记十六-搜索过滤（一）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/20/lyshop-16/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/20/lyshop-16/</id>
    <published>2019-04-20T06:21:51.000Z</published>
    <updated>2019-04-20T06:36:23.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><ul><li>了解过滤功能的基本思路</li><li>独立实现分类和品牌展示</li><li>了解规格参数展示</li><li>实现过滤条件筛选</li><li>实现已选过滤项回显</li><li>实现取消选择过滤项</li></ul><h1 id="1-过滤功能分析"><a href="#1-过滤功能分析" class="headerlink" title="1.过滤功能分析"></a>1.过滤功能分析</h1><p>首先看下页面要实现的效果：</p><p><img src="http://img.smallmartial.cn/1526725119663.png" alt="1526725119663"></p><p>整个过滤部分有3块：</p><ul><li>顶部的导航，已经选择的过滤条件展示：<ul><li>商品分类面包屑，根据用户选择的商品分类变化</li><li>其它已选择过滤参数</li></ul></li><li>过滤条件展示，又包含3部分<ul><li>商品分类展示</li><li>品牌展示</li><li>其它规格参数</li></ul></li><li>展开或收起的过滤条件的按钮</li></ul><p>顶部导航要展示的内容跟用户选择的过滤条件有关。</p><ul><li>比如用户选择了某个商品分类，则面包屑中才会展示具体的分类</li><li>比如用户选择了某个品牌，列表中才会有品牌信息。</li></ul><p>所以，这部分需要依赖第二部分：过滤条件的展示和选择。因此我们先不着急去做。</p><p>展开或收起的按钮是否显示，取决于过滤条件现在有多少，如果有很多，那么就没必要展示。所以也是跟第二部分的过滤条件有关。</p><p>这样分析来看，我们必须先做第二部分：过滤条件展示。</p><h1 id="2-生成分类和品牌过滤"><a href="#2-生成分类和品牌过滤" class="headerlink" title="2.生成分类和品牌过滤"></a>2.生成分类和品牌过滤</h1><p>先来看分类和品牌。在我们的数据库中已经有所有的分类和品牌信息。在这个位置，是不是把所有的分类和品牌信息都展示出来呢？</p><p>显然不是，用户搜索的条件会对商品进行过滤，而在搜索结果中，不一定包含所有的分类和品牌，直接展示出所有商品分类，让用户选择显然是不合适的。</p><p>无论是分类信息，还是品牌信息，都应该从搜索的结果商品中进行聚合得到。</p><h2 id="2-1-扩展返回的结果"><a href="#2-1-扩展返回的结果" class="headerlink" title="2.1.扩展返回的结果"></a>2.1.扩展返回的结果</h2><p>原来，我们返回的结果是PageResult对象，里面只有total、totalPage、items3个属性。但是现在要对商品分类和品牌进行聚合，数据显然不够用，我们需要对返回的结果进行扩展，添加分类和品牌的数据。</p><p>那么问题来了：以什么格式返回呢？</p><p>看页面：</p><p> <img src="http://img.smallmartial.cn/1526738120021.png" alt="1526738120021"></p><p>分类：页面显示了分类名称，但背后肯定要保存id信息。所以至少要有id和name</p><p>品牌：页面展示的有logo，有文字，当然肯定有id，基本上是品牌的完整数据</p><p>我们新建一个类，继承PageResult，然后扩展两个新的属性：分类集合和品牌集合：<br>我们新建一个类，继承PageResult，然后扩展两个新的属性：分类集合和品牌集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> <span class="keyword">extends</span> <span class="title">PageResult</span>&lt;<span class="title">Goods</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Category&gt; categories;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Brand&gt; brands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchResult</span><span class="params">(Long total, Integer totalPage, List&lt;Goods&gt; items, List&lt;Category&gt; categories, List&lt;Brand&gt; brands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(total, totalPage, items);</span><br><span class="line">        <span class="keyword">this</span>.categories = categories;</span><br><span class="line">        <span class="keyword">this</span>.brands = brands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-聚合商品分类和品牌"><a href="#2-2-聚合商品分类和品牌" class="headerlink" title="2.2.聚合商品分类和品牌"></a>2.2.聚合商品分类和品牌</h2><p>我们修改搜索的业务逻辑，对分类和品牌聚合。</p><p>因为索引库中只有id，所以我们根据id聚合，然后再根据id去查询完整数据。</p><p>所以，商品微服务需要提供一个接口：根据品牌id集合，批量查询品牌。</p><h3 id="2-2-1-提供查询品牌接口"><a href="#2-2-1-提供查询品牌接口" class="headerlink" title="2.2.1.提供查询品牌接口"></a>2.2.1.提供查询品牌接口</h3><p>BrandApi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"brand"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function">List&lt;Brand&gt; <span class="title">queryBrandByIds</span><span class="params">(@RequestParam(<span class="string">"ids"</span>)</span> List&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据多个id查询品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Brand&gt;&gt; queryBrandByIds(<span class="meta">@RequestParam</span>(<span class="string">"ids"</span>) List&lt;Long&gt; ids)&#123;</span><br><span class="line">    List&lt;Brand&gt; list = <span class="keyword">this</span>.brandService.queryBrandByIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(list == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Brand&gt; <span class="title">queryBrandByIds</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.brandMapper.selectByIdList(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BrandMapper</p><p>继承通用mapper的 <code>SelectByIdListMapper</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Brand</span>&gt;, <span class="title">SelectByIdListMapper</span>&lt;<span class="title">Brand</span>,<span class="title">Long</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-搜索功能改造"><a href="#2-2-2-搜索功能改造" class="headerlink" title="2.2.2.搜索功能改造"></a>2.2.2.搜索功能改造</h3><p>添加BrandClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"item-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BrandClient</span> <span class="keyword">extends</span> <span class="title">BrandApi</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改SearchService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryClient categoryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BrandClient brandClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodClient goodClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationClient specificationClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate template;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> PageResult&lt;Goods&gt; <span class="title">search</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line">        Integer page = request.getPage() - <span class="number">1</span>;</span><br><span class="line">        Integer size = request.getSize();</span><br><span class="line">        <span class="comment">//创建查询构建器</span></span><br><span class="line">        NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">        queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"skus"</span>,<span class="string">"subTitle"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        queryBuilder.withPageable(PageRequest.of(page,size));</span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">        <span class="comment">//queryBuilder.withQuery(QueryBuilders.matchQuery("all",request.getKey()));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        String sortBy = request.getSortBy();</span><br><span class="line">        Boolean desc = request.getDescending();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sortBy))&#123;</span><br><span class="line">            queryBuilder.withSort(SortBuilders.fieldSort(sortBy).order(desc? SortOrder.DESC :SortOrder.ASC));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//聚合分类和品牌</span></span><br><span class="line">        <span class="comment">//聚合分类</span></span><br><span class="line">        String categoryAggName = <span class="string">"category_agg"</span>;</span><br><span class="line">        queryBuilder.addAggregation(AggregationBuilders.terms(categoryAggName).field(<span class="string">"cid3"</span>));</span><br><span class="line">        <span class="comment">//聚合品牌</span></span><br><span class="line">        String brandAggName = <span class="string">"brand_agg"</span>;</span><br><span class="line">        queryBuilder.addAggregation(AggregationBuilders.terms(brandAggName).field(<span class="string">"brandId"</span>));</span><br><span class="line">        AggregatedPage&lt;Goods&gt; pageInfo = (AggregatedPage&lt;Goods&gt;) <span class="keyword">this</span>.repository.search(queryBuilder.build());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="comment">//Page&lt;Goods&gt; result = repository.search(queryBuilder.build());</span></span><br><span class="line">        AggregatedPage&lt;Goods&gt; result = template.queryForPage(queryBuilder.build(),Goods.class);</span><br><span class="line">        <span class="comment">//解析结果</span></span><br><span class="line">        <span class="comment">//解析分页结果</span></span><br><span class="line">        <span class="keyword">long</span> total = result.getTotalElements();</span><br><span class="line">        Integer totalPage =result.getTotalPages();</span><br><span class="line">        List&lt;Goods&gt; goodsList = result.getContent();</span><br><span class="line">       <span class="comment">// return new PageResult&lt;&gt;(total, totalPage, goodsList);</span></span><br><span class="line">        <span class="comment">//解析聚合结果</span></span><br><span class="line">        Aggregations aggs = result.getAggregations();</span><br><span class="line">      <span class="comment">//List&lt;Category&gt; categories =parseBrandAgg(pageInfo.getAggregation(categoryAggName));</span></span><br><span class="line">         List&lt;Category&gt; categories =parseCategoryAgg(aggs.get(categoryAggName));</span><br><span class="line">        List&lt;Brand&gt; brands = parseBrandAgg(aggs.get(brandAggName));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchResult(total,totalPage,goodsList,categories,brands);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Brand&gt; <span class="title">parseBrandAgg</span><span class="params">(LongTerms terms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Long&gt; ids = terms.getBuckets()</span><br><span class="line">                    .stream().map(b -&gt; b.getKeyAsNumber()</span><br><span class="line">                            .longValue()).collect(Collectors.toList());</span><br><span class="line">            List&lt;Brand&gt; brands = brandClient.queryBrandByIds(ids);</span><br><span class="line">            <span class="keyword">return</span> brands;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Category&gt; <span class="title">parseCategoryAgg</span><span class="params">(LongTerms terms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Long&gt; ids = terms.getBuckets()</span><br><span class="line">                    .stream().map(b -&gt; b.getKeyAsNumber()</span><br><span class="line">                            .longValue()).collect(Collectors.toList());</span><br><span class="line">            List&lt;Category&gt; categories = categoryClient.queryCategoryByIds(ids);</span><br><span class="line">            <span class="keyword">return</span> categories;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p> <img src="http://img.smallmartial.cn/1526741462666.png" alt="1526741462666"></p><h2 id="2-3-页面渲染数据"><a href="#2-3-页面渲染数据" class="headerlink" title="2.3.页面渲染数据"></a>2.3.页面渲染数据</h2><h3 id="2-3-1-过滤参数数据结构"><a href="#2-3-1-过滤参数数据结构" class="headerlink" title="2.3.1.过滤参数数据结构"></a>2.3.1.过滤参数数据结构</h3><p>来看下页面的展示效果：</p><p> <img src="http://img.smallmartial.cn/1526742664217.png" alt="1526742664217"></p><p>虽然分类、品牌内容都不太一样，但是结构相似，都是key和value的结构。</p><p>而且页面结构也极为类似：</p><p> <img src="http://img.smallmartial.cn/1526742817804.png" alt="1526742817804"></p><p>所以，我们可以把所有的过滤条件放入一个<code>数组</code>中，然后在页面利用<code>v-for</code>遍历一次生成。</p><p>其基本结构是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        k:<span class="string">"过滤字段名"</span>,</span><br><span class="line">        options:[&#123;<span class="comment">/*过滤字段值对象*/</span>&#125;,&#123;<span class="comment">/*过滤字段值对象*/</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们先在data中定义数组，等待组装过滤参数：</p><p> <img src="http://img.smallmartial.cn/1526803067480.png" alt="1526803067480"></p><p>然后在查询搜索结果的回调函数中，对过滤参数进行封装：</p><p> <img src="http://img.smallmartial.cn/1530442270378.png" alt="1530442270378"></p><p>然后刷新页面，通过浏览器工具，查看封装的结果：</p><p> <img src="http://img.smallmartial.cn/1530442355920.png" alt="1530442355920"></p><h3 id="2-3-2-页面渲染数据"><a href="#2-3-2-页面渲染数据" class="headerlink" title="2.3.2.页面渲染数据"></a>2.3.2.页面渲染数据</h3><p>首先看页面原来的代码：</p><p> <img src="http://img.smallmartial.cn/1526803362517.png" alt="1526803362517"></p><p>我们注意到，虽然页面元素是一样的，但是品牌会比其它搜搜条件多出一些样式，因为品牌是以图片展示。需要进行特殊处理。数据展示是一致的，我们采用v-for处理：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(f,i) in filters"</span> <span class="attr">:key</span>=<span class="string">"i"</span> <span class="attr">class</span>=<span class="string">"type-wrap"</span> <span class="attr">v-if</span>=<span class="string">"f.k !== 'brandId'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl key"</span>&gt;</span>&#123;&#123;f.k === 'cid3' ? '分类' : f.k&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"type-list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(option,j) in f.options"</span> <span class="attr">:key</span>=<span class="string">"j"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span>&gt;</span>&#123;&#123;option.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl ext"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"sui-btn"</span>&gt;</span>多选<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"type-wrap logo"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl key brand"</span>&gt;</span>&#123;&#123;f.k&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"value logos"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"logo-list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(option,j) in f.options"</span> <span class="attr">:key</span>=<span class="string">"j"</span> <span class="attr">v-if</span>=<span class="string">"option.image"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"option.image"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"line-height: 30px; font-size: 12px"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;option.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fl ext"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"sui-btn"</span>&gt;</span>多选<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果：</p><p><img src="http://img.smallmartial.cn/20190419200531.png" alt="1526804398051"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-学习目标&quot;&gt;&lt;a href=&quot;#0-学习目标&quot; class=&quot;headerlink&quot; title=&quot;0.学习目标&quot;&gt;&lt;/a&gt;0.学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;了解过滤功能的基本思路&lt;/li&gt;
&lt;li&gt;独立实现分类和品牌展示&lt;/li&gt;
&lt;li&gt;了解规格参数
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记十五-搜索微服务（三）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/19/lyshop-15/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/19/lyshop-15/</id>
    <published>2019-04-19T08:51:52.000Z</published>
    <updated>2019-04-20T06:22:26.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-页面分页效果"><a href="#3-页面分页效果" class="headerlink" title="3.页面分页效果"></a>3.页面分页效果</h1><p>刚才的查询中，我们默认了查询的页码和每页大小，因此所有的分页功能都无法使用，接下来我们一起看看分页功能条该如何制作。</p><p>这里要分两步，</p><ul><li>第一步：如何生成分页条</li><li>第二步：点击分页按钮，我们做什么</li></ul><h2 id="3-1-如何生成分页条"><a href="#3-1-如何生成分页条" class="headerlink" title="3.1.如何生成分页条"></a>3.1.如何生成分页条</h2><p>先看下页面关于分页部分的代码：</p><p> <img src="http://img.smallmartial.cn/1526692249371.png" alt="1526692249371"></p><p>可以看到所有的分页栏内容都是写死的。</p><h3 id="3-1-1-需要的数据"><a href="#3-1-1-需要的数据" class="headerlink" title="3.1.1.需要的数据"></a>3.1.1.需要的数据</h3><p>分页数据应该是根据<strong>总页数</strong>、<strong>当前页</strong>、<strong>总条数</strong>等信息来计算得出。</p><ul><li>当前页：肯定是由页面来决定的，点击按钮会生成不同的页</li><li>总页数：需要后台传递给我们</li><li>总条数：需要后台传递给我们</li></ul><p>我们首先在data中记录下这几个值：</p><p> <img src="http://img.smallmartial.cn/1526694848538.png" alt="1526694848538"></p><p>因为page是搜索条件之一，所以记录在search对象中。</p><p>要注意：我们在created钩子函数中，会读取url路径的参数，然后赋值给search。如果是第一次请求页面，page是不存在的。因此为了避免page被覆盖，我们应该这么做：</p><p> <img src="http://img.smallmartial.cn/1526715358560.png" alt="1526715358560"></p><p>不过，这个时候我们自己的search对象中的值就可有可无了</p><h3 id="3-1-2-后台提供数据"><a href="#3-1-2-后台提供数据" class="headerlink" title="3.1.2.后台提供数据"></a>3.1.2.后台提供数据</h3><p>后台返回的结果中，要包含total和totalPage，我们改造下刚才的接口：</p><p>在我们返回的PageResult对象中，其实是有totalPage字段的：</p><p>  <img src="http://img.smallmartial.cn/1526695144476.png" alt="1526695144476"></p><p>我们在返回时，把这个值填上：</p><p> <img src="http://img.smallmartial.cn/1526695592422.png" alt="1526695592422"></p><p>页面测试一下：</p><p> <img src="http://img.smallmartial.cn/1526695713496.png" alt="1526695713496"></p><p>OK</p><h3 id="3-1-3-页面计算分页条"><a href="#3-1-3-页面计算分页条" class="headerlink" title="3.1.3.页面计算分页条"></a>3.1.3.页面计算分页条</h3><p>首先，把后台提供的数据保存在data中：</p><p> <img src="http://img.smallmartial.cn/1526695967230.png" alt="1526695967230"></p><p>然后看下我们要实现的效果：</p><p><img src="http://img.smallmartial.cn/1526695821870.png" alt="1526695821870"></p><p>这里最复杂的是中间的1~5的分页按钮，它需要动态变化。</p><p>思路分析：</p><ul><li>最多有5个按钮，因此我们可以用<code>v-for</code>循环从1到5即可，假如遍历得到的值为<code>i</code></li><li>但是分页条不一定是从1开始：<ul><li>如果当前页值小于等于3的时候，分页条位置从1开始到5结束，页码就是遍历得到的<code>i</code>的值</li><li>但是如果大于3，则不应该是<code>i</code>，而是要比<code>i</code>大了（page-3），所以就是<code>page-3 + i</code></li></ul></li></ul><p>所以，我们的页面这样来做：</p><p> <img src="http://img.smallmartial.cn/1526698486165.png" alt="1526698486165"></p><p>a标签中的分页数字通过<code>index</code>函数来计算，需要把<code>i</code>传递过去：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">index(i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.search.page &lt;= <span class="number">3</span> || <span class="keyword">this</span>.totalPage &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前页小于3，则页码就是从 i 开始</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt;= <span class="keyword">this</span>.totalPage - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 大于3，则从page-2开始，然后逐个加1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.search.page - <span class="number">3</span> + i;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.totalPage - <span class="number">5</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果总页数不足5页，我们就不应该遍历1~5，而是1~总页数，稍作改进：</p><p><img src="http://img.smallmartial.cn/1526698842013.png" alt="1526698842013"></p><p>分页条的其它部分就比较简单了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;sui-pagination pagination-large&quot;&gt;</span><br><span class="line">    &lt;ul style=&quot;width: 550px&quot;&gt;</span><br><span class="line">        &lt;li :class=&quot;&#123;prev:true,disabled:search.page === 1&#125;&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;«上一页&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li :class=&quot;&#123;active: index(i) === search.page&#125;&quot; v-for=&quot;i in Math.min(5,totalPage)&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;&#123;&#123;index(i)&#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li class=&quot;dotted&quot; v-show=&quot;totalPage &gt; 5&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li :class=&quot;&#123;next:true,disabled:search.page === totalPage&#125;&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot;&gt;下一页»&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;共&#123;&#123;totalPage&#125;&#125;页&amp;nbsp;&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            到第</span><br><span class="line">            &lt;input type=&quot;text&quot; class=&quot;page-num&quot; :value=&quot;search.page&quot;&gt;</span><br><span class="line">            页 &lt;button class=&quot;page-confirm&quot; onclick=&quot;alert(1)&quot;&gt;确定&lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-点击分页做什么"><a href="#3-2-点击分页做什么" class="headerlink" title="3.2.点击分页做什么"></a>3.2.点击分页做什么</h2><p>点击分页按钮后，自然是要修改<code>page</code>的值</p><p>所以，我们在<code>上一页</code>、<code>下一页</code>按钮添加点击事件，对page进行修改，在数字按钮上绑定点击事件，点击直接修改page：</p><p> <img src="http://img.smallmartial.cn/1526716056879.png" alt="1526716056879"></p><p>翻页事件的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prevPage()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.search.page--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">nextPage()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.search.page &lt; <span class="keyword">this</span>.totalPage)&#123;</span><br><span class="line">        <span class="keyword">this</span>.search.page++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>page</code>发生变化，我们应该去后台重新查询数据。</p><p>不过，如果我们直接发起ajax请求，那么浏览器的地址栏中是不会有变化的，没有记录下分页信息。如果用户刷新页面，那么就会回到第一页。</p><p>这样不太友好，我们应该把<strong>搜索条件记录在地址栏的查询参数中</strong>。</p><p>因此，我们监听search的变化，然后把search的过滤字段拼接在url路径后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    search:&#123;</span><br><span class="line">        deep:<span class="literal">true</span>,</span><br><span class="line">            handler(val)&#123;</span><br><span class="line">            <span class="comment">// 把search对象变成请求参数，拼接在url路径</span></span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">"http://www.leyou.com/search.html?"</span> + ly.stringify(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>刷新页面测试，然后就出现重大bug：页面无限刷新！为什么？</p><p>因为Vue实例初始化的钩子函数中，我们读取请求参数，赋值给search的时候，也触发了watch监视！也就是说，每次页面创建完成，都会触发watch，然后就会去修改window.location路径，然后页面被刷新，再次触发created钩子，又触发watch，周而复始，无限循环。</p><p>所以，我们需要在watch中进行监控，如果发现是第一次初始化，则不继续向下执行。</p><p>那么问题是，如何判断是不是第一次？</p><p>第一次初始化时，search中的key值肯定是空的，所以，我们这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    search:&#123;</span><br><span class="line">        deep:<span class="literal">true</span>,</span><br><span class="line">            handler(val,old)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!old || !old.key)&#123;</span><br><span class="line">                <span class="comment">// 如果旧的search值为空，或者search中的key为空，证明是第一次</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把search对象变成请求参数，拼接在url路径</span></span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">"http://www.leyou.com/search.html?"</span> + ly.stringify(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次刷新，OK了！</p><h2 id="3-3-页面顶部分页条"><a href="#3-3-页面顶部分页条" class="headerlink" title="3.3.页面顶部分页条"></a>3.3.页面顶部分页条</h2><p>在页面商品列表的顶部，也有一个分页条：</p><p> <img src="http://img.smallmartial.cn/1526716212704.png" alt="1526716212704"></p><p>我们把这一部分，也加上点击事件：</p><p> <img src="http://img.smallmartial.cn/1526716388196.png" alt="1526716388196"></p><p>###3.4.页面跳转<br>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">到第</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"page-num"</span> <span class="attr">ref</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">页 <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"page-confirm"</span> @<span class="attr">click</span>=<span class="string">"navPage"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">navPage()&#123;</span><br><span class="line">    <span class="keyword">this</span>.search.page = <span class="keyword">this</span>.$refs.page.value;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="4-排序-作业"><a href="#4-排序-作业" class="headerlink" title="4.排序(作业)"></a>4.排序(作业)</h1><h2 id="4-1-页面搜索排序条件"><a href="#4-1-页面搜索排序条件" class="headerlink" title="4.1.页面搜索排序条件"></a>4.1.页面搜索排序条件</h2><p>在搜索商品列表的顶部，有这么一部分内容：</p><p> <img src="http://img.smallmartial.cn/1526716565293.png" alt="1526716565293"></p><p>这是用来做排序的，默认按照综合排序。点击新品，应该按照商品创建时间排序，点击价格应该按照价格排序。因为我们没有统计销量和评价，这里咱们以<code>新品</code>和<code>价格</code>为例，进行讲解，做法是想通的。</p><p>排序需要知道两个内容：</p><ul><li>排序的字段</li><li>排序的方式</li></ul><p>因此，我们首先在<code>search</code>中记录这两个信息，因为created钩子函数会对search进行覆盖，因此我们在钩子函数中对这两个信息进行初始化即可：</p><p> <img src="http://img.smallmartial.cn/1526717586493.png" alt="1526717586493"></p><p>然后，在页面上给按钮绑定点击事件，修改<code>sortBy</code>和<code>descending</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--排序字段--&gt;</span><br><span class="line">&lt;ul class=&quot;sui-nav&quot;&gt;</span><br><span class="line">    &lt;li :class=&quot;&#123;active:!search.sortBy&#125;&quot; @click=&quot;search.sortBy=&apos;&apos;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;综合&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;销量&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li @click=&quot;search.sortBy=&apos;createTime&apos;&quot; :class=&quot;&#123;active: search.sortBy===&apos;createTime&apos;&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;新品&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;评价&lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li @click=&quot;search.sortBy=&apos;price&apos;; search.descending = !search.descending&quot;</span><br><span class="line">        :class=&quot;&#123;active: search.sortBy===&apos;price&apos;&#125;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot;&gt;</span><br><span class="line">            价格</span><br><span class="line">            &lt;v-icon v-show=&quot;search.descending&quot;&gt;arrow_drop_down&lt;/v-icon&gt;</span><br><span class="line">            &lt;v-icon v-show=&quot;!search.descending&quot;&gt;arrow_drop_up&lt;/v-icon&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>可以看到，页面请求参数中已经有了排序字段了：</p><p> <img src="http://img.smallmartial.cn/1526718252315.png" alt="1526718252315"></p><h2 id="4-2-后台添加排序逻辑"><a href="#4-2-后台添加排序逻辑" class="headerlink" title="4.2.后台添加排序逻辑"></a>4.2.后台添加排序逻辑</h2><p>接下来，后台需要接收请求参数中的排序信息，然后在搜索中加入排序的逻辑。</p><p>现在，我们的请求参数对象<code>SearchRequest</code>中，只有page、key两个字段。需要进行扩展：</p><p> <img src="http://img.smallmartial.cn/1526718448918.png" alt="1526718448918"></p><p>然后在搜索业务逻辑中，添加排序条件：</p><p><img src="http://img.smallmartial.cn/1526718637618.png" alt="1526718637618"></p><p>注意，因为我们存储在索引库中的的价格是一个数组，因此在按照价格排序时，会进行智能处理：</p><ul><li>如果是价格降序，则会把数组中的最大值拿来排序</li><li>如果是价格升序，则会把数组中的最小值拿来排序</li></ul><p><img src="http://img.smallmartial.cn/1526719415219.png" alt="1526719415219"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-页面分页效果&quot;&gt;&lt;a href=&quot;#3-页面分页效果&quot; class=&quot;headerlink&quot; title=&quot;3.页面分页效果&quot;&gt;&lt;/a&gt;3.页面分页效果&lt;/h1&gt;&lt;p&gt;刚才的查询中，我们默认了查询的页码和每页大小，因此所有的分页功能都无法使用，接下来我们一起看
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>乐优商城学习笔记十四-搜索微服务（二）</title>
    <link href="https://github.com/smallmartial/blog.git/2019/04/19/lyshop-14/"/>
    <id>https://github.com/smallmartial/blog.git/2019/04/19/lyshop-14/</id>
    <published>2019-04-19T07:01:59.000Z</published>
    <updated>2019-04-20T06:22:25.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-实现基本搜索"><a href="#2-实现基本搜索" class="headerlink" title="2.实现基本搜索"></a>2.实现基本搜索</h1><h2 id="2-1-页面分析"><a href="#2-1-页面分析" class="headerlink" title="2.1.页面分析"></a>2.1.页面分析</h2><h3 id="2-1-1-页面跳转"><a href="#2-1-1-页面跳转" class="headerlink" title="2.1.1.页面跳转"></a>2.1.1.页面跳转</h3><p>在首页的顶部，有一个输入框：</p><p><img src="http://img.smallmartial.cn/1526629923970.png" alt="1526629923970"></p><p>当我们输入任何文本，点击搜索，就会跳转到搜索页<code>search.html</code>了：</p><p>并且将搜索关键字以请求参数携带过来：</p><p> <img src="http://img.smallmartial.cn/1526629988118.png" alt="1526629988118"></p><p>我们打开<code>search.html</code>，在最下面会有提前定义好的Vue实例：<br>我们打开<code>search.html</code>，在最下面会有提前定义好的Vue实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#searchApp"</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 加载页面顶部组件</span></span></span><br><span class="line"><span class="javascript">            lyTop: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./js/pages/top.js"</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-发起异步请求"><a href="#2-1-2-发起异步请求" class="headerlink" title="2.1.2.发起异步请求"></a>2.1.2.发起异步请求</h3><p>要想在页面加载后，就展示出搜索结果。我们应该在页面加载时，获取地址栏请求参数，并发起异步请求，查询后台数据，然后在页面渲染。</p><p>我们在data中定义一个对象，记录请求的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    search:&#123;</span><br><span class="line">        key:<span class="string">""</span>, <span class="comment">// 搜索页面的关键字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过钩子函数created，在页面加载时获取请求参数，并记录下来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    <span class="comment">// 判断是否有请求参数</span></span><br><span class="line">    <span class="keyword">if</span>(!location.search)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将请求参数转为对象</span></span><br><span class="line">    <span class="keyword">const</span> search = ly.parse(location.search.substring(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 记录在data的search对象中</span></span><br><span class="line">    <span class="keyword">this</span>.search = search;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发起请求，根据条件搜索</span></span><br><span class="line">    <span class="keyword">this</span>.searchFromServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后发起请求，搜索数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    searchFromServer()&#123;</span><br><span class="line">        <span class="comment">// 发起异步请求</span></span><br><span class="line">        ly.http.post(<span class="string">"/search/page"</span>,<span class="keyword">this</span>.search)</span><br><span class="line">            .then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(resp.data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们这里使用<code>ly</code>是common.js中定义的工具对象。</li><li>这里使用的是post请求，这样可以携带更多参数，并且以json格式发送</li></ul><p>刷新页面试试：</p><p> <img src="http://img.smallmartial.cn//1526645415266.png" alt="1526645415266"></p><p>请求体：</p><p> <img src="http://img.smallmartial.cn//1526645463865.png" alt="1526645463865"></p><p> 因为后台没有提供接口，所以无法访问。没关系，接下来我们实现后台接口</p><h2 id="2-2-后台提供搜索接口"><a href="#2-2-后台提供搜索接口" class="headerlink" title="2.2.后台提供搜索接口"></a>2.2.后台提供搜索接口</h2><h3 id="2-2-1-controller"><a href="#2-2-1-controller" class="headerlink" title="2.2.1.controller"></a>2.2.1.controller</h3><p>首先分析几个问题：</p><ul><li><p>请求方式：Post</p></li><li><p>请求路径：/search/page，不过前面的/search应该是网关的映射路径，因此真实映射路径page，代表分页查询</p></li><li><p>请求参数：json格式，目前只有一个属性：key,搜索关键字，但是搜索结果页一定是带有分页查询的，所以将来肯定会有page属性，因此我们可以用一个对象来接收请求的json数据：</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;<span class="comment">// 搜索条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer page;<span class="comment">// 当前页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_SIZE = <span class="number">20</span>;<span class="comment">// 每页大小，不从页面接收，而是固定大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer DEFAULT_PAGE = <span class="number">1</span>;<span class="comment">// 默认页</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(page == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> DEFAULT_PAGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取页码时做一些校验，不能小于1</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_PAGE, page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(Integer page)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page = page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回结果：作为分页结果，一般都两个属性：当前页数据、总条数信息，我们可以使用之前定义的PageResult类<br>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IndexService indexService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索商品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"page"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;PageResult&lt;Goods&gt;&gt; search(<span class="meta">@RequestBody</span> SearchRequest request) &#123;</span><br><span class="line">        PageResult&lt;Goods&gt; result = <span class="keyword">this</span>.searchService.search(request);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-2-service"><a href="#2-2-2-service" class="headerlink" title="2.2.2.service"></a>2.2.2.service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageResult&lt;Goods&gt; <span class="title">search</span><span class="params">(SearchRequest request)</span> </span>&#123;</span><br><span class="line">    Integer page = request.getPage() - <span class="number">1</span>;</span><br><span class="line">    Integer size = request.getSize();</span><br><span class="line">    <span class="comment">//创建查询构建器</span></span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">    <span class="comment">//过滤</span></span><br><span class="line">    queryBuilder.withSourceFilter(<span class="keyword">new</span> FetchSourceFilter(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"skus"</span>,<span class="string">"subTitle"</span>&#125;, <span class="keyword">null</span>));</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    queryBuilder.withPageable(PageRequest.of(page,size));</span><br><span class="line">    <span class="comment">//过滤</span></span><br><span class="line">    <span class="comment">//queryBuilder.withQuery(QueryBuilders.matchQuery("all",request.getKey()));</span></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    Page&lt;Goods&gt; result = repository.search(queryBuilder.build());</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    <span class="keyword">long</span> total = result.getTotalElements();</span><br><span class="line">    Integer totalPage =result.getTotalPages();</span><br><span class="line">    List&lt;Goods&gt; goodsList = result.getContent();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(total, totalPage, goodsList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：对于过滤字段，如果添加 会报500错误</p><h3 id="2-2-3-测试"><a href="#2-2-3-测试" class="headerlink" title="2.2.3.测试"></a>2.2.3.测试</h3><p>刷新页面测试：</p><p> <img src="http://img.smallmartial.cn//1526651721835.png" alt="1526651721835"> </p><p> <img src="http://img.smallmartial.cn//1526652494813.png" alt="1526652494813"></p><p>数据是查到了，但是因为我们只查询部分字段，所以结果json 数据中有很多null，这很不优雅。</p><p>解决办法很简单，在application.yml中添加一行配置，json处理时忽略空值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jackson:</span></span><br><span class="line"><span class="attr">    default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># 配置json处理时忽略空值</span></span><br></pre></td></tr></table></figure><p>结果：</p><p> <img src="http://img.smallmartial.cn//1526652911714.png" alt="1526652911714"></p><h2 id="2-3-页面渲染"><a href="#2-3-页面渲染" class="headerlink" title="2.3.页面渲染"></a>2.3.页面渲染</h2><p>页面已经拿到了结果，接下来就要渲染样式了。</p><h3 id="2-3-1-保存搜索结果"><a href="#2-3-1-保存搜索结果" class="headerlink" title="2.3.1.保存搜索结果"></a>2.3.1.保存搜索结果</h3><p>首先，在data中定义属性，保存搜索的结果goodList：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#searchApp"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        ly,</span><br><span class="line">        key:<span class="string">""</span>,</span><br><span class="line">        search:&#123;&#125;,</span><br><span class="line">        goodList:&#123;&#125;,</span><br><span class="line">        total: <span class="number">0</span>,</span><br><span class="line">        totalPage: <span class="number">0</span>,</span><br><span class="line">        selectedSku:&#123;&#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>在<code>loadData</code>的异步查询中，将结果赋值给<code>goodsList</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">loadData()&#123;</span><br><span class="line">     <span class="comment">//发送到后台</span></span><br><span class="line">       ly.http.post(<span class="string">"/search/page"</span>,<span class="keyword">this</span>.search).then(<span class="function"><span class="params">resp</span> =&gt;</span>&#123;</span><br><span class="line">           <span class="comment">//保存分页结果</span></span><br><span class="line">          <span class="keyword">this</span>.total = resp.data.total;</span><br><span class="line">           <span class="keyword">this</span>.totalPage=resp.data.totalPage;</span><br><span class="line">           <span class="keyword">this</span>.goodList = resp.data.item;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.log(resp);</span><br><span class="line">       &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-2-循环展示商品"><a href="#2-3-2-循环展示商品" class="headerlink" title="2.3.2.循环展示商品"></a>2.3.2.循环展示商品</h3><p>在search.html的中部，有一个<code>div</code>，用来展示所有搜索到的商品：</p><p> <img src="http://img.smallmartial.cn//1526653523394.png" alt="1526653523394"></p><p>可以看到，<code>div</code>中有一个无序列表<code>ul</code>，内部的每一个<code>li</code>就是一个商品spu了。</p><p>我们删除多余的，只保留一个<code>li</code>，然后利用vue的循环来展示搜索到的结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"yui3-u-1-5"</span> <span class="attr">v-for</span>=<span class="string">"goods in goodList"</span> <span class="attr">:key</span>=<span class="string">"goods.id"</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-多sku展示"><a href="#2-3-3-多sku展示" class="headerlink" title="2.3.3.多sku展示"></a>2.3.3.多sku展示</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>接下来展示具体的商品信息，来看图：</p><p> <img src="http://img.smallmartial.cn//1526607712207.png" alt="1526607712207"></p><p>这里我们可以发现，一个商品位置，是多个sku的信息集合。<strong>当用户鼠标选择某个sku，对应的图片、价格、标题会随之改变！</strong></p><p>我们先来实现sku的选择，才能去展示不同sku的数据。</p><p> <img src="http://img.smallmartial.cn//1526654252710.png" alt="1526654252710"></p><p>可以看到，在列表中默认第一个是被选中的，那我们就需要做两件事情：</p><ul><li>记录当前被选中的是哪一个sku，记录在哪里比较合适呢？显然是遍历到的goods对象自己内部，因为每一个goods都会有自己的sku信息。</li><li>在搜索到数据时，先默认把第一个sku作为被选中的，记录下来</li></ul><h4 id="初始化sku"><a href="#初始化sku" class="headerlink" title="初始化sku"></a>初始化sku</h4><p>我们在查询成功的回调函数中，对goods进行遍历，然后添加一个selected属性，保存被选中的sku：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">loadData()&#123;</span><br><span class="line">     <span class="comment">//发送到后台</span></span><br><span class="line">       ly.http.post(<span class="string">"/search/page"</span>,<span class="keyword">this</span>.search).then(<span class="function"><span class="params">resp</span> =&gt;</span>&#123;</span><br><span class="line">           <span class="comment">//保存分页结果</span></span><br><span class="line">          <span class="keyword">this</span>.total = resp.data.total;</span><br><span class="line">           <span class="keyword">this</span>.totalPage=resp.data.totalPage;</span><br><span class="line">           <span class="comment">//保存当前页商品</span></span><br><span class="line">           resp.data.item.forEach(<span class="function"><span class="params">goods</span> =&gt;</span>&#123;</span><br><span class="line">               goods.skus = <span class="built_in">JSON</span>.parse(goods.skus);</span><br><span class="line">               goods.selectedSku = goods.skus[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="keyword">this</span>.goodList = resp.data.item;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.log(resp);</span><br><span class="line">       &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="多sku图片列表"><a href="#多sku图片列表" class="headerlink" title="多sku图片列表"></a>多sku图片列表</h4><p>接下来，我们看看多个sku的图片列表位置：</p><p> <img src="http://img.smallmartial.cn//1526655165478.png" alt="1526655165478"></p><p>看到又是一个无序列表，这里我们也一样删掉多余的，保留一个<code>li</code>，需要注意选中的项有一个样式类：selected</p><p>我们的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多sku图片列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"skus"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"&#123;selected: sku.id == goods.selected.id&#125;"</span> <span class="attr">v-for</span>=<span class="string">"sku in goods.skus"</span> <span class="attr">:key</span>=<span class="string">"sku.id"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">mouseEnter</span>=<span class="string">"goods.selected=sku"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"sku.image"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>class样式通过 goods.selected的id是否与当前sku的id一致来判断</li><li>绑定了鼠标事件，鼠标进入后把当前sku赋值到goods.selected</li></ul><h3 id="2-3-4-展示sku其它属性代码"><a href="#2-3-4-展示sku其它属性代码" class="headerlink" title="2.3.4.展示sku其它属性代码"></a>2.3.4.展示sku其它属性代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">div class="goods-list"&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"yui3-g"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"yui3-u-1-5"</span> <span class="attr">v-for</span>=<span class="string">"goods in goodList"</span> <span class="attr">:key</span>=<span class="string">"goods.id"</span> &gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-wrap"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p-img"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"item.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"goods.selectedSku.image"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"skus"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:goods.selectedSku.id == sku.id&#125;"</span> </span></span><br><span class="line"><span class="tag">                                    @<span class="attr">mouseenter</span>=<span class="string">"goods.selectedSku=sku"</span> <span class="attr">v-for</span>=<span class="string">"sku in goods.skus"</span> <span class="attr">:key</span>=<span class="string">"sku.id"</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"sku.image"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                  </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">em</span>&gt;</span>¥<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-text</span>=<span class="string">"goods.selectedSku.price"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"attr"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">em</span> <span class="attr">v-text</span>=<span class="string">"goods.selectedSku.title.substring(0,21) + '..'"</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cu"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>促<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123;goods.subTitle.substring(0,15)+'..'&#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"commit"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"command"</span>&gt;</span>已有2000人评价<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operate"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"success-cart.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"sui-btn btn-bordered btn-danger"</span>&gt;</span>加入购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"sui-btn btn-bordered"</span>&gt;</span>对比<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"sui-btn btn-bordered"</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面效果：<br><img src="http://img.smallmartial.cn/20190419151929.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-实现基本搜索&quot;&gt;&lt;a href=&quot;#2-实现基本搜索&quot; class=&quot;headerlink&quot; title=&quot;2.实现基本搜索&quot;&gt;&lt;/a&gt;2.实现基本搜索&lt;/h1&gt;&lt;h2 id=&quot;2-1-页面分析&quot;&gt;&lt;a href=&quot;#2-1-页面分析&quot; class=&quot;head
      
    
    </summary>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/categories/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
    
      <category term="java" scheme="https://github.com/smallmartial/blog.git/tags/java/"/>
    
      <category term="乐优商城" scheme="https://github.com/smallmartial/blog.git/tags/%E4%B9%90%E4%BC%98%E5%95%86%E5%9F%8E/"/>
    
      <category term="springboot" scheme="https://github.com/smallmartial/blog.git/tags/springboot/"/>
    
  </entry>
  
</feed>
